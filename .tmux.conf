#
# byobu w/tmux 2.8+ tmux.conf config
#
unbind-key -n C-a
unbind-key -n C-s
set -g prefix ^S
set -g prefix2 None
bind s send-prefix
bind-key -T prefix k confirm-before -p "kill-pane #P? (y/n)" kill-pane

set -g default-terminal "screen-256color"
set -g default-command "/usr/bin/zsh"
set -g status-bg colour8
set-window-option -g mode-keys vi
set -g base-index 1
setw -g pane-base-index 1

# to make border thin set its bg to default
set-option -g pane-active-border-style "bg=default"

# this was backslash, change to S
bind-key -T prefix S confirm-before kill-server
# need space after backslash here
unbind-key -T prefix \ 

# to make active pane different bg than others
# set -g window-style 'fg=default,bg=colour236'
# set -g window-active-style 'fg=default,bg=colour235'
#
# look in colo[u]rscheme.vim or .vimrc and change:
# hi Normal ctermfg=none ctermbg=none
# to get the inactive style applied to Vim panes

# to change status bar color in copy-mode
set-hook -g 'pane-mode-changed' 'set -gF status-left-style "bg=#{?#{==:#{pane_mode},copy-mode},colour5,colour8}"'
set-hook -g 'session-window-changed' 'set -gF status-left-style "bg=#{?#{==:#{pane_mode},copy-mode},colour5,colour8}"'

set-window-option -g xterm-keys on

# approx scroll back limit
set -g history-limit 10000

set -g status-keys vi

# message display time (ms)
set -g display-time 371

# highlight color
#set-window-option -g mode-fg white
#set -g message-fg            white
#set -g message-command-fg    white
#set-window-option -g mode-bg colour24
#set -g message-bg            colour24
#set -g message-command-bg    colour24

# -----------

# move window tabs around
bind-key -T prefix < swap-window -t -1
bind-key -T prefix > swap-window -t +1

# -----------

# need to update all window bgs when a window goes away
# rotating window background
#set -g window-style 'fg=default,bg=#181b1b'
#set -g window-active-style 'fg=default,bg=#181b1b'
#bind -T prefix c new-window -c "#{pane_current_path}" \; run "tmux select-pane -P bg=$(echo #181b1b)"
# rotating status background
#set -g window-status-style "bg=#282828"
#bind -T prefix c new-window -c "#{pane_current_path}" \; run "tmux set window-status-style bg=$(idx=#I ; idx=$((idx+3)) ; idx=$((idx%3)) ; if [ \$idx -eq 1 ] ; then echo -n \"#282828\" ; elif [ \$idx -eq 2 ] ; then echo -n \"#484848\" ; else echo -n \"#686868\" ; fi)"

# -----------

# current status background
set -g window-status-current-style "bg=#804000"

# make sure to check/unbind F1-F12 in terminator/parent terminal program
# so S-F12 func key toggle does not also unmap C-Right, etc.
bind -n F1 new-window -k -n config byobu-config
# remove byobu rename to "-"
bind -n F2 new-window -c "#{pane_current_path}"
# prefix C-c and prefix c also start new window in curr dir
bind -n F3 previous-window
bind -n F4 next-window
bind -n F5 source-file /usr/share/byobu/profiles/tmuxrc
bind -n F6 detach-client
bind -n F7 copy-mode
bind -n F8 command-prompt -p "(rename-window) " "rename-window '%%'"
bind -n F9 new-window -k -n config byobu-config
# F11 often used in terminator for full-screen
bind-key -n S-F12 source $BYOBU_CONFIG_DIR/funckeys-disable.tmux \; display-message "Func-keys: DISABLED"

# -----------

# vertical split
bind-key -T prefix V split-window -v -c "#{pane_current_path}"
# horizontal split
bind-key -T prefix H split-window -h -c "#{pane_current_path}"
# use shift+arrow to navigate to next window

# -----------

# for repeat Left/Right
set -g repeat-time 1000

set -g escape-time 10

# move around panes

# next ------

# existing mappings:
#bind-key -T prefix C-Space next-window
#bind-key -T prefix Space   next-window
#bind-key -T prefix C-n     next-window
#bind-key -T prefix n       next-window
#bind-key -T prefix M-n     next-window -a

# C-Right used in vim for next word
# make sure to unbind Alt-Right in terminator/parent terminal program
unbind-key -T root M-Right
# M-Right used in vim for next tab
unbind-key -T root C-S-Right
# C-S-Right used in vim for next tab
bind-key -r -T prefix Right next
bind-key -r -T prefix C-Right next
# Super-Right (used by unity/terminator ?)
# S-Right used by tmux to traverse panes
# C-M-Right does not seem to work in tmux

# overloading C-Right is too confusing
#bind -T root C-Right \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Right' \
#			'next'"

# if we map C-^ to C-\ in vim we can use C-\ here
bind -T root C-\ next
# if not #{alternate_on} dont send C-\ key
# data to prevent extraneous chars in output
#bind-key -T root C-\ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{alternate_on}' \
#            'send-keys C-\\' \
#            ''"

# need space after backslash
bind -T prefix \  next

bind -T root M-\ next

# ccsm uses M-Space as Window menu
#bind -T root M-Space next

# zig-zag traversal
#bind -T root C-Space run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 2 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 1 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 4 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 2 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# prev ------

# existing mappings:
#bind-key -T prefix C-h     previous-window
#bind-key -T prefix BSpace  previous-window
#bind-key -T prefix C-p     previous-window
#bind-key -T prefix p       previous-window
#bind-key -T prefix M-p     previous-window -a

# C-Left used in vim for prev word
# make sure to unbind Alt-Left in terminator/parent terminal program
unbind-key -T root M-Left
# M-Left used in vim for prev tab
unbind-key -T root C-S-Left
# C-S-Left used in vim for prev tab
bind-key -r -T prefix Left prev
bind-key -r -T prefix C-Left prev
# Super-Left (used by unity/terminator ?)
# S-Left used by tmux to traverse panes
# C-M-Left does not seem to work in tmux

# overloading C-Left is too confusing
#bind -T root C-Left \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Left' \
#			'prev'"

# could also be shell backward-kill-word
#bind -T root C-p prev
# if not #{alternate_on} dont send C-p key
# data to prevent extraneous chars in output
bind-key -T root C-p \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-p' \
            ''"

bind -T root C-Space prev

bind -T root M-BSpace prev
# C-BSpace in terminator is mapped to M-BSpace

# zig-zag traversal
#bind -T root C-p run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 5 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 0 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi ; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 5 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 3 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# -----------

# NOTE: C-M-p used by parcellite
# NOTE: C-S-p used by terminator

# NOTE: M-Up used by terminator
unbind-key -T root M-Up
# NOTE: M-Down used by terminator
unbind-key -T root M-Down

# M-S-Up/Down/Left/Right to resize panes ...

# -----------

# copy-mode

# Enter copy-mode with 'prefix-[' (also prefix-Esc)
# when entering copy-mode, clear primary clipboard
# so mouse paste from window mgr does send any data
#bind-key [ run "xclip -sel p </dev/null >/dev/null ; tmux copy-mode"
bind-key [ copy-mode
# also add C-[ as that is easily pressed
#bind-key C-[ run "xclip -sel p </dev/null >/dev/null ; tmux copy-mode"
# dont add C-[ as that is also Esc
#bind-key C-[ copy-mode
# ']' was originally set to paste-buffer
# but its nice to also go into copy-mode
#bind-key ] run "xclip -sel p </dev/null >/dev/null ; tmux copy-mode"
bind-key ] copy-mode
# also add C-] as that is easily pressed
#bind-key C-] run "xclip -sel p </dev/null >/dev/null ; tmux copy-mode"
bind-key C-] copy-mode

# if not #{alternate_on} dont send C-] key
# data to prevent extraneous chars in output
bind-key -T root C-] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-]' \
            ''"

# if not #{alternate_on} dont send C-o key
# data to prevent extraneous chars in output
bind-key -T root C-o \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-o' \
            ''"

# if not #{alternate_on} dont send C-n key
# data to prevent extraneous chars in output
bind-key -T root C-n \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-n' \
            ''"

# if not #{alternate_on} dont send C-_ (really C-/) key
# data to prevent extraneous chars in output
bind-key -T root C-_ \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-_' \
            ''"

# vim may remap C-y to paste before cursor ...
# default mapping in copy-mode-vi is scroll-up
unbind-key -T copy-mode-vi C-y
# if not #{alternate_on} dont send C-y key
# data to prevent extraneous chars in output
bind-key -T root C-y \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-y' \
            ''"
# or should C-y paste from root and/or copy-mode ?

# =================================================

# NOTE: could add "xsel -o -b 2>/dev/null | xsel -i -p -t 5000"
# to get selection into PRIMARY, but parcellite can do that also

# global add space toggle (look into set-environment, update-environment)
# NOTE: coordinate any changes here with $BYOBU_CONFIG_DIR/bin/5_addspc
bind -n C-F12 run "if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \$add -eq 1 ] ; then echo 0 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\$BYOBU_DARK]-#[default]#[fg=\\$BYOBU_LIGHT]#[bg=\\$BYOBU_DARK] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: OFF\" ; else echo 1 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\$BYOBU_DARK]+#[default]#[fg=\\$BYOBU_LIGHT]#[bg=\\$BYOBU_DARK] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: ON\" ; fi ; tr -d '\n' < $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc > $BYOBU_RUN_DIR/status.tmux/custom" \; refresh-client -S \; refresh-client -S

# TODO: figure out clipboard and buffer create date and use newest

# prefix = to paste [and cancel copy-mode]
# perhaps this should be prefix v (as it is similar to C-S-v) ? (but its harder to type)
bind-key -T prefix = \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= \"#{alternate_on}\" \
            'send-keys -l =' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"if-shell -Ft= \\\"#{selection_present}\\\" \
                    \\\"send -X copy-pipe-and-cancel \\\\\\\"xsel -i -b -t 5000\\\\\\\" ; paste-buffer -p \\\" \
                    \\\"send -X cancel ; run \\\\\\\"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\\\\\\\" \\\" \" \
                \"run \\\"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\\\" \" ' "

# =================================================

# add M-Insert (IC) because C-S-v does not work within copy-mode
unbind-key -T root M-IC
bind-key   -T root M-IC \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys M-IC' \
            'run \"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\"'"
unbind-key -T copy-mode-vi M-IC
bind-key   -T copy-mode-vi M-IC \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -b -t 5000\" ; paste-buffer -p " \
        "send -X cancel ; run \"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\""

# C-Insert (IC) in terminator is mapped to M-1
unbind-key -T root M-1
bind-key   -T root M-1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys M-1' \
            'run \"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\"'"
unbind-key -T copy-mode-vi M-1
bind-key   -T copy-mode-vi M-1 \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -b -t 5000\" ; paste-buffer -p " \
        "send -X cancel ; run \"xsel -o > /dev/shm/tmux$$.buf ; if [ -f /dev/shm/tmux$$.buf ] ; then tmux load-buffer /dev/shm/tmux$$.buf ; rm -f /dev/shm/tmux$$.buf ; tmux paste-buffer -p ; fi\""

# =================================================

# vim-like mappings for copy-mode cut/paste ...
bind-key -T copy-mode-vi C-j    if -F "#{selection_present}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-Down if -F "#{selection_present}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-k    send-keys -X scroll-up
bind-key -T copy-mode-vi C-Up   send-keys -X scroll-up

bind-key -T copy-mode-vi C-a send-keys -X start-of-line
bind-key -T copy-mode-vi C-e send-keys -X end-of-line

# only real difference is C-v starts a new selection here but toggles in vim
# V for line selection
# C-v for rect selection from current col
#bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle
# seems a little better ...
bind-key -T copy-mode-vi v   if -F "#{selection_present}" "" "send-keys -X begin-selection"
bind-key -T copy-mode-vi V   if -F "#{selection_present}" "" "send-keys -X select-line"
bind-key -T copy-mode-vi C-v if -F "#{selection_present}" "send-keys -X rectangle-toggle" "send-keys -X begin-selection ; send-keys -X rectangle-toggle"

# enter copy-mode and start selection
#bind-key -T prefix v copy-mode \; send-keys -X begin-selection
# conflicts with vertical split
#bind-key -T prefix V copy-mode \; send-keys -X select-line

# <Leader>ws - match vim word-select
bind-key -T copy-mode-vi \ switch-client -T LEADER
bind-key -T LEADER w switch-client -T LEADER
bind-key -T LEADER s send-keys -l lbve

# match vim word nav
bind-key -T copy-mode-vi C-Right send-keys -l w
bind-key -T copy-mode-vi C-Left  send-keys -l b

# disable prefix-d to detach (only use prefix C-d)
unbind-key -T prefix d

# disable previous Space to begin-selection
unbind-key -T copy-mode-vi Space
# map Space to clear selection ???
bind-key   -T copy-mode-vi Space send-keys -X clear-selection

# map Esc to quit copy-mode (as in vi)
bind-key   -T copy-mode-vi Escape send-keys -X cancel

# disable previous q to quit copy-mode
unbind-key -T copy-mode-vi q
# map q to clear selection ???
bind-key   -T copy-mode-vi q send-keys -X clear-selection

bind-key   -T copy-mode-vi X send-keys -X stop-selection

# an alternative to Esc to cancel copy-mode
bind-key   -T copy-mode-vi C-q send-keys -X cancel

# more meaningful cmd-prompt
bind -T prefix : command-prompt -p "tmux:"

# yank to clipboard ...
#
# no longer use tmux-yank plugin
# https://github.com/tmux-plugins/tmux-yank.git
#set -g @copy_mode_yank "C-c"
#set -g @shell_mode "vi"
#run-shell ~/.byobu/tmux-yank/yank.tmux
#
# NOTE: add -q -l 1 args to run xclip in foreground and for only 1 event ...
#
# simple method to copy to clipboard that seems to work in v2.4+
# also clear primary clipboard so mouse paste from window mgr does send any data
bind-key -T copy-mode-vi C-c if -F "#{selection_present}" "send-keys -X copy-pipe-and-cancel \"xsel -i -b -t 5000\" \; display-message \"copied to primary and clipboard\"" ""
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe "xclip -sel p </dev/null >/dev/null ; xclip -sel c >/dev/null" \; display-message "copied to clipboard"
# copy to only clipboard
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe "xclip -sel c >/dev/null" \; display-message "copied to clipboard"
# copy to both
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe "xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null" \; display-message "copied to clipboard"

# also map 'y' to match vim yank
bind-key -T copy-mode-vi y send-keys C-c
# NOTE: instead of clearing primary, could also copy to primary
#       (or use external program like parcellite/ClipIt to keep primary/clipboard in sync)
#       (and then dont need extra "xclip -sel c -o | xclip -sel p" cmds to keep in sync ...)

# Y to add trailing space if enabled
bind-key -T copy-mode-vi Y if -F "#{selection_present}" \
    "send-keys -X copy-pipe-and-cancel \"xsel -i -b -t 5000\" \; run \"if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\\\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \\\$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi\" \; display-message \"copied to primary and clipboard\"" ""

# explicit copy to primary (and clipboard)
#bind-key -T copy-mode-vi C-r send-keys -X copy-pipe-and-cancel "xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null" \; display-message "copied to primary and clipboard"
#bind-key -T copy-mode-vi C-r send-keys -X copy-pipe "xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null" \; display-message "copied to primary and clipboard"

# NOTE: does not work if parcellite or ClipIt is syncing clipboards ...
# explicit clear clipboards (but not tmux buffers!)
#bind-key -T copy-mode-vi C-o run "xclip -l 1 -q -sel p </dev/null 2>/dev/null ; xclip -l 1 -q -sel c </dev/null 2>/dev/null" \; send -X clear-selection \; display-message "primary and clipboard cleared"

# ----------------------------------------------
# Wish we could use right mouse button (paste) to also
# cancel copy-mode but it is often highjacked by window manager
# (test of pasting buffer of 'q<abc...>' shows issue)
# shift + left-mouse-button to select/copy to primary
# shift + right-mouse-button to paste from primary
# But perhaps we can use C-Mouse1Up to do this (see below)
#
# IDEA: tmux mods to cmd-paste-buffer.c
#       to cancel copy-mode on paste
#
#static enum cmd_retval
#cmd_paste_buffer_exec(struct cmd *self, struct cmdq_item *item)
#{
#   ...
#   if (pb != NULL && args_has(args, 'd'))
#       paste_free(pb);
#
#   // mck - cancel copy-mode on paste ...
#   if (wp != NULL && wp->mode == &window_copy_mode)
#       window_pane_reset_mode(wp);
#   // mck
#
#   return (CMD_RETURN_NORMAL);
#}
#
# get by with C-Mouse1Up to paste and cancel copy-mode
#bind -n C-MouseUp1Pane \
#    if-shell -Ft= "#{pane_in_mode}" \
#        "send -X cancel ; paste-buffer -p ; send Space" \
#        "if-shell -Ft= '#{alternate_on}' \
#            '' \
#            'paste-buffer -p ; send Space'"
# could we also copy selection to the primary clipboard ?

bind -T copy-mode-vi C-MouseUp1Pane \
    select-pane \; send -X clear-selection \; set word-separators " ='`;:+|[](){},?\\\"" \; send -l lbve \; send -X stop-selection \; send -X copy-pipe "xsel -i -b -t 5000" \; set word-separators " ='`;:+|[](){},/?\\\"" \; display-message 'copied to primary and clipboard' \; run "if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.30 ; if [ \$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi"
# same but cancel copy mode - could also paste with \; paste-buffer -p \; send Space
bind -T copy-mode-vi M-MouseUp1Pane \
    select-pane \; send -X clear-selection \; set word-separators " ='`;:+|[](){},?\\\"" \; send -l lbve \; send -X stop-selection \; send -X copy-pipe "xsel -i -b -t 5000" \; set word-separators " ='`;:+|[](){},/?\\\"" \; display-message 'copied to primary and clipboard' \; run "if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.30 ; if [ \$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi" \; send -X cancel

bind -T root C-MouseUp1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys C-MouseUp1Pane" \
        "select-pane ; copy-mode ; send -X clear-selection ; set word-separators \" ='`;:+|[](){},?\\\\\\\"\" ; send -l lbve ; send -X stop-selection ; send -X copy-pipe \"xsel -i -b -t 5000\" ; set word-separators \" ='`;:+|[](){},/?\\\\\\\"\" ; display-message 'copied to primary and clipboard' ; run \"if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\\\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.30 ; if [ \\\$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi\""
# same but cancel copy mode - could also paste with ; paste-buffer -p ; send Space
bind -T root M-MouseUp1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys M-MouseUp1Pane" \
        "select-pane ; copy-mode ; send -X clear-selection ; set word-separators \" ='`;:+|[](){},?\\\\\\\"\" ; send -l lbve ; send -X stop-selection ; send -X copy-pipe \"xsel -i -b -t 5000\" ; set word-separators \" ='`;:+|[](){},/?\\\\\\\"\" ; display-message 'copied to primary and clipboard' ; run \"if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\\\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.30 ; if [ \\\$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi\" ; send -X cancel"

# Alt-Mouse3 may be mapped to window resize in gnome
# To change it to <Super>:
# gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
# gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Super>'
#bind -n M-MouseUp3Pane \
#	if-shell -Ft= "#{pane_in_mode}" \
#		"send -X cancel; paste-buffer -p; send Space" \
#		"paste-buffer -p; send Space"
# ----------------------------------------------

# Look into for terminals that support these
# Esc sequences for sending over ssh etc. ...
# could be on | external | off
set -g set-clipboard off

# update interval
set -g status-interval 10

# if focus events supported
set -g focus-events on

# default is " -_@"
# (different than vim due to vim c/c++ devel)
set -g word-separators " ='`;:+|[](){},/?\\\""

# Set window title string
#  #H  Hostname of local host
#  #I  Current window index
#  #P  Current pane index
#  #S  Session name
#  #T  Current window title
#  #W  Current window name
#  #   A literal ‘#’
set-window-option -g automatic-rename on
# sets window name to basename of dir
# set-option -g automatic-rename-format '#{b:pane_current_path}'
set-option -g automatic-rename-format '#{pane_title}'
set-option -g allow-rename on
set-option -g set-titles off
set-option -g set-titles-string "#I:#W"
# auto renumber windows on close
setw -g renumber-windows on

# Make sure to also unmap terminal (ie terminator)
# Ctrl-PgUp/Dn keys for these to take effect

# many [x]terminals use/map Shift-PgUp/Dn ...
#bind-key -T copy-mode-vi S-PPage halfpage-up
#bind-key -T copy-mode-vi S-NPage halfpage-down

unbind -T prefix PPage
unbind -T prefix NPage

bind   -T copy-mode-vi PPage   send-keys -X page-up
bind   -T copy-mode-vi NPage   if -F "#{selection_present}" "send -X page-down" "send -X page-down-and-cancel"

bind   -T copy-mode-vi C-PPage send-keys -X halfpage-up
bind   -T copy-mode-vi C-NPage if -F "#{selection_present}" "send -X halfpage-down" "send -X halfpage-down-and-cancel"

bind   -T copy-mode-vi M-PPage send-keys -XN 4 page-up
bind   -T copy-mode-vi M-NPage if -F "#{selection_present}" "send -XN 4 page-down" "send -XN 4 page-down-and-cancel"

# first press scroll half and enter copy-mode
bind -T root PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys PPage' \
			'copy-mode ; send -X halfpage-up'"

# first press scroll half and enter copy-mode
# instead of PPage, guess that 20 lines is about half a page
bind -T root C-PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 20 Up' \
			'copy-mode ; send -X halfpage-up'"

bind -T root M-PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 4 PPage' \
			'copy-mode ; send -XN 2 page-up'"

# if not #{alternate_on} dont send NPage key
# data to prevent extraneous chars in output
bind -T root NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys NPage' \
			''"

# instead of NPage, guess that 20 lines is about half a page
bind -T root C-NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 20 Down' \
			''"

bind -T root M-NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 4 NPage' \
			''"

# first press does not scroll but just enter copy-mode
bind -T root C-Up \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-Up' \
			'copy-mode'"

# first press does not scroll but just enter copy-mode
bind -T root C-k \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-k' \
			'copy-mode'"

# ==============================================

# mouse scroll / cut/paste options ...

set -g mouse on

#set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Dont cancel highlight when releasing button
# (only works with tmux 2.4+)
#unbind -T copy-mode-vi MouseDragEnd1Pane
# could also copy to clipboards
bind   -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -i -b -t 5000" \; display-message "copied to primary and clipboard"

# ----------

# no longer use tmux-better-mouse-mode plugin
# https://github.com/nhdaly/tmux-better-mouse-mode
#set -g @scroll-down-exit-copy-mode "on"
#set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
#run-shell ~/.byobu/tmux-better-mouse-mode/scroll_copy_mode.tmux

# ----------

# or method below which tries to return back to original mode
#bind -T copy-mode-vi MouseDrag1Pane setw @mode 1\; copy-mode-vi -M
#bind -T copy-mode-vi MouseDragEnd1Pane if -F '#{@mode}' 'send -X copy-selection' 'send -X copy-selection-and-cancel'
#bind -n MouseDrag1Pane if -F '#{mouse_any_flag}' 'if -F "#{pane_in_mode}" "setw -u @mode; copy-mode-vi -M" "send-keys -M"' "setw -u @mode; copy-mode-vi -M"

# ----------

# older method to toggle mouse mode
#unbind m
#bind m run "\
#    tmux show-options -g | grep 'mouse ' | grep -q on; \
#    if [ \$? = 0 ]; \
#    then  \
#        toggle=off;  \
#    else  \
#        toggle=on;  \
#    fi;  \
#    tmux display-message \"mouse is now: \$toggle\";  \
#    tmux set-option -g mouse \$toggle; \
#    "

# ==============================================

# from: https://github.com/sc0ty/config
########################
##### MOUSE CONFIG #####
########################
#
#set -gq mouse on
#
#bind-key -n WheelUpPane \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#	if-shell -Ft= "#{pane_in_mode}" \
#		"send-keys -M ; send-keys -M ; send-keys -M" \
#		"if-shell -Ft= \"#{mouse_any_flag}\" \
#			\"send-keys -M\" \
#			\"if-shell -Ft= '#{alternate_on}' \
#				'send-keys Up Up Up' \
#				'copy-mode'\""
#
#bind-key -n WheelDownPane \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#	if-shell -Ft= "#{pane_in_mode}" \
#		"send-keys -M ; send-keys -M ; send-keys -M" \
#		"if-shell -Ft= \"#{mouse_any_flag}\" \
#			\"send-keys -M\" \
#			\"if-shell -Ft= '#{alternate_on}' \
#				'send-keys Down Down Down'\""
#
#bind-key -n MouseDrag1Pane \
#	if-shell -Ft= "#{mouse_any_flag}" \
#		"if-shell -Ft= '#{pane_in_mode}' 'copy-mode -M' 'send-keys -M'" \
#		"copy-mode -M"
#
## paste with middle click
#bind-key -n MouseDown2Pane run "xsel -o | tmux load-buffer - ; tmux paste-buffer"
#
## double click to select word in normal mode if mouse is not handled
#bind-key -n DoubleClick1Pane \
#	if-shell -Ft= "#{mouse_any_flag}" \
#		"send-keys -M" \
#		"select-pane \; copy-mode \; send-keys -X select-word"
#
## triple click to select line in normal mode if mouse is not handled
#bind-key -n TripleClick1Pane \
#	if-shell -Ft= "#{mouse_any_flag}" \
#		"send-keys -M" \
#		"select-pane \; copy-mode \; send-keys -X select-line"
#
## drag & drop windows on status line by mouse
#bind-key -n MouseDrag1Status swap-window -t=
#
## new window by right click on status line
#bind-key -n MouseDown3Status new-window -a -t= -c '#{pane_current_path}'
#
## new window in background by middle click on status line
#bind-key -n MouseDown2Status new-window -ad -t= -c '#{pane_current_path}'
#
## don't scroll to bottom after mouse select
## workaround for selection being unselected on DragEnd
##bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection
#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -ip"
#
## deselect with mouse click
#bind-key -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection
#
# exit from copy-mode with right-click
#unbind-key -n MouseDown3Pane
#bind-key -T copy-mode-vi MouseDown3Pane select-pane \; send-keys -X cancel
#
# ==============================================

# instead of clear-selection, use stop-selection
# helps from having extra clicks wipe out selection ...
bind -T copy-mode-vi MouseDown1Pane \
    select-pane \; send -X stop-selection

bind -T copy-mode-vi MouseDrag1Pane \
    select-pane \; send -X clear-selection \; send -X begin-selection

bind -T root         MouseDrag1Pane \
    if-shell -Ft= "#{mouse_any_flag}" \
        "send-keys -M" \
        "copy-mode -M"

# default select-word does not always stop selelction with a scroll
bind -T copy-mode-vi DoubleClick1Pane \
    select-pane \; send -X clear-selection \; send -l lbve \; send -X stop-selection \; send -X copy-pipe "xsel -i -b -t 5000" \; run "if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.31 ; if [ \$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi" \; display-message 'copied to primary and clipboard'

# enter copy-mode and copy
bind -T root         DoubleClick1Pane \
 	if-shell -Ft= "#{mouse_any_flag}" \
 		"send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; send -l lbve ; send -X stop-selection ; send -X copy-pipe \"xsel -i -b -t 5000\" ; run \"if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\\\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.31 ; if [ \\\$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi\" ; display-message 'copied to primary and clipboard'"

# default select-line does not always stop selelction with a scroll
# instead of select-line we can try to get next larger entity (lBvE instead of 0v$)
bind -T copy-mode-vi TripleClick1Pane \
    select-pane \; send -X clear-selection \; send -l lBvE \; send -X stop-selection \; send -X copy-pipe "xsel -i -b -t 5000" \; run "if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.31 ; if [ \$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi" \; display-message 'copied to primary and clipboard'
#   select-pane \; run "tmux send -X clear-selection ; tmux send -l 0v\\\$ ; tmux send -X copy-pipe \"xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null\" ; sleep 0.01 ; tmux display-message 'copied to primary and clipboard'"

# enter copy-mode and copy
# instead of select-line we can try to get next larger entity (lBvE instead of 0v$)
bind -T root         TripleClick1Pane \
 	if-shell -Ft= "#{mouse_any_flag}" \
 		"send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; send -l lBvE ; send -X stop-selection ; send -X copy-pipe \"xsel -i -b -t 5000\" ; run \"if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\\\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; sleep 0.31 ; if [ \\\$add -eq 1 ] ; then echo -n ' ' | xsel -a -b -t 5000 ; fi\" ; display-message 'copied to primary and clipboard'"
#       "select-pane ; copy-mode ; send -X clear-selection ; send -l 0v$ ; send -X copy-pipe \"xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null\" ; run \"sleep 0.01 ; tmux display-message 'copied to primary and clipboard'\""

bind -T copy-mode-vi WheelUpPane \
    select-pane \; send-keys -XN 3 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 3 scroll-up

# Alt-Wheel for a faster scroll
bind -T copy-mode-vi M-WheelUpPane \
    select-pane \; send-keys -XN 60 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 60 scroll-up

bind -T root         WheelUpPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 3 Up' \
				'copy-mode ; send -XN 3 scroll-up'\""

bind -T root         M-WheelUpPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 20 Up' \
				'copy-mode ; send -XN 30 scroll-up'\""

# with mouse scroll - want to exit copy-mode when at bottom ...
bind -T copy-mode-vi WheelDownPane \
	select-pane \; send -XN 3 scroll-down-and-cancel
#	select-pane \; send -X stop-selection \; send -XN 3 scroll-down-and-cancel
#	select-pane \; if -F "#{selection_present}" "send -X stop-selection ; send -XN 3 scroll-down-and-cancel" "send -XN 3 scroll-down-and-cancel"

# Alt-Wheel for a faster scroll
bind -T copy-mode-vi M-WheelDownPane \
	select-pane \; send -XN 60 scroll-down-and-cancel
#	select-pane \; send -X stop-selection \; send -XN 60 scroll-down-and-cancel
#	select-pane \; if -F "#{selection_present}" "send -X stop-selection ; send -XN 60 scroll-down-and-cancel" "send -XN 60 scroll-down-and-cancel"

# if not #{alternate_on} dont send Down key
# data to prevent extraneous chars in output
bind -T root         WheelDownPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 3 Down' \
				''\""

bind -T root         M-WheelDownPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 20 Down' \
				''\""

# ==============================================

