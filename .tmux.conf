#
# byobu w/tmux config
#
unbind-key -n C-a
unbind-key -n C-s
set -g prefix ^S
set -g prefix2 None
bind s send-prefix

#if-shell '[[ $TERM =~ "-16color" ]]'  'set -g default-terminal screen-16color'
#if-shell '[[ $TERM =~ "-256color" ]]' 'set -g default-terminal tmux-256color'
set -g default-terminal "screen-256color"
set -g default-command "/usr/bin/zsh"
set -g status-bg colour239
set-window-option -g mode-keys vi
set -g base-index 1
setw -g pane-base-index 1

# dont wrap search around other end of scrollback buffer
set -g wrap-search off

bind-key -T prefix k confirm-before -p "kill-pane #P? (y/n)" kill-pane

# this was backslash, change to S
bind-key -T prefix S confirm-before kill-server
# need space after backslash here or put it in single quotes
unbind-key -T prefix '\'

# approx scroll back limit
set -g history-limit 10000

set -g status-keys vi

# message display time (ms)
set -g display-time 371

set -g mouse on

#setw -g alternate-screen on

set-window-option -g xterm-keys on

# NOTE: use -ga here to add instead of overwrite ...
set-option -ga terminal-overrides 'xterm*:smcup@:rmcup@'
#set-option -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
#set-option -ga terminal-overrides ',*256col*:RGB:sitm=\E[3m'

# ==============================================

# byobu settings:

# these colors are hard-coded -
# BYOBU_ACCENT=#75507B
# BYOBU_DARK=#333333
# BYOBU_HIGHLIGHT=#DD4814
# BYOBU_LIGHT=#EEEEEE
# but these env vars are used below -
# BYOBU_RUN_DIR=/dev/shm/<tmp-path>
# BYOBU_CONFIG_DIR=/home/kellma02/.byobu

# make sure to check/unbind F1-F12 in terminator/parent terminal program
# so S-F12 func key toggle does not also unmap C-Right, etc.
bind -n F1 new-window -k -n config byobu-config
# remove byobu rename to "-"
bind -n F2 new-window -c "#{pane_current_path}"
# prefix C-c and prefix c also start new window in curr dir
bind -n F3 previous-window
bind -n F4 next-window
bind -n F5 source-file /usr/share/byobu/profiles/tmuxrc
bind -n F6 detach-client
bind -n F7 copy-mode
bind -n F8 command-prompt -p "(rename-window) " "rename-window '%%'"
bind -n F9 new-window -k -n config byobu-config
# F10 ?
# F11 often used in terminator for full-screen

bind-key -n S-F12 source $BYOBU_CONFIG_DIR/funckeys-disable.tmux \; display-message "Func-keys: DISABLED"

# add C-s C-r to update IP etc ...
bind-key -T prefix C-r source-file $BYOBU_PREFIX/share/byobu/profiles/tmuxrc \; refresh-client \; display-message "sourcing tmuxrc ..."

# ==============================================

set -g mode-style "fg=#EEEEEE,bg=#75507B"
set -g window-status-style "fg=#EEEEEE,bg=#333333"
set -g window-status-current-style "reverse,fg=#EEEEEE,bg=#333333"
set -g window-status-activity-style "bold,fg=#EEEEEE,bg=#333333"

set-option -g pane-active-border-style "fg=#DD4814,bg=#DD4814"
set-option -g pane-border-style "fg=#75507B,bg=default"

# previous colour172 == orange, 102 is an ok grey
#set -g mode-style "fg=black,bg=colour172"
#set -g mode-style "fg=white,bg=colour131"
# 60, 66, 101, 102, 136, 144, 179, 214 ok as highlight
set -g mode-style "bg=black,fg=colour136"
#set -g mode-style "fg=black,bg=#BC6350"

# previous colour3 == yellow
set -g message-style "fg=black,bg=colour131"
set -g message-command-style "fg=black,bg=colour131"

# to make border thin set its bg to default
set-option -g pane-active-border-style "bg=default"

# current status background
set -g window-status-current-style "fg=#EEEEEE,bg=#804000"

# non-active windows are slightly lighter ...
# but doing this loses default window transparency ...
#set -g window-style        "fg=default,bg=colour237"
#set -g window-active-style "fg=default,bg=colour236"
# setting fg only seems to work ...
set -g window-style        "fg=colour246"
set -g window-active-style "fg=#ffd1b7"
#set -g window-active-style "fg=colour252"

# -----------

# to change status bar color in copy-mode
set-hook -g 'pane-mode-changed' 'set -gF status-left-style "fg=black,bg=#{?#{==:#{pane_mode},copy-mode},colour102,colour239}"'
set-hook -g 'session-window-changed' 'set -gF status-left-style "fg=black,bg=#{?#{==:#{pane_mode},copy-mode},colour102,colour239}"'

# -----------

# move window tabs around
bind-key -T prefix < swap-window -t -1 \; prev
bind-key -T prefix > swap-window -t +1 \; next

# -----------

# vert split  - meaning a vert  cut ... (opposite of tmux but same as vi)
bind-key -T prefix '_' split-window -v -c "#{pane_current_path}"
# horiz split - meaning a horiz cut ... (opposite of tmux but same as vi)
bind-key -T prefix '|' split-window -h -c "#{pane_current_path}"

# use C-s- Left, Right, Up, Down to navigate panes
# use M-S- Left, Right, Up, Down to resize panes (Alt-Shift)
# use C-s-z to toggle pane zoom

# -----------

# synchronize panes
bind-key -T prefix G set -w synchronize-panes \; display-message "synchronize-panes: #{?pane_synchronized,ON,OFF}"

# -----------

# quick help popup for some bindings etc ...
bind-key -T prefix h display-popup -K -E -R "\\cat ${BYOBU_CONFIG_DIR}/help.tmux | less -R -K -Q"
bind-key -T prefix g display-popup -h 5 -K -E -R "pcmd=\"#{pane_current_command}\" ; if [ \"\${pcmd####*ssh*}\" ] ; then ginfo=\$(gitinfo '#{pane_current_path}'); else ginfo=\"git:<n/a>\" ; fi ; echo \${ginfo} | less -R -K -Q -P:"

# -----------

# for repeat Left/Right
set -g repeat-time 1000

# this is a -s option now ...
set -s escape-time 10

# double/triple click period
#set -g click-time 220

# move around panes

# next ------

# existing mappings:
#bind-key -T prefix C-Space next-window
#bind-key -T prefix Space   next-window
#bind-key -T prefix C-n     next-window
#bind-key -T prefix n       next-window
#bind-key -T prefix M-n     next-window -a

unbind-key -T prefix C-n

# C-Right used in vim for next word
# make sure to unbind Alt-Right in terminator/parent terminal program
unbind-key -T root M-Right
# M-Right used in vim for next tab
unbind-key -T root C-S-Right
# C-S-Right used in vim for next tab
#bind-key -r -T prefix Right next
#bind-key -r -T prefix C-Right next
bind-key -T prefix Right   select-pane -R
bind-key -T prefix C-Right select-pane -R
# Super-Right (used by unity/terminator ?)
# S-Right used by tmux to traverse panes - changed above
# used now to nav windows ...
bind-key -T root S-Right next
# C-M-Right does not seem to work in tmux

# overloading C-Right is too confusing
#bind -T root C-Right \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Right' \
#			'next'"

# if we map C-^ to C-\ in vim we can use C-\ here
#bind -T root C-\ next
# But also C-\ is often stty quit ...
# if not #{alternate_on} dont send C-\ key
# data to prevent extraneous chars in output
# NOTE: C-\ used by zsh/bash auto-suggest ...
#bind-key -T root C-\\ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{alternate_on}' \
#            'send-keys C-\\' \
#            ''"

# need space after backslash
#bind -T prefix \  next

#bind -T root M-\ next

# C-BSpace in terminator is mapped to M-BSpace (Esc-BSpace)
bind -T root M-BSpace next

# C-S-Space in terminator is mapped to M-4
# NOTE: used for choose-tree now
#bind -T root M-4 next

# ccsm uses M-Space as Window menu
#bind -T root M-Space next

# zig-zag traversal
#bind -T root C-Space run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 2 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 1 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 4 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 2 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# prev ------

# existing mappings:
#bind-key -T prefix C-h     previous-window
#bind-key -T prefix BSpace  previous-window
#bind-key -T prefix C-p     previous-window
#bind-key -T prefix p       previous-window
#bind-key -T prefix M-p     previous-window -a

unbind-key -T prefix C-p
bind-key -T prefix C-p display-panes

# C-Left used in vim for prev word
# make sure to unbind Alt-Left in terminator/parent terminal program
unbind-key -T root M-Left
# M-Left used in vim for prev tab
unbind-key -T root C-S-Left
# C-S-Left used in vim for prev tab
#bind-key -r -T prefix Left prev
#bind-key -r -T prefix C-Left prev
bind-key -T prefix Left   select-pane -L
bind-key -T prefix C-Left select-pane -L
# Super-Left (used by unity/terminator ?)
# S-Left used by tmux to traverse panes - changed above
# used now to nav windows ...
bind-key -T root S-Left prev
# C-M-Left does not seem to work in tmux

# overloading C-Left is too confusing
#bind -T root C-Left \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Left' \
#			'prev'"

# could also be shell backward-kill-word
#bind -T root C-p prev
# if not #{alternate_on} dont send C-p key
# data to prevent extraneous chars in output
bind-key -T root C-p \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-p' \
            ''"

# C-S-\ in terminator is mapped to M-3 [no more]
# C-= in terminator is mapped to M-3
bind -T root M-3 prev

# C-S-BSpace in terminator is mapped to M-2
bind -T root M-2 prev

bind -T root C-Space prev

# zig-zag traversal
#bind -T root C-p run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 5 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 0 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi ; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 5 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 3 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# -----------

# NOTE: S-Left,Right used for nav windows now
unbind-key -T root S-Up
unbind-key -T root S-Down
# NOTE: we have S-Up   to use for something ...
# NOTE: we have S-Down to use for something ...

bind-key -T prefix Up     select-pane -U
bind-key -T prefix C-Up   select-pane -U

bind-key -T prefix Down   select-pane -D
bind-key -T prefix C-Down select-pane -D

# -----------

# S-BSpace in terminator is mapped to M-4
bind -T root         M-4 choose-tree
bind -T copy-mode-vi M-4 choose-tree

# -----------

# NOTE: C-M-p used by parcellite
# NOTE: C-S-p used by terminator

# NOTE: M-Up used by terminator
unbind-key -T root M-Up
# NOTE: M-Down used by terminator
unbind-key -T root M-Down

# M-S-Up/Down/Left/Right to resize panes ...

# -----------

# copy-mode

# xclip -i -l 1 -sel c -nofork -rmlastnl -sc
# xsel -i -p --rmlastnl --sc

# Enter copy-mode with 'prefix-[' (also prefix-Esc)
# when entering copy-mode, clear primary clipboard
# so mouse paste from window mgr does send any data
bind-key -T prefix [ \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'copy-mode' \
            'copy-mode \; send -XN 2 cursor-left'"
# dont add C-[ as that is also Esc

# ']' was originally set to paste-buffer
# but its nice to also go into copy-mode
bind-key -T prefix ] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'copy-mode' \
            'copy-mode \; send -XN 2 cursor-left'"
# also add C-] as that is easily pressed
bind-key -T prefix C-] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'copy-mode' \
            'copy-mode \; send -XN 2 cursor-left'"

# if not #{alternate_on} dont send C-] key
# data to prevent extraneous chars in output
bind-key -T root C-] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-]' \
            ''"

# if not #{alternate_on} dont send C-o key
# data to prevent extraneous chars in output
bind-key -T root C-o \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-o' \
            ''"

# if not #{alternate_on} dont send C-n key
# data to prevent extraneous chars in output
bind-key -T root C-n \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-n' \
            ''"

# if not #{alternate_on} dont send C-_ (really C-/) key
# data to prevent extraneous chars in output
# NOTE: now used in fzf preview ...
#bind-key -T root C-_ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{alternate_on}' \
#            'send-keys C-_' \
#            ''"

unbind -T prefix C-Space
# prefix Space default mapping is next-window
# use shell C-t to get fzf without popup
bind-key -T prefix Space \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= \"#{alternate_on}\" \
            \"\" \
            \"popup -d '#{pane_current_path}' -x R -y S -w 80% -h 80% -E -K -R \\\"fzf | tmux load-buffer - && tmux paste-buffer -s ' ' -d\\\"\""

# vim may remap C-y to paste before cursor ...
# default mapping in copy-mode-vi is scroll-up
unbind-key -T copy-mode-vi C-y
# if not #{alternate_on} dont send C-y key
# data to prevent extraneous chars in output
bind-key -T root C-y \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys C-y' \
            ''"
# or should C-y paste from root and/or copy-mode ?

# =================================================

# NOTE: rule for embedded quotes is 2x+1 so: 1, 3, 7, 15, 31 ...

# NOTE: could add "xsel -o -p 2>/dev/null | xsel -i -p -t 5000"
# to get selection into PRIMARY, but parcellite can do that also

# global add space toggle (look into set-environment, update-environment)
# NOTE: coordinate any changes here with $BYOBU_CONFIG_DIR/bin/5_addspc
# if pane_current_command contains *ssh* then set ginfo to n/a ...
bind -n C-F12 run "pcmd=\"#{pane_current_command}\" ; if [ \"\${pcmd####*ssh*}\" ] ; then ginfo=\$(gitinfo #{pane_current_path}); else ginfo=\"git:<n/a>\" ; fi ; if [ ! -f /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \$add -eq 1 ] ; then echo 0 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\#333333]- \$ginfo#[default]#[fg=\\#EEEEEE]#[bg=\\#333333] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: OFF \$ginfo\" ; else echo 1 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\#333333]+ \$ginfo#[default]#[fg=\\#EEEEEE]#[bg=\\#333333] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: ON \$ginfo\" ; fi ; tr -d '\n' < $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc > $BYOBU_RUN_DIR/status.tmux/custom" \; refresh-client -S \; refresh-client -S

# TODO: figure out clipboard and buffer create date and use newest

# do we want to add space (based on config) to clipboard if we cancel copy-mode ?
# (y)ank does not add space, (Y)ank does add space
# dragging mouse for selection does not, Esc to cancel does not
# DoubleClick and Ctrl-Click and Alt-Click add space to clipboard
# \ws, C-s-v, C-Insert, M-Insert add space

# =================================================

# NOTE: if bracketed-paste in shell is not enabled then could use paste-buffer -s ' ' instead of -p ...
# TODO: could have a toggle for this

# in copy-mode, if selection then cancel and paste; else cancel, paste from clipboard
# in root mode, if alternate do nothing (TODO: or perhaps send C-s v); else paste from clipboard
# TODO: in root mode, if alternate - enter copy-mode
# C-s v
bind-key -T prefix v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= \"#{alternate_on}\" \
            'copy-mode ; send -l v' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"if-shell -Ft= \\\"#{selection_present}\\\" \
                    \\\"send -X copy-pipe-and-cancel \\\\\\\"xsel -i -p\\\\\\\" ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\\\\\"\\\" \
                    \\\"send -X cancel ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\\\\\" \\\" \" \
                \"run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\" \" ' "

# C-s V (same as C-s v above but send V)
bind-key -T prefix V \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= \"#{alternate_on}\" \
            'copy-mode ; send -l V' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"if-shell -Ft= \\\"#{selection_present}\\\" \
                    \\\"send -X copy-pipe-and-cancel \\\\\\\"xsel -i -p\\\\\\\" ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\\\\\"\\\" \
                    \\\"send -X cancel ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\\\\\" \\\" \" \
                \"run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\" \" ' "

# C-s C-v (same as C-s v above but send ^V)
bind-key -T prefix C-v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= \"#{alternate_on}\" \
            'copy-mode ; send -l ' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"if-shell -Ft= \\\"#{selection_present}\\\" \
                    \\\"send -X copy-pipe-and-cancel \\\\\\\"xsel -i -p\\\\\\\" ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\\\\\"\\\" \
                    \\\"send -X cancel ; run \\\\\\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\\\\\" \\\" \" \
                \"run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\\\" \" ' "

# =================================================

# Delete is DC

# add M-Insert (IC) because C-S-v (from OS) does not work within copy-mode
unbind-key -T root M-IC
bind-key   -T root M-IC \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys M-IC' \
            'run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\"'"
unbind-key -T copy-mode-vi M-IC
bind-key   -T copy-mode-vi M-IC \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\" " \
        "send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\""

# mck
# C-Insert (IC) in terminator is mapped to M-1
unbind-key -T root M-1
bind-key   -T root M-1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{alternate_on}' \
            'send-keys M-1' \
            'run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\"'"
unbind-key -T copy-mode-vi M-1
bind-key   -T copy-mode-vi M-1 \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\" " \
        "send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp ; fi\""

# =================================================

bind-key -T copy-mode-vi Home send-keys -X start-of-line
bind-key -T copy-mode-vi End  send-keys -X end-of-line

# terminator <C-Home> mapped to <Esc>5
bind-key -T copy-mode-vi M-5  send-keys -X history-top
# terminator <C-End> mapped to <Esc>6
bind-key -T copy-mode-vi M-6  send-keys -X history-bottom \; send -l 0$

# if cursor-down-and-copy command exists ... but leave j alone
bind-key -T copy-mode-vi Down   if -F "#{selection_present}" "send -X cursor-down" "send -X cursor-down-and-cancel"

# TODO: what we really want is to scroll-down-and-cancel UNLESS a selection is ACTIVE
# vim-like mappings for copy-mode cut/paste ...
bind-key -T copy-mode-vi C-j    if -F "#{selection_active}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-Down if -F "#{selection_active}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-k    send-keys -X scroll-up
bind-key -T copy-mode-vi C-Up   send-keys -X scroll-up

bind-key -T copy-mode-vi C-a send-keys -X start-of-line
bind-key -T copy-mode-vi C-e send-keys -X end-of-line

# TODO: Append selection ?
unbind   -T copy-mode-vi A
#bind-key -T copy-mode-vi A send-keys -X append_selection

# only real difference is C-v starts a new selection here but toggles in vim
# V for line selection
# C-v for rect selection from current col
#bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle
# seems a little better ...
#bind-key -T copy-mode-vi v   if -F "#{selection_present}" "" "send-keys -X begin-selection"
#bind-key -T copy-mode-vi V   if -F "#{selection_present}" "" "send-keys -X select-line"
# allow for v/V change ...
# TODO: can we remember selection_start_x,y and toggle v/V keeping the start/end x,y ?
bind-key -T copy-mode-vi v   if -F "#{selection_present}" "send -X other-end ; send -X clear-selection ; send -X begin-selection" "send -X begin-selection"
bind-key -T copy-mode-vi V   if -F "#{selection_present}" "send -X other-end ; send -X clear-selection ; send -X select-line" "send -X select-line"
bind-key -T copy-mode-vi C-v if -F "#{selection_present}" "send -X rectangle-toggle" "send -X begin-selection ; send -X rectangle-toggle"

# enter copy-mode and start selection
#bind-key -T prefix v copy-mode \; send-keys -X begin-selection
# conflicts with vertical split
#bind-key -T prefix V copy-mode \; send-keys -X select-line

# <Leader>ws - match vim word-select
bind-key -T copy-mode-vi '\' switch-client -T LEADER
bind-key -T LEADER w switch-client -T LEADER
bind-key -T LEADER c switch-client -T LEADER2
bind-key -T LEADER s send -X clear-selection \; send-keys -l lbvhe \; send -X stop-selection \; send -X copy-pipe-no-clear "xsel -i -p"
# <Leader>wS - match vim WORD (lBvhE) - NOTE: tmux word-separators are different than vim and this is not much different than lbvhe
bind-key -T LEADER S send -X clear-selection \; send-keys -l lBvhE \; send -X stop-selection \; send -X copy-pipe-no-clear "xsel -i -p"
# <Leader>wp - match C-DoubleClick1 to select whole file path
bind-key -T LEADER p send -X clear-selection \; set word-separators " ='`;:+|[](){},?\\\"" \; send -l lbvhe \; send -X stop-selection \; set word-separators " ='`;:+|[](){},/?\\\"" \; send -X copy-pipe-no-clear "xsel -i -p"
# for P - remove : to get https:// etc urls - but really about the same as \wS ...
bind-key -T LEADER P send -X clear-selection \; set word-separators " ='`;+|[](){},?\\\"" \; send -l lbvhe \; send -X stop-selection \; set word-separators " ='`;:+|[](){},/?\\\"" \; send -X copy-pipe-no-clear "xsel -i -p"

# if selection active then continue in search mode, otherwise clear it
bind-key -T copy-mode-vi '/' command-prompt -p 'search/:' 'if -F "#{selection_active}" "run \"tmux copy-mode ; tmux send -X search-forward %1"\" "run \"tmux copy-mode ; tmux send -X clear-selection ; tmux send -X search-forward %1\""'
bind-key -T copy-mode-vi '?' command-prompt -p 'search?:' 'if -F "#{selection_active}" "run \"tmux copy-mode ; tmux send -X search-backward %1"\" "run \"tmux copy-mode ; tmux send -X clear-selection ; tmux send -X search-backward %1\""'

# change n/N so n is always forward and N is always backward
bind-key -T copy-mode-vi n send-keys -X search-forward #{pane_search_string}
bind-key -T copy-mode-vi N send-keys -X search-backward #{pane_search_string}

# NOTE: could use newer send -FX #{copy_cursor_word} to get cursor under word, insead of send -l lbvhe ...
# <Leader>wf - match vim search for word under cursor
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T LEADER f         if -F "#{selection_present}" "send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" "send -X clear-selection \; send-keys -l lbvhe \; send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\""

# and *
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T copy-mode-vi '*' if -F "#{selection_present}" "send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" "send -X clear-selection \; send-keys -l lbvhe \; send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\""

# <Leader>wF - match vim search backward for word under cursor
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T LEADER F         if -F "#{selection_present}" "send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" "send -X clear-selection \; send-keys -l lbvhe \; send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\""

# and '#' - put in single quotes
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T copy-mode-vi '#' if -F "#{selection_present}" "send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" "send -X clear-selection \; send-keys -l lbvhe \; send -X stop-selection \; send -X copy-pipe \"tmux load-buffer - \" \; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\""

# mid-screen, there is already M ...
# C-? (really C-_) like vim
bind-key -T copy-mode-vi C-_ send -l M
# also <Leader>ct like vim
bind-key -T LEADER2 t send -l M

# also zz like vim
bind-key -T copy-mode-vi z switch-client -T LEADER3
bind-key -T LEADER3 z send -l M

# match vim word nav
bind-key -T copy-mode-vi C-Right send-keys -l w
bind-key -T copy-mode-vi C-Left  send-keys -l b

# disable prefix-d to detach (only use prefix C-d)
unbind-key -T prefix d

# should Return/Enter copy and cancel ?
#orig: bind-key   -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
# same as y(ank) or C-c
bind-key -T copy-mode-vi Enter send-keys C-c
#unbind-key -T copy-mode-vi Enter

# disable previous Space to begin-selection
unbind-key -T copy-mode-vi Space
# map Space to clear selection ???
#bind-key   -T copy-mode-vi Space send-keys -X clear-selection

# map Esc to quit copy-mode (as in vi)
bind-key   -T copy-mode-vi Escape send-keys -X cancel

# disable previous q to quit copy-mode
unbind-key -T copy-mode-vi q
# map q to clear selection ???
bind-key   -T copy-mode-vi q send -X stop-selection \; send -X clear-selection

bind-key   -T copy-mode-vi x send-keys -X stop-selection

# an alternative to Esc to cancel copy-mode
bind-key   -T copy-mode-vi C-q send-keys -X cancel
# TODO: what about qq ?  (need LEADER ...)

# more meaningful cmd-prompt
bind -T prefix : command-prompt -p "tmux:"

# yank to clipboard ...
#
# no longer use tmux-yank plugin
# https://github.com/tmux-plugins/tmux-yank.git
#set -g @copy_mode_yank "C-c"
#set -g @shell_mode "vi"
#run-shell ~/.byobu/tmux-yank/yank.tmux

# NOTE: re: selection and appending trailing space ...
# C-c, y (yank) and mouse drag do NOT add trailing space - we assume you are yanking exactly what you want
# Most other selection methods (double-click, \ws, status-left-click, etc.) assume some sort of
# cmd-line paste and add a trailing space if configured to do so (C-F12)

# simple method to copy to clipboard that seems to work in v2.4+
# also clear primary clipboard so mouse paste from window mgr does send any data
# if no selection then cancel copy-mode
bind-key -T copy-mode-vi C-c if -F "#{selection_present}" \
    "send-keys -X copy-pipe-and-cancel \"xsel -i -p\" \; display-message \"copied to clipboard\"" "send -X cancel"
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe-no-clear "xclip -sel p </dev/null >/dev/null ; xclip -sel c >/dev/null" \; display-message "copied to clipboard"
# copy to only clipboard
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe-no-clear "xclip -sel c >/dev/null" \; display-message "copied to clipboard"
# copy to both
#bind-key -T copy-mode-vi C-c send-keys -X copy-pipe-no-clear "xclip -sel c >/dev/null ; xclip -o -sel c | xclip -sel p >/dev/null" \; display-message "copied to clipboard"

# also map 'y' to match vim yank
# if no selection then no-op
bind-key -T copy-mode-vi y if -F "#{selection_present}" \
    "send-keys -X copy-pipe-and-cancel \"xsel -i -p\" \; display-message \"copied to clipboard\"" ""
# NOTE: instead of clearing primary, could also copy to primary
#       (or use external program like parcellite/ClipIt to keep primary/clipboard in sync)
#       (and then dont need extra "xsel -o -p | xclip -sel p" cmds to keep in sync ...)

# Y to add trailing space if enabled
bind-key -T copy-mode-vi Y if -F "#{selection_present}" \
    "send-keys -X copy-pipe-and-cancel \"xsel -i -p\" \; display-message \"copied to clipboard\"" ""

# -----------------

# TODO: take over terminal C-S-c copy / C-S-v paste
bind-key -T copy-mode-vi M-7 if -F "#{selection_present}" \
    "send-keys -X copy-pipe-and-cancel \"xsel -i -p\" \; display-message \"copied to clipboard\"" ""
# always paste ...
bind-key -T root M-8 \
    run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp"
# also map C-S-x to M-9 for vi ...
bind-key -T root M-9 send-keys -l 9

# ----------------------------------------------

# NOTE: use SecondClick to avoid delay between DoubleClick and TripleClick
#       if NEED difference between DoubleClick and TripleClick then use DoubleClick instead of SecondClick

# NOTE: if it was single, need to use Down instead of Up on the single-click so the DoubleClick of the same gets run last
# remove : to get https:// etc urls ...
bind   -T copy-mode-vi C-SecondClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " ='`;+|[](){},?\\\"" \; send -l lbvhe \; send -X stop-selection \; set word-separators " ='`;:+|[](){},/?\\\"" \; send -X copy-pipe-no-clear "xsel -i -p"
# C-TripleClick1Pane select whole line - NOTE: need to use Down instead of Up if we mapped single; does NOT allow extend
bind   -T copy-mode-vi C-TripleClick1Pane \
    select-pane \; send -X clear-selection \; send -l V \; send -X stop-selection \; send -X copy-pipe-no-clear "xsel -i -p"
unbind -T copy-mode-vi C-DoubleClick1Pane

# same as above, but cancel copy mode - could also paste to cmdline then optionally send Space
# use DoubleClick so we dont get extras easily
# remove : to get https:// etc urls ...
bind   -T copy-mode-vi M-SecondClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " ='`;+|[](){},?\\\"" \; send -l lbvhe \; send -X stop-selection \; set word-separators " ='`;:+|[](){},/?\\\"" \; send -X copy-pipe-no-clear "xsel -i -p" \; run "sleep 0.30" \; if -F "#{alternate_on}" "send -X cancel" "send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
# TODO: not sure we can get triple because we leave copy-mode on second above and we are not using double ...
bind   -T copy-mode-vi M-TripleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " ='`;+|[](){},?\\\"" \; send -l lBvhE \; send -X stop-selection \; set word-separators " ='`;:+|[](){},/?\\\"" \; send -X copy-pipe-no-clear "xsel -i -p" \; run "sleep 0.30" \; if -F "#{alternate_on}" "send -X cancel" "send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
unbind -T copy-mode-vi M-DoubleClick1Pane

# NOTE: if it was single, need to use Down instead of Up on the single-click so the DoubleClick of the same gets run last
# remove : to get https:// etc urls ...
bind   -T root C-SecondClick1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; set word-separators \" ='`;+|[](){},?\\\\\\\"\" ; send -l lbvhe ; send -X stop-selection ; set word-separators \" ='`;:+|[](){},/?\\\\\\\"\" ; send -X copy-pipe-no-clear \"xsel -i -p\""
# C-TripleClick1Pane select whole line - NOTE: need to use Down instead of Up if we mapped single; does NOT allow extend
bind   -T root C-TripleClick1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; send -l V ; send -X stop-selection ; send -X copy-pipe-no-clear \"xsel -i -p\""
unbind -T root C-DoubleClick1Pane

# same as above, but cancel copy mode - could also paste to cmdline then optionally send Space
# use DoubleClick so we dont get extras easily
# remove : to get https:// etc urls ...
bind   -T root M-SecondClick1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys -M" \
        "select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \" ='`;+|[](){},?\\\\\\\"\" ; send -l lbvhe ; send -X stop-selection ; set word-separators \" ='`;:+|[](){},/?\\\\\\\"\" ; send -X copy-pipe-no-clear \"xsel -i -p\" ; run \"sleep 0.30\" ; send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
# TODO: not sure we can get triple because we leave copy-mode on second above and we are not using double ...
bind   -T root M-TripleClick1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys -M" \
        "select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \" ='`;+|[](){},?\\\\\\\"\" ; send -l lBvhE ; send -X stop-selection ; set word-separators \" ='`;:+|[](){},/?\\\\\\\"\" ; send -X copy-pipe-no-clear \"xsel -i -p\" ; run \"sleep 0.30\" ; send -X cancel ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
unbind -T root M-DoubleClick1Pane

# ==============================================

# Status ...

# LEFT - root mode - if cmdline not empty clear it, same for C-/M- ...

bind   -T root SecondClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
# triple is the same as second/double ...
bind   -T root TripleClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
unbind -T root DoubleClick1StatusLeft

# ----------------

# C- same as w/o modifier
bind   -T root C-SecondClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
# triple is the same as second/double ...
bind   -T root C-TripleClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
unbind -T root C-DoubleClick1StatusLeft

# ----------------

# M- same as w/o modifier
bind   -T root M-SecondClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
# triple is the same as second/double ...
bind   -T root M-TripleClick1StatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\""
unbind -T root M-DoubleClick1StatusLeft

# ----------------

# LEFT - copy-mode ...

# copy selection and cancel copy-mode, but do not paste to cmdline
bind   -T copy-mode-vi SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
unbind -T copy-mode-vi DoubleClick1StatusLeft

# ----------------

# C- same as w/o modifier
bind   -T copy-mode-vi C-SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi C-TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
unbind -T copy-mode-vi C-DoubleClick1StatusLeft

# ----------------

# M- same as w/o modifier
bind   -T copy-mode-vi M-SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi M-TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
unbind -T copy-mode-vi M-DoubleClick1StatusLeft

# ----------------------------------------------

# RIGHT - paste, C-/M- if cmdline not empty send Enter ...

# paste
bind   -T root SecondClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
# triple is the same as second/double ...
bind   -T root TripleClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\""
unbind -T root DoubleClick1StatusRight

# ----------------

# C- if cmdlline not empty send Enter
bind   -T root C-SecondClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\""
# triple is the same as second/double ...
bind   -T root C-TripleClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\""
unbind -T root C-DoubleClick1StatusRight

# ----------------

# M- if cmdlline not empty send Enter
bind   -T root M-SecondClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\""
# triple is the same as second/double ...
bind   -T root M-TripleClick1StatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "run \"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\""
unbind -T root M-DoubleClick1StatusRight

# ----------------

# RIGHT - copy-mode ...

# copy selection and cancel copy-mode, but do not paste to cmdline
bind-key -T copy-mode-vi SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-and-cancel \"xsel -i -p\" " \
        "send -X cancel"
unbind -T   copy-mode-vi DoubleClick1StatusRight

# ----------------

# C- same as above but paste but no Enter
bind-key -T copy-mode-vi C-SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-no-clear \"xsel -i -p\" ; if -F \"#{alternate_on}\" \"send -X cancel\" \"send -X cancel ; run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\" \" " \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi C-TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-no-clear \"xsel -i -p\" ; if -F \"#{alternate_on}\" \"send -X cancel\" \"send -X cancel ; run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\" \" " \
        "send -X cancel"
unbind -T   copy-mode-vi C-DoubleClick1StatusRight

# ----------------

# M- same as above but paste but no Enter
bind-key -T copy-mode-vi M-SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-no-clear \"xsel -i -p\" ; if -F \"#{alternate_on}\" \"send -X cancel\" \"send -X cancel ; run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\" \" " \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi M-TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X copy-pipe-no-clear \"xsel -i -p\" ; if -F \"#{alternate_on}\" \"send -X cancel\" \"send -X cancel ; run \\\"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\\\" \" " \
        "send -X cancel"
unbind -T   copy-mode-vi M-DoubleClick1StatusRight

# ----------------------------------------------

# CENTER - copy-mode ...

# cancel copy-mode without saving selection without any keypress ...
bind-key -T copy-mode-vi SecondClick1StatusDefault send -X cancel
# triple is the same as second/double ...
bind-key -T copy-mode-vi TripleClick1StatusDefault send -X cancel
unbind   -T copy-mode-vi DoubleClick1StatusDefault

# ----------------------------------------------

# when have Double/Triple click mapped, can be confusing to also have single click mapped ...
# as both will be executed on Double/Triple click ...
#bind-key -T root         MouseUp1StatusRight next
#bind-key -T copy-mode-vi MouseUp1StatusRight next

# history
bind-key -T root WheelUpStatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Up"
bind-key -T root WheelDownStatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Down"

# ----------------

# C-Wheel used for font size by OS/winmgr ...
bind-key -T root M-WheelUpStatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Up"
bind-key -T root M-WheelDownStatusLeft \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Down"

# ----------------

bind-key -T root WheelUpStatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Up"
bind-key -T root WheelDownStatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Down"

# ----------------

# C-Wheel used for font size by OS/winmgr ...
bind-key -T root M-WheelUpStatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Up"
bind-key -T root M-WheelDownStatusRight \
    if-shell -Ft= "#{alternate_on}" \
        "" \
        "send-keys Down"

# ==============================================

# seems to mess things up
unbind-key -T prefix C-z

# C-s C-a - copy cmd from history
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-a); else up arrow for previous cmd
bind-key -T prefix C-a \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= \"#{alternate_on}\" \
            \"\" \
            \"send-keys Up\" "

# C-s C-x - execute cmd
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-x); else if cmdline not empty then Enter
bind-key -T prefix C-x \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= \"#{alternate_on}\" \
            \"\" \
            \"run \\\"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\\\\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\\\" \" "

# C-s C-z - clear cmd
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-z); else if cmdline not empty then clear it
bind-key -T prefix C-z \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= \"#{alternate_on}\" \
            \"\" \
            \"run \\\"nf=$(tmux capture-pane -p | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\\\\\$nf -gt 0 ] ; then tmux send-keys -l  ; fi\\\" \" "

# Alt-Mouse3 may be mapped to window resize in gnome
# To change it to <Super>:
# gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
# gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Super>'

# ----------------------------------------------

# Look into for terminals that support these
# Esc sequences for sending over ssh etc. ...
# could be on | external | off
set -g set-clipboard off

# update interval
set -g status-interval 10

# if focus events supported
set -g focus-events on

# default is " -_@"
# (different than vim due to vim c/c++ devel)
set -g word-separators " ='`;:+|[](){},/?\\\""

# Set window title string
#  #H  Hostname of local host
#  #I  Current window index
#  #P  Current pane index
#  #S  Session name
#  #T  Current window title
#  #W  Current window name
#  #   A literal ‘#’
set-window-option -g automatic-rename on
# sets window name to basename of dir
# set-option -g automatic-rename-format '#{b:pane_current_path}'
set-option -g automatic-rename-format '#{pane_title}'
set-option -g allow-rename on
set-option -g set-titles off
set-option -g set-titles-string "#I:#W"
# auto renumber windows on close
setw -g renumber-windows on

# Make sure to also unmap terminal (ie terminator)
# Ctrl-PgUp/Dn keys for these to take effect

# many [x]terminals use/map Shift-PgUp/Dn ...
#bind-key -T copy-mode-vi S-PPage halfpage-up
#bind-key -T copy-mode-vi S-NPage halfpage-down

unbind -T prefix PPage
unbind -T prefix NPage

bind   -T copy-mode-vi PPage   send-keys -X page-up
# same for ctrl-b, but half-page scroll
bind   -T copy-mode-vi C-b     send-keys -X halfpage-up

bind   -T copy-mode-vi NPage   if -F "#{selection_present}" "send -X page-down" "send -X page-down-and-cancel"
# same for ctrl-f, but half-page scroll
bind   -T copy-mode-vi C-f     if -F "#{selection_present}" "send -X halfpage-down" "send -X halfpage-down-and-cancel"

bind   -T copy-mode-vi C-PPage send-keys -X halfpage-up
bind   -T copy-mode-vi C-NPage if -F "#{selection_present}" "send -X halfpage-down" "send -X halfpage-down-and-cancel"

bind   -T copy-mode-vi M-PPage send-keys -XN 4 page-up
bind   -T copy-mode-vi M-NPage if -F "#{selection_present}" "send -XN 4 page-down" "send -XN 4 page-down-and-cancel"

# first press scroll half and enter copy-mode
bind -T root PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys PPage' \
			'copy-mode ; send -XN 2 cursor-left ; send -X halfpage-up'"

# same for ctrl-b, but half-page scroll
# but make initial less than that ... 10 seems ok
bind -T root C-b \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-b' \
			'copy-mode ; send -XN 2 cursor-left ; send -XN 10 scroll-up'"

# first press scroll half and enter copy-mode
# instead of PPage, guess that 20 lines is about half a page
bind -T root C-PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 20 Up' \
			'copy-mode ; send -XN 2 cursor-left ; send -X halfpage-up'"

bind -T root M-PPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 4 PPage' \
			'copy-mode ; send -XN 2 cursor-left ; send -XN 2 page-up'"

# if not #{alternate_on} dont send NPage key
# data to prevent extraneous chars in output
bind -T root NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys NPage' \
			''"

# same for ctrl-f, but half-page scroll
bind -T root C-f \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-f' \
			''"

# instead of NPage, guess that 20 lines is about half a page
bind -T root C-NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 20 Down' \
			''"

bind -T root M-NPage \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys -N 4 NPage' \
			''"

# first press does not scroll but just enter copy-mode
bind -T root C-Up \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-Up' \
			'copy-mode ; send -XN 2 cursor-left'"

# first press does not scroll but just enter copy-mode
bind -T root C-k \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= '#{alternate_on}' \
			'send-keys C-k' \
			'copy-mode ; send -XN 2 cursor-left'"

# ==============================================

# mouse scroll / cut/paste options ...

# instead of clear-selection, use stop-selection
# helps from having extra clicks wipe out selection ...
# This is special in that it allows a single-click to move cursor to mouse x,y
# But it means you cannot extend any selection with the mouse ...
bind   -T copy-mode-vi MouseDown1Pane select-pane \; send -X stop-selection

bind   -T root         MouseDrag1Pane if-shell -Ft= "#{mouse_any_flag}" "send-keys -M" "copy-mode -M"
bind   -T copy-mode-vi MouseDrag1Pane select-pane \; send -X clear-selection \; send -X begin-selection

# NOTE: copy to clipboard and stop-selection if its only 1 line, but 'y' or 'q' or 'Esc' are all a single keystroke to exit copy-mode, so whats the difference ?
bind  -T copy-mode-vi MouseDragEnd1Pane select-pane \; send-keys -X copy-pipe-no-clear "tmux load-buffer - " \; run "nl=$(tmux show-buffer | head -c -1 | wc -l) ; if [ \$nl -lt 1 ] ; then tmux show-buffer | xsel -i -p ; tmux send -X stop-selection ; fi"
# TODO: since we do not end copy-mode on scroll down to bottom now, do not copy selection to clipboard here, just stop it - forcing C-c etc. to always cancel copy-mode
# see note below about - scroll-down-and-cancel UNLESS a selection is ACTIVE
# see note below about C- to get back original ability to extend a one-line selection
#bind  -T copy-mode-vi MouseDragEnd1Pane select-pane \; send-keys -X copy-pipe-no-clear "tmux load-buffer - " \; run "nl=$(tmux show-buffer | wc -l) ; if [ \$nl -le 1 ] ; then echo 1 > /dev/shm/tmux#{session_name}.ss ; fi" \; if-shell "test -f \"/dev/shm/tmux#{session_name}.ss\"" "send -X stop-selection ; run \"rm -f /dev/shm/tmux#{session_name}.ss\""

# C- copy dragged selection to clipboard and remain in copy-mode
# NOTE: skip for now as we cannot extend selection via keys etc., so its confusing
# NOTE: make C- work like original so we can extend a one-line drag ...
bind -T root         C-MouseDrag1Pane    if-shell -Ft= "#{alternate_on}" "send-keys -M" "if-shell -Ft= \"#{mouse_any_flag}\" \"send-keys -M\" \"copy-mode -M\""
bind -T copy-mode-vi C-MouseDrag1Pane    select-pane \; send -X begin-selection

bind -T root         M-MouseDrag1Pane    if-shell -Ft= "#{alternate_on}" "send-keys -M" "if-shell -Ft= \"#{mouse_any_flag}\" \"send-keys -M\" \"copy-mode -H -M\""
# never get to root M-MouseDragEnd1Pane because we enter copy-mode at start of drag ...

# M- copy dragged selection to clipboard and cancel copy-mode
bind -T copy-mode-vi M-MouseDrag1Pane    select-pane \; send -X begin-selection
bind -T copy-mode-vi M-MouseDragEnd1Pane select-pane \; send -X copy-pipe-and-cancel "xsel -i -p" \; run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp" \; display-message "copied to clipboard"

# ==============================================

# enter copy-mode and copy - NOTE: was #{mouse_any_flag}
bind   -T root         SecondClick1Pane \
    if-shell -Ft= "#{alternate_on}" \
        "send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; send -l lbvhe ; send -X stop-selection ; send -X copy-pipe-no-clear \"xsel -i -p\""
# 3-click - instead of select-line or 0v$ we can try to get next larger entity
# NOTE: not sure this can happen since we enter copy-mode on DoubleClick above ...
# NOTE: tmux word-separators are different than vim and this is not much different than lbvhe
bind   -T root         TripleClick1Pane \
	if-shell -Ft= "#{alternate_on}" \
 		"send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; send -l lBvhE ; send -X stop-selection ; send -X copy-pipe-no-clear \"xsel -i -p\""
unbind -T root         DoubleClick1Pane

# default select-word does not always stop selelction with a scroll (could also have used send -X select-word for lbvhe)
bind   -T copy-mode-vi SecondClick1Pane \
    select-pane \; send -X clear-selection \; send -l lbvhe \; send -X stop-selection \; send -X copy-pipe-no-clear "xsel -i -p"
# 3-click - instead of select-line or 0v$ we can try to get next larger entity
# NOTE: tmux word-separators are different than vim and this is not much different than lbvhe
bind   -T copy-mode-vi TripleClick1Pane \
    select-pane \; send -X clear-selection \; send -l lBvhE \; send -X stop-selection \; send -X copy-pipe-no-clear "xsel -i -p"
unbind -T copy-mode-vi DoubleClick1Pane

# ----------------

# NOTE: in the past we swapped mouse buttons 2 and 3 (via xinput) ...
# NOTE: could just always paste and then do not have to handle these in other apps (vim etc.) ...

bind   -T root MouseDown2Pane if-shell -F -t = "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" " select-pane -t=; send -M " " display-menu -t= -xM -yM -T '#[align=centre]#{pane_index} (#{pane_id})'  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '<' {send -X history-top} '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '>' {send -X history-bottom} '' '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' 'C-r' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward \"#{q:mouse_word}\"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' 'C-y' {copy-mode -q; send-keys -l -- \"#{q:mouse_word}\"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' 'c' {copy-mode -q; set-buffer -- \"#{q:mouse_word}\"} '#{?mouse_line,Copy Line,}' 'l' {copy-mode -q; set-buffer -- \"#{q:mouse_line}\"} '' 'Horizontal Split' 'h' {split-window -h} 'Vertical Split' 'v' {split-window -v} '' '#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} '#{?#{>:#{window_panes},1},,-}Swap Down' 'd' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' 's' {swap-pane} '' 'Kill' 'X' {kill-pane} 'Respawn' 'R' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' 'm' {select-pane -m} '#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z} "

# C-Btn2 used by some terminals (urxvt) ...
unbind -T root C-MouseDown2Pane

# NOTE: A-Btn2 available ...
unbind -T root M-MouseDown2Pane

# ----------------

# NOTE: for vi/vim send mouse event, for all others display menu (alternate_on test is too broad) ...
bind   -T root         MouseDown3Pane select-pane -t = \; if-shell -F "#{m/r:(vi|vim),#{pane_current_command}}" "send -M" "display-menu -x M -y M ' Paste ' '' 'run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\"'"
unbind -T root         SecondClick3Pane
unbind -T root         TripleClick3Pane
unbind -T root         DoubleClick3Pane

# cool if we could use -x#{selection_end_x{} -y #{slection_end_y} ...
bind   -T copy-mode-vi MouseDown3Pane select-pane -t = \; if-shell -F "#{selection_present}" "display-menu -x M -y M ' Copy ' '' 'send-keys -X copy-pipe-and-cancel \"xsel -i -p\"' '' ' Copy+P ' '' 'send-keys -X copy-pipe-and-cancel \"xsel -i -p\" ; run \"xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp\"' '' ' Clear ' '' 'send -X stop-selection ; send -X clear-selection' '' ' Cancel ' '' 'send -X cancel'" "display-menu -t= -xM -yM ' Cancel ' '' 'send -X cancel'"
unbind -T copy-mode-vi SecondClick3Pane
unbind -T copy-mode-vi TripleClick3Pane
unbind -T copy-mode-vi DoubleClick3Pane

# C-Btn3 used by some terminals (urxvt) ...
bind   -T root         C-MouseDown3Pane   select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" " "
bind   -T root         C-SecondClick3Pane select-pane -t = \; if-shell -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" "send -M" " "
unbind -T root         C-TripleClick3Pane
unbind -T root         C-DoubleClick3Pane

unbind -T copy-mode-vi C-MouseDown3Pane
unbind -T copy-mode-vi C-SecondClick3Pane
unbind -T copy-mode-vi C-TripleClick3Pane
unbind -T copy-mode-vi C-DoubleClick3Pane

# A-Btn3 always paste ...
bind   -T root         M-MouseDown3Pane   select-pane -t = \; if-shell -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' 'send -M' 'run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp"'
bind   -T root         M-SecondClick3Pane select-pane -t = \; if-shell -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' 'send -M' 'run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp"'
unbind -T root         M-TripleClick3Pane
unbind -T root         M-DoubleClick3Pane

# copy-mode A-Btn3 cancel copy-mode and paste ...
bind   -T copy-mode-vi M-MouseDown3Pane   select-pane -t = \; if-shell -F '#{selection_present}' 'send-keys -X copy-pipe-and-cancel "xsel -i -p" ; run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp"' ' '
bind   -T copy-mode-vi M-SecondClick3Pane select-pane -t = \; if-shell -F '#{selection_present}' 'send-keys -X copy-pipe-and-cancel "xsel -i -p" ; run "xsel -o -p --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer - && tmux paste-buffer -dp"' ' '
unbind -T copy-mode-vi M-TripleClick3Pane
unbind -T copy-mode-vi M-DoubleClick3Pane

# ----------------

bind -T copy-mode-vi WheelUpPane \
    select-pane \; send-keys -XN 10 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 10 scroll-up

# Alt-Wheel for a faster scroll
bind -T copy-mode-vi M-WheelUpPane \
    select-pane \; send-keys -XN 48 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 48 scroll-up

bind -T root         WheelUpPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 10 Up' \
				'copy-mode ; send -XN 2 cursor-left ; send -XN 5 scroll-up'\""

bind -T root         M-WheelUpPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 20 Up' \
				'copy-mode ; send -XN 2 cursor-left ; send -XN 24 scroll-up'\""

# TODO: what we really want is to scroll-down-and-cancel UNLESS a selection is ACTIVE
# with mouse scroll
# TODO: do we want to exit copy-mode when at bottom if there is a selection ?
bind -T copy-mode-vi WheelDownPane \
    if -F "#{selection_active}" "send -XN 10 scroll-down" "send -XN 10 scroll-down-and-cancel"
#	select-pane \; send -XN 10 scroll-down-and-cancel
#	select-pane \; send -X stop-selection \; send -XN 10 scroll-down-and-cancel
#	select-pane \; if -F "#{selection_present}" "send -X stop-selection ; send -XN 10 scroll-down-and-cancel" "send -XN 10 scroll-down-and-cancel"

# Alt-Wheel for a faster scroll
# TODO: do we want to exit copy-mode when at bottom if there is a selection ?
bind -T copy-mode-vi M-WheelDownPane \
    if -F "#{selection_active}" "send -XN 48 scroll-down" "send -XN 48 scroll-down-and-cancel"
#	select-pane \; send -XN 48 scroll-down-and-cancel
#	select-pane \; send -X stop-selection \; send -XN 48 scroll-down-and-cancel
#	select-pane \; if -F "#{selection_present}" "send -X stop-selection ; send -XN 48 scroll-down-and-cancel" "send -XN 48 scroll-down-and-cancel"

# if not #{alternate_on} dont send Down key
# data to prevent extraneous chars in output
bind -T root         WheelDownPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 10 Down' \
				''\""

bind -T root         M-WheelDownPane \
	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
		"if-shell -Ft= \"#{mouse_any_flag}\" \
			\"send-keys -M\" \
			\"if-shell -Ft= '#{alternate_on}' \
				'send-keys -N 20 Down' \
				''\""

# ==============================================

