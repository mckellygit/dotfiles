#!/bin/sh

usage()
{
cat << EOF

  usage: $0 [-d build-dir] [-n | -f] [-c] [-k]

  Updates exes and libs in /opt/HPCCsystems from build dir
  Updates rpath in exes and libs after copying

  OPTIONS:
    -h       Show this message
    -d <dir> Specify build dir (Debug | Release | RelWithDebInfo)
             note this is optional as it automatically looks for these in the current dir
    -n       Skip modifying rpath in exes and libs copied
    -f       Force modifying rpath in exes and libs even if didn't copy
    -c       clean logs and cores
    -k       kill all hpcc processes

EOF
}

modified=0

# These all go in /opt/HPCCSystems/componentfiles/cl/include:

a=""
for f in \
../HPCC-Platform/system/jlib/jscm.hpp \
../HPCC-Platform/system/include/platform.h \
../HPCC-Platform/system/include/rtlconst.hpp \
../HPCC-Platform/rtl/include/eclhelper_base.hpp \
../HPCC-Platform/rtl/include/eclhelper.hpp \
../HPCC-Platform/rtl/eclrtl/rtlbcd.hpp \
../HPCC-Platform/rtl/eclrtl/eclinclude4.hpp \
../HPCC-Platform/rtl/eclrtl/eclrtl.hpp \
../HPCC-Platform/rtl/eclrtl/eclrtl_imp.hpp \
../HPCC-Platform/rtl/eclrtl/rtldistr.hpp \
../HPCC-Platform/rtl/eclrtl/rtlconst.hpp \
../HPCC-Platform/rtl/eclrtl/rtlds_imp.hpp \
../HPCC-Platform/rtl/eclrtl/rtlfield.hpp \
../HPCC-Platform/rtl/eclrtl/rtlkey.hpp \
../HPCC-Platform/rtl/eclrtl/rtlrecord.hpp
do
    if [ -f ${f} ] ; then
        a=$a"$(sudo rsync -i --update ${f} /opt/HPCCSystems/componentfiles/cl/include)"
    fi
done

if [ -n "${a}" ] ; then
    modified=1
fi

dir=""
do_clean=""
do_kill=""
mod_rpath=1
while getopts “:hnfckd:” OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        n)
            if [ $mod_rpath -eq 1 ] ; then
                mod_rpath=0
            else
                echo "Error modify path already set"
                exit 1
            fi
            ;;
        f)
            if [ $mod_rpath -eq 1 ] ; then
                mod_rpath=2
            else
                echo "Error modify path already set"
                exit 1
            fi
            ;;
        c)
            do_clean="-c"
            ;;
        k)
            do_kill="-k"
            ;;
        d)
            dir=$OPTARG
            ;;
    esac
done

if [ -z "$dir" ] ; then
    if [ -x Debug ] && [ ! -x Release ] && [ ! -x RelWithDebInfo ] ; then
        dir=Debug
    elif [ -x Release ] && [ ! -x Debug ] && [ ! -x RelWithDebInfo ] ; then
        dir=Release
    elif [ -x RelWithDebInfo ] && [ ! -x Debug ] && [ ! -x Release ] ; then
        dir=RelWithDebInfo
    fi
fi

echo "dir: $dir"

if [ -z "$dir" ] ; then
    echo "Error, need -d dir (Debug|Release|RelWithDebInfo)"
    exit 1
fi

if [ ! -x $dir ] ; then
    echo "Error, <$dir> not found"
    exit 1
fi

stop_hpcc ${do_clean} ${do_kill}

output=$(sudo rsync --info=name1 -ai --update --existing $dir/libs/ /opt/HPCCSystems/lib)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi

# -----------------
# tbb libs:
# [oss]/system/tbb_sm/linux_intel64_*_release
if   [ -x $dir/../system/tbb_sm ] ; then
    tbbdir="$(ls -1d 2>/dev/null $dir/../system/tbb_sm/linux_intel64_*_release)"
elif [ -x $dir/../oss/system/tbb_sm ] ; then
    tbbdir="$(ls -1d 2>/dev/null $dir/../oss/system/tbb_sm/linux_intel64_*_release)"
fi

if [ -n "$tbbdir" ] ; then
    tbblib="$(basename $(ls -1 2>/dev/null $tbbdir/libtbb.so.*))"
#   echo "tbb: $tbbdir/$tbblib"
    output=$(sudo rsync --info=name1 -ai --update --existing $tbbdir/$tbblib /opt/HPCCSystems/lib/$tbblib)
#   echo "output = $output"
    if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
        modified=1
    fi

    output=$(sudo rsync --info=name1 -ai --update --existing $tbbdir/libtbb.so /opt/HPCCSystems/lib/libtbb.so)
#   echo "output = $output"
    if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
        modified=1
    fi
fi
# -----------------

output=$(sudo rsync --info=name1 -ai --update --existing $dir/libs/libpy3embed.so /opt/HPCCSystems/versioned/python3)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi
output=$(sudo rsync --info=name1 -ai --update --existing $dir/libs/libpy2embed.so /opt/HPCCSystems/versioned/python2)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi

output=$(sudo rsync --info=name1 -ai --update --existing $dir/libs/ /opt/HPCCSystems/plugins)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi

# libantlr3c.so goes in lib/external dir from a build sub dir ...
# could be in:
#   ../esp/services/ws_sql/antlr3c/lib
# or
#   ../oss/esp/services/ws_sql/antlr3c/lib
# if this is an LN build ...
# with 7.2+ it has moved to a new dir ...
if      [ -x $dir/../esp/services/ws_sql/antlr3c/lib/libantlr3c.so ] ; then
    antlrdir=$dir/../esp/services/ws_sql/antlr3c/lib/libantlr3c.so
elif    [ -x $dir/../oss/esp/services/ws_sql/antlr3c/lib/libantlr3c.so ] ; then
    antlrdir=$dir/../oss/esp/services/ws_sql/antlr3c/lib/libantlr3c.so
elif    [ -x $dir/../esp/services/ws_sql/libantlr3c-3.4/.libs/libantlr3c.so ] ; then
    antlrdir=$dir/../esp/services/ws_sql/libantlr3c-3.4/.libs/libantlr3c.so
elif    [ -x $dir/../oss/esp/services/ws_sql/libantlr3c-3.4/.libs/libantlr3c.so ] ; then
    antlrdir=$dir/../oss/esp/services/ws_sql/libantlr3c-3.4/.libs/libantlr3c.so
else
    antlrdir=""
    echo "WARNING: ws_sql/antlr3c dir not found ..."
fi
if [ -n "$antlrdir" ] ; then
    output=$(sudo rsync --info=name1 -ai --update --existing $antlrdir /opt/HPCCSystems/lib/external/libantlr3c.so)
#   echo "output = $output"
    if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
        modified=1
    fi
fi

output=$(sudo rsync --info=name1 -ai --update --existing $dir/bin/  /opt/HPCCSystems/bin)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi

output=$(sudo rsync --info=name1 -ai --update --existing $dir/bin/  /opt/HPCCSystems/sbin)
#echo "output = $output"
if [ -n "$output" -a "$output" != ".d..t...... ./" ] ; then
    modified=1
fi

#echo "rpath fixup: $mod_rpath"
echo "modified?: $modified"

# to update rpath in all exes and libs ...

if [ $mod_rpath -eq 0 ] ; then
    if [ $modified -eq 1 ] ; then
        echo "NOTE! skipping rpath fixup as requested with \"-n\" arg"
    fi
    exit 0
fi
if [ $modified -eq 0 -a $mod_rpath -eq 1 ] ; then
    exit 0
fi

echo "rpath fixup ..."

odir=${PWD}

for bdir in \
/opt/HPCCSystems/versioned/python2 \
/opt/HPCCSystems/versioned/python3 \
/opt/HPCCSystems/plugins \
/opt/HPCCSystems/lib \
/opt/HPCCSystems/bin \
/opt/HPCCSystems/sbin
do
#   echo "bdir: $bdir"
    cd $bdir
    ls -1 2>/dev/null | while read file
    do
#       echo "file: $file"
        (readelf -d $file | grep RUNPATH | grep -q "$dir") 2> /dev/null
        rc=$?
#       echo "rc: $rc"
        if [ $rc -eq 0 ] ; then
            #patchelf --force-rpath --set-rpath '/opt/HPCCSystems/lib:/opt/HPCCSystems/plugins:/opt/HPCCSystems/lib/external:/usr/local/lib' $file
            patchelf --force-rpath --set-rpath '/opt/HPCCSystems/lib:/opt/HPCCSystems/plugins:/opt/HPCCSystems/lib/external' $file
        fi
    done
    cd $odir
done

exit 0

