#!/bin/bash

# This script programmatically moves around the windows on my screens.
# The JavaScript can be prototyped in Looking Glass (ALT+F2 lg). The documentation of MetaWindow can be found here:
# https://developer.gnome.org/meta/stable/MetaWindow.html
# NOTE: does not seem to resize/move st terminal windows.  It DOES activate them, just not resize/move them.

set -e

M=0

X=690
Y=678
W=2530
H=1380

if [[ -n "$ST_VERSION" ]] ; then
    X=690
    Y=678
    W=2530
    H=1380
elif [[ -n "$WEZTERM_PANE" ]] ; then
    X=690
    Y=678
    W=2540
    H=1362
fi

JS="""
const GLib = imports.gi.GLib;
const Clutter = imports.gi.Clutter;
const Meta = imports.gi.Meta;

var BreakException = {};

var quick = 0;

try {

// 
// global.get_window_actors().forEach(function (w) {
//     var mw = w.meta_window;
// 
//     // var wtitle = mw.get_title();
//     var wtitle = mw.get_wm_class();
// 
//     // global.log('1title: ', wtitle);
// 
//     if (wtitle != '' && wtitle != 'Nautilus' && wtitle != 'Gnome-shell' && (!wtitle.toLowerCase().includes('copyq'))) {
// 
//         if ( !wtitle.toLowerCase().includes('alacritty') ) {
//             GLib.timeout_add(GLib.PRIORITY_DEFAULT, 1, function() { mw.activate(global.get_current_time()); });
//             GLib.usleep(100000);
//         }
// 
//     }
// 
// });
// 

global.get_window_actors().forEach(function (w) {
    var mw = w.meta_window;

    // only works for kitty, but if already ok dont do anything more ...

    if (mw.get_wm_class().toLowerCase() == 'kitty') {
        if (mw.has_focus()) {
            const rect1 = mw.get_frame_rect();
            // global.log('terminal geom: ', rect1.x, rect1.y, rect1.width, rect1.height);
            if (rect1.x >= 680) {
                if (rect1.x <= 700) {
                    if (rect1.y >= 668) {
                        if (rect1.y <= 688) {
                            if (rect1.width >= 2520) {
                                if (rect1.width <= 2550) {
                                    if (rect1.height >= 1360) {
                                        if (rect1.height <= 1390) {
                                            throw BreakException;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

});

// ------------------

global.get_window_actors().forEach(function (w) {
    var once = 1;
    var mw = w.meta_window;
    var wclass = mw.get_wm_class();

    if (once) {
        if (wclass != '' && wclass != 'Nautilus' && wclass != 'Gnome-shell' && (!wclass.toLowerCase().includes('copyq'))) {
            if ( !( mw.get_title().toLowerCase().includes('tmux:') ||
                 wclass.toLowerCase() == 'st' ||
                 wclass.toLowerCase() == 'xterm' ||
                 wclass.toLowerCase() == 'urxvt' ||
                 wclass.toLowerCase() == 'kitty' ||
                 wclass.toLowerCase() == 'alacritty' ||
                 wclass.toLowerCase() == 'foot' ||
                 wclass.toLowerCase() == 'zutty' ||
                 wclass.toLowerCase().includes('.wezterm') ) ) {

                GLib.timeout_add(GLib.PRIORITY_LOW, 500, function() { mw.raise(); });

                const x1 = 5;
                const y1 = 10;
                const seat = Clutter.get_default_backend().get_default_seat();
                seat.warp_pointer(x1, y1);

                GLib.usleep(100000);

                quick = 1;
                once = 0;
            }
        }
    }

});

if (quick) {

// if other windows present then only need to raise other window and move/resize terms to work ...

global.get_window_actors().forEach(function (w) {
    var once = 1;
    var mw = w.meta_window;

    if ( mw.get_title().toLowerCase().includes('tmux:') ||
         mw.get_wm_class().toLowerCase() == 'st' ||
         mw.get_wm_class().toLowerCase() == 'xterm' ||
         mw.get_wm_class().toLowerCase() == 'urxvt' ||
         mw.get_wm_class().toLowerCase() == 'kitty' ||
         mw.get_wm_class().toLowerCase() == 'alacritty' ||
         mw.get_wm_class().toLowerCase() == 'foot' ||
         mw.get_wm_class().toLowerCase() == 'zutty' ||
         mw.get_wm_class().toLowerCase().includes('.wezterm') ) {

        if ( ( (mw.get_title().toLowerCase().includes('SKIPtmux:xterm')) && !(mw.get_title().toLowerCase().includes('kitty')) ) ||
             mw.get_wm_class().toLowerCase().includes('.wezterm') ) {
            mw.move_resize_frame(0, 690, 678, 2540, 1362);
            GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.move_resize_frame(1, 690, 678, 2540, 1362); });
        } else if ( mw.get_wm_class().toLowerCase().includes('alacritty') ) {
            mw.move_resize_frame(0, 690, 678, 2530, 1368);
            GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.move_resize_frame(1, 690, 678, 2530, 1368); });
        } else {
            mw.move_resize_frame(0, 690, 678, 2530, 1380);
            GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.move_resize_frame(1, 690, 678, 2530, 1380); });
        }

        GLib.usleep(100000);

        GLib.timeout_add(GLib.PRIORITY_LOW, 1000, function() { mw.raise(); });

        const x1 = 690 + 2530 / 2;
        const y1 = 678 + 1380 / 2;
        const seat = Clutter.get_default_backend().get_default_seat();
        seat.warp_pointer(x1, y1);
    }

});

    throw BreakException;
}

// ------------------

// no other windows present so need to do some extra crap to make sure with wayland wind actually picks up changes and moves/resizes ...

global.get_window_actors().forEach(function (w) {
    var once = 1;
    var mw = w.meta_window;
    var wclass = mw.get_wm_class();

    if (once) {
        if (wclass != '' && wclass != 'Nautilus' && wclass != 'Gnome-shell' && (!wclass.toLowerCase().includes('copyq'))) {
            if (mw.has_focus()) {
                // GLib.timeout_add(GLib.PRIORITY_DEFAULT-3, 1, function() { mw.focus(global.get_current_time()); });
                GLib.timeout_add(GLib.PRIORITY_DEFAULT-3, 1000, function() { mw.lower(); });
                GLib.usleep(100000);
                once = 0;
            }
        }
    }

    if ( mw.get_title().toLowerCase().includes('tmux:') ||
         mw.get_wm_class().toLowerCase() == 'st' ||
         mw.get_wm_class().toLowerCase() == 'xterm' ||
         mw.get_wm_class().toLowerCase() == 'urxvt' ||
         mw.get_wm_class().toLowerCase() == 'kitty' ||
         mw.get_wm_class().toLowerCase() == 'alacritty' ||
         mw.get_wm_class().toLowerCase() == 'foot' ||
         mw.get_wm_class().toLowerCase() == 'zutty' ||
         mw.get_wm_class().toLowerCase().includes('.wezterm') ) {

        if (mw.get_wm_class().toLowerCase() != 'alacritty') {
            GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.maximize(1); });
        }
    }

});

global.get_window_actors().forEach(function (w) {
    var once = 1;
    var mw = w.meta_window;

    if (once) {

        // var wtitle = mw.get_title();
        // var wclass = mw.get_wm_class();
        // global.log('wtitle: ', wtitle);
        // global.log('wclass: ', wclass);

        if ( mw.get_title().toLowerCase().includes('tmux:') ||
             mw.get_wm_class().toLowerCase() == 'st' ||
             mw.get_wm_class().toLowerCase() == 'xterm' ||
             mw.get_wm_class().toLowerCase() == 'urxvt' ||
             mw.get_wm_class().toLowerCase() == 'kitty' ||
             mw.get_wm_class().toLowerCase() == 'alacritty' ||
             mw.get_wm_class().toLowerCase() == 'foot' ||
             mw.get_wm_class().toLowerCase() == 'zutty' ||
             mw.get_wm_class().toLowerCase().includes('.wezterm') ) {

            GLib.usleep(100000);

            if (mw.get_wm_class().toLowerCase() != 'alacritty') {
                GLib.timeout_add(GLib.PRIORITY_LOW, 1000, function() { mw.unmaximize(3); });
            }

            GLib.usleep(100000);

            if ( ( (mw.get_title().toLowerCase().includes('SKIPtmux:xterm')) && !(mw.get_title().toLowerCase().includes('kitty')) ) ||
                 mw.get_wm_class().toLowerCase().includes('.wezterm') ) {
                // mw.move_resize_frame(0, $X, $Y, 2540, 1362);
                mw.move_resize_frame(0, 690, 678, 2540, 1362);
                GLib.timeout_add(GLib.PRIORITY_DEFAULT, 1500, function() { mw.move_resize_frame(1, 690, 678, 2540, 1362); });
            } else if ( mw.get_wm_class().toLowerCase().includes('alacritty') ) {
                mw.move_resize_frame(0, 690, 678, 2530, 1368);
                GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.move_resize_frame(1, 690, 678, 2530, 1368); });
            } else {
                // mw.move_resize_frame(0, $X, $Y, $W, $H);
                mw.move_resize_frame(0, 690, 678, 2530, 1380);
                GLib.timeout_add(GLib.PRIORITY_DEFAULT, 1500, function() { mw.move_resize_frame(1, 690, 678, 2530, 1380); });
            }

            // if ($M) {
            //     // Maximization needs to be delayed a little, so that the window has time to move
            //     GLib.timeout_add(GLib.PRIORITY_DEFAULT, 500, function() { mw.maximize(3); });
            // }

            GLib.timeout_add(GLib.PRIORITY_LOW, 2500, function() { mw.activate(global.get_current_time()+2000); });

            // GLib.timeout_add(GLib.PRIORITY_DEFAULT, 1, function() { mw.focus(global.get_current_time()); });
            GLib.timeout_add(GLib.PRIORITY_LOW, 3000, function() { mw.raise(); });

            GLib.usleep(100000);

            const x1 = 690 + 2530 / 2;
            const y1 = 678 + 1380 / 2;
            const seat = Clutter.get_default_backend().get_default_seat();
            seat.warp_pointer(x1, y1);

            // const [x, y] = global.get_pointer();
            // const rect = new Meta.Rectangle({ x, y, width: 1, height: 1 });

            // if ( ! rect.intersect(mw.get_frame_rect())[0] ) {
                // pointer is not inside newly focused window, move it to window center ...
                // global.log('cxwins: pos 2');
            //     const rect1 = mw.get_frame_rect();
            //     const x1 = rect1.x + rect1.width / 2;
            //     const y1 = rect1.y + rect1.height / 2;
            //     const seat = Clutter.get_default_backend().get_default_seat();
            //     seat.warp_pointer(x1, y1);
            // }

            once = 0;
            // throw BreakException;
        }

    }

});

} catch (e) {
    if (e !== BreakException) throw e;
}
"""

if [[ $# -ge 1 ]] ; then
    if [[ "$1" == "1" ]] ; then
        sleep 0.65
        xrdb -load ~/.Xresources
    elif [[ "$1" == "shell" ]] ; then
        sleep 0.65
        xrdb -load ~/.Xresources
    elif [[ "$1" == "start" ]] ; then
        sleep 0.65
        xrdb -load ~/.Xresources
    fi
fi

gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell --method org.gnome.Shell.Eval "$JS" >/dev/null

if [[ $# -ge 1 ]] ; then
    if [[ "$1" == "1" ]] ; then
        exec $SHELL
    elif [[ "$1" == "shell" ]] ; then
        exec $SHELL
    elif [[ "$1" == "start" ]] ; then
        exec $SHELL
    fi
fi

exit 0

