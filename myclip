#!/bin/bash

# approx 4/3 * 500k ...
max_osc52_len=667000

check_delay() {
    if [[ $have_delay -eq 0 ]] ; then
        return
    fi
    ntime=$(date +%s.%3N)
    dtime=$(echo "$ntime - $start_time" | bc -l)
    if (( $(echo "$dtime >= $delay" | bc -l) )) ; then
        return
    fi
    wtime=$(echo "$delay - $dtime" | bc -l)
    if (( $(echo "$wtime > 0.000" | bc -l) )) ; then
        echo "sleep ..."
        sleep $wtime
    fi
}

delay=0.30
start_time=$(date +%s.%3N)

if [[ -n "$SUDO_USER" && -n "$SUDO_UID" ]] ; then
    if [[ -z "$XDG_RUNTIME_DIR" ]] ; then
        uid=$(id -u 2>/dev/null)
        export XDG_RUNTIME_DIR="/run/user/$uid"
        if [[ ! -d "$XDG_RUNTIME_DIR" ]] ; then
            mkdir -m 0700 -p "$XDG_RUNTIME_DIR"
        fi
    fi
fi

has_wsl=0
if [[ -n "$WSL_DISTRO_NAME" || -n "$WSLENV" ]] ; then
    has_wsl=1
fi

have_sc=0
have_dcs=0
have_tty=0
have_ssh=0
have_rmnl=0
have_dash=0
have_text=0
have_delay=0
have_nocopy=0
sc_val=""

have_args=0
while [[ $# -ge 1 ]] ; do
    have_args=1
    if [[ $1 == '-o' || $1 == '--o' ]] ; then
        shift
    elif [[ $1 == '-rmlastnl' || $1 == '--rmlastnl' || $1 == '-rml' || $1 == '--rml' ]] ; then
        have_rmnl=1
        shift
    elif [[ $1 == '-sc' || $1 == '--sc' ]] ; then
        shift
        if [[ $# -ge 1 ]] ; then
            have_sc=1
            sc_val=$1
            shift
        else
            echo "Error, -sc arg requires value [-1,0,1] or file"
            exit 1
        fi
    elif [[ $1 == '-d' || $1 == '--d' ]] ; then
        have_delay=1
        shift
    elif [[ $1 == '-' ]] ; then
        have_dash=1
        shift
    elif [[ $1 == '-i' ]] ; then
        have_dash=1
        shift
    elif [[ $1 == '--' ]] ; then
        shift
        have_text=1
        escapedtext=$(printf %q "$@")
        break
    elif [[ $1 == '-nocopy' || $1 == '--nocopy' ]] ; then
        have_nocopy=1
        shift
    else
        have_text=1
        escapedtext=$(printf %q "$@")
        break
    fi
done

if [[ $has_wsl -gt 0 ]]; then
    have_delay=0
fi

if [[ "$SSH_CLIENT" == "ttyterm" || "$SSHIP" == "ttyterm" ]] ; then
    # with fixed screen supporting proper osc52 we can use ssh method
    have_tty=1
    if [[ -n "$SSH_TTY" ]] ; then
        out_tty=$SSH_TTY
    else
        # TODO: reliable way to get tty of oldest grandparent process ...
        # who ?
        #out_tty=$((tty </proc/$PPID/fd/0) 2>/dev/null | grep '/dev/')
        out_tty=/dev/ttyUSB0
    fi
elif [[ -n "$SSH_CLIENT" ]] ; then
    have_ssh=1
    if [[ -n "$SSH_TTY" ]] ; then
        out_tty=$SSH_TTY
    else
        # TODO: reliable way to get tty
        out_tty=/dev/tty
    fi
fi

# ===================================
# COPY
# ===================================

# NOTE: copyq requires copySelection(); addUnique() to set selection and add to item list
# can also clear with xsel -bc ; xsel -pc

# NOTE: to append input to primary and selection -
# copyq "copy(str(clipboard()) + str(input())); copySelection(str(selection()) + str(input())); text=(str(clipboard()) + str(input())) ; if (text.length>0) { addUnique(text) }"

#echo "have_rmnl = $have_rmnl"
#echo "have_dash = $have_dash"

screen_dcs_ttyterm() {
  # Screen limits the length of string sequences, so we have to break it up.
  # Going by the screen history:
  #   (v4.2.1) Apr 2014 - today: 768 bytes
  #   Aug 2008 - Apr 2014 (v4.2.0): 512 bytes
  #   ??? - Aug 2008 (v4.0.3): 256 bytes
  # Since v4.2.0 is only ~4 years old, we'll use the 256 limit.
  # We can probably switch to the 768 limit in 2022.
  local limit=256
  # We go 4 bytes under the limit because we're going to insert two bytes
  # before (\eP) and 2 bytes after (\e\) each string.
  #echo "$1" | \
  #  sed -E "s:.{$(( limit - 4 ))}:&\n:g" | \
  #  sed -E -e 's:^:\x1bP:' -e 's:$:\x1b\\:' | \
  #  tr -d '\n' > /dev/ttyUSB0
  #echo "$1" | \
  #  sed -E "s:.{$(( limit - 4 ))}:&\n:g" | \
  #  sed -E -e 's:^:\x1bP:' -e 's:$:\x1b\\:' | \
  #  tr -d '\n' > /tmp/screen_dcs
  echo "$1" | \
    sed -E "s:.{$(( limit - 4 ))}:&\n:g" | \
    sed -E -e 's:^:\x1bP:' -e 's:$:\x1b\\:' | \
    tr -d '\n' > $out_tty
}

if [[ $have_args -eq 0 || $have_dash -eq 1 ]] ; then
    if [[ $have_nocopy -gt 0 ]] ; then
        exit 0
    fi
    # could have just -
    # exec xsel -i -b
    # since copyq would have then synced clipboard to selection ...
    if [[ $has_wsl -gt 0 ]]; then
        if [[ $have_rmnl -eq 1 && $have_dash -eq 1 ]] ; then
            sed -z '$s/\n$//' | win32yank.exe -i --crlf
        else
            win32yank.exe -i --crlf
        fi
    elif [[ $have_dcs -gt 0 ]]; then
        # osc 52 to screen over serial (DCS) ...
        if [[ $have_rmnl -eq 1 && $have_dash -eq 1 ]] ; then
            inputtext=$(tee | sed -z '$s/\n$//' | base64 | tr -d '\n')
        else
            inputtext=$(tee | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        screen_dcs_ttyterm "$(printf '\033]52;c;%s\a' "${inputtext}")"
    elif [[ $have_tty -gt 0 ]]; then
        # osc 52 ...
        if [[ $have_rmnl -eq 1 && $have_dash -eq 1 ]] ; then
            inputtext=$(tee | sed -z '$s/\n$//' | base64 | tr -d '\n')
        else
            inputtext=$(tee | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        printf "\e]52;c;%s\a" "$inputtext" > $out_tty
    elif [[ $have_ssh -gt 0 ]]; then
        # osc 52 ...
        if [[ $have_rmnl -eq 1 && $have_dash -eq 1 ]] ; then
            inputtext=$(tee | sed -z '$s/\n$//' | base64 | tr -d '\n')
        else
            inputtext=$(tee | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        printf "\ePtmux;\e\e]52;c;%s\a\e\\" "$inputtext" > $out_tty
    else
        if [[ $have_rmnl -eq 1 && $have_dash -eq 1 ]] ; then
#           TODO: strip all trailing newlines ?
#           sed -e :a -e '/^\n*$/{$d;N;ba' -e '}' | sed -z '$s/\n$//' | copyq >/dev/null 2>/dev/null "copy(input()); copySelection(input()); text=input(); if (text.length>0) { addUnique(input()) }"
            sed -z '$s/\n$//' | copyq >/dev/null 2>/dev/null "copy(input()); copySelection(input()); text=input(); if (text.length>0) { addUnique(input()) }"
        else
            copyq >/dev/null 2>/dev/null "copy(input()); copySelection(input()); text=input(); if (text.length>0) { addUnique(input()) }"
        fi
    fi
    check_delay
    exit 0
elif [[ $have_text -eq 1 ]] ; then
    if [[ $have_nocopy -gt 0 ]] ; then
        exit 0
    fi
    # could have just -
    #echo "$escapedtext" | xsel -i -b
    # since copyq would have then synced clipboard to selection ...
    if [[ $has_wsl -gt 0 ]]; then
        if [[ $have_rmnl -eq 1 ]] ; then
            echo -n "$escapedtext" | win32yank.exe -i --crlf
        else
            echo "$escapedtext" | win32yank.exe -i --crlf
        fi
    elif [[ $have_dcs -gt 0 ]]; then
        # osc 52 to screen over serial (DCS) ...
        if [[ $have_rmnl -eq 1 ]] ; then
            inputtext=$(echo -n "${escapedtext}" | base64 | tr -d '\n')
        else
            inputtext=$(echo "${escapedtext}" | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        screen_dcs_ttyterm "$(printf '\033]52;c;%s\a' "${inputtext}")"
    elif [[ $have_tty -gt 0 ]]; then
        # osc 52 ...
        if [[ $have_rmnl -eq 1 ]] ; then
            inputtext=$(echo -n "${escapedtext}" | base64 | tr -d '\n')
        else
            inputtext=$(echo "${escapedtext}" | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        printf "\e]52;c;%s\a" "$inputtext" > $out_tty
    elif [[ $have_ssh -gt 0 ]]; then
        # osc 52 ...
        if [[ $have_rmnl -eq 1 ]] ; then
            inputtext=$(echo -n "${escapedtext}" | base64 | tr -d '\n')
        else
            inputtext=$(echo "${escapedtext}" | base64 | tr -d '\n')
        fi
        ilen=${#inputtext}
        if [[ ${ilen} -gt ${max_osc52_len} ]] ; then
            #errstr="Error: clipboard input length exceeds limit (${ilen} > ${max_osc52_len})"
            #inputtext=$(echo $errstr | base64 | tr -d '\n')
            #printf "\e]52;c;%s\a" "$inputtext" > $out_tty
            #echo $errstr
            exit 99
        fi
        printf "\ePtmux;\e\e]52;c;%s\a\e\\" "$inputtext" > $out_tty
    else
        if [[ $have_rmnl -eq 1 ]] ; then
            echo -n "$escapedtext" | copyq >/dev/null 2>/dev/null "copy(input()); copySelection(input()); text=input(); if (text.length>0) { addUnique(input()) }"
        else
            echo "$escapedtext" | copyq >/dev/null 2>/dev/null "copy(input()); copySelection(input()); text=input(); if (text.length>0) { addUnique(input()) }"
        fi
    fi
    check_delay
    exit 0
fi

# ===================================
# PASTE
# ===================================

add=0
if [[ $have_sc -eq 1 ]] ; then
    if [[ $sc_val == "-1" ]] ; then
        add=$sc_val
    elif [[ $sc_val == "0" ]] ; then
        add=$sc_val
    elif [[ $sc_val  == "1" ]] ; then
        add=$sc_val
    else
        # if not -1, 0, 1 then some path with / in it ...
        if [[ "$sc_val" == *\/* ]] ; then
            if [[ ! -s $sc_val ]] ; then
                add=1
            else
                add=$(cat $sc_val | tr -d '\n')
            fi
        else
            echo "Error, -sc arg requires value [-1,0,1] or file"
            exit 1
        fi
    fi
fi

pre=""
pos=""
if [[ ${add} -eq -1 ]] ; then
    pre=" "
elif [[ ${add} -eq 1 ]] ; then
    pos=" "
fi

# Enable bracketed paste: printf "\e[?2004h"
# Wait for paste to start: you’ll see \e[200~ on STDIN.
# Wait for paste to stop: you’ll see \e[201~ on STDIN.
# Disable bracketed paste: printf "\e[?2004l"

tmpclip=/dev/shm/myclip.$$

trap "rm -f $tmpclip" EXIT

if [[ $has_wsl -gt 0 ]]; then
    if [[ $have_rmnl -eq 0 ]] ; then
        win32yank.exe -o --lf > $tmpclip 2>&1
    else
        win32yank.exe -o --lf | sed -z '$s/\n$//' > $tmpclip 2>&1
    fi
else
    if [[ $have_rmnl -eq 0 ]] ; then
        copyq clipboard > $tmpclip 2>&1
    else
        copyq clipboard | sed -z '$s/\n$//' > $tmpclip 2>&1
    fi
fi

if [[ -s $tmpclip ]] ; then
#   printf "\e[200~"
    echo -n "$pre"
    cat $tmpclip
    echo -n "$pos"
#   printf "\e[201~"
fi

exit 0
