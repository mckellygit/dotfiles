*mck* vimrc documentation

*mck-file*
-------------------------------------------------
<Leader>f. fzf list of current dir files (:Files)
<Leader>f/ fzf list of project dir files (:Files <git-root>)
<Leader>fz same as <Leader>f/
<Leader>ls fzf list of buffers - open in new tab
<Leader>hb hide buffer
<Leader>fb FileBeagle current dir
<Leader>fB FileBeagle project dir
<Leader>of switch to other file (.hpp/.cpp/etc)
<Leader>gf open file at cursor pos
<Leader>gt open file at cursor pos in new tab
<Leader>be bufexplorer [modified]
:Files [<root-dir>]

*mck-git*
-------------------------------------------------
<Leader>gn next changed git block
<Leader>gp prev changed git block
<Leader>gg re-scan for git changes (<C-L>)

*mck-word*
-------------------------------------------------
<Leader>ws word select
<Leader>wS WORD select
<Leader>wp path select
<Leader>wP url select
<Leader>wy word yank
<Leader>yw yank word
<Leader>wf word find next
<Leader>wF word find previous
<Leader>wg word find next and yank
<Leader>wG word find prev and yank
<Leader>wx word exchange - whole word
<Leader>wr word replace - from cursor pos
<Leader>wz zap word (no yank)
<Leader>wZ zap word and yank
<Leader>we change word - from cursor pos
<Leader>wd word delete (no yank)
<Leader>wD word delete and yank
<Leader>wn word new (change word)
<Leader>xp swap chars with char after
<Leader>xP swap chars with char before
sc         swap chars with char after (cs)
sC         swap chars with char before (cS)

*mck-paste*
-------------------------------------------------
<Leader>Pc paste char before cursor
<Leader>pc paste char after cursor
<Leader>Pj UnconditionalPasteJustJoinedBefore
<Leader>pj UnconditionalPasteJustJoinedAfter
<Leader>pp paste char before cursor
<Leader>p0 paste char before cursor
<Leader>p1 paste char after cursor
<Leader>pe paste chars at end of line
<Leader>pE paste chars at end after added space
<Leader>pa paste chars at beg of line
<Leader>pA paste chars at beg of line then add space
<Leader>pl paste lines after current line
<Leader>pL paste lines before current line
<Leader>pb paste block after cursor pos
<Leader>pB paste block before cursor pos
<Leader>pi paste indent after
<Leader>pI paste indent before
<Leader>p. paste more indent after
<Leader>p> paste more indent after
<Leader>p, paste more indent before
<Leader>p< paste more indent before

*mck-search*
-------------------------------------------------
<Leader>hl toggle hlsearch
<Leader>*  set hlsearch and search (*)
<Leader>#  set hlsearch and search (#)
<Leader>sx clear search buffer and stop async running search
<Leader>sq stop async running search
<Leader>sn search (/)
<Leader>sN search (?)
<Leader>sb search buffer [saved] files {results to qf}
<Leader>sd search files in curr dir {results to qf}
<Leader>sg search files in <git-root> dir {results to qf}
<Leader>s. search files in curr dir {fzf+ag window} (:Ag)
<Leader>s/ search files in <git-root> dir {fzf+ag window} (:Agit)
:Ag   <string> [<root-dir>] {fzf/ag window}
:Agit <string> (<root-dir> set to <git-root>) {fzf/ag window}

multi-line/file qf/ll replace
-----------------------------
 -> use <Leader>sb/d/g or any other method to create qf/ll entries
 -> optionally delete entries in qf/ll to skip lines/files, then:
:Acks  s/<old>/<new>/ [|update]
:LAcks s/<old>/<new>/ [|update]
(Acks:cdo) (Ackfs:cfdo) (LAcks:ldo) (LAckfs:lfdo)

filter qf/ll entries
--------------------
:QFGrep[V]               prompt for <pattern> to grep/grep -v
:QFgrepPat[V] <pattern>  grep/grep -v <pattern>
:QFRestore               restore qf/ll to previous
 - or -
:Cfilt[!] /<pattern>/    grep [-v] <pattern>
:Cold                    restore qf
:Cnew                    previous qf
:Lfilt[!] /<pattern>/    grep [-v] <pattern>
:Lold                    restore ll
:Lnew                    previous ll

*mck-terminal*
-------------------------------------------------
<Leader>zs shell terminal
<Leader>zt shell terminal in a new tab

*mck-tab* / *mck-window*
-------------------------------------------------
<Leader>to   open new tab
<Leader>tq   tab quit
<Leader>tk   tab close all others
<Leader>tn   next tab
<Leader>tp   previous tab
<Leader>tw   move current window into new tab
<Leader>tm   merge current tab into Window to the left
<Leader>tM   merge current tab into Window to the right
<C-t>        next tab
<A-Left>     previous tab
<A-Right>    next tab
<C-w>w       next window
<C-w><Left>  next window left
<C-w><Right> next window right
<C-w><Up>    next Window up
<C-w><Down>  next window down
<C-w>10+     resize window +10 lines   :res +10
<C-w>10-     resize window -10 lines   :res -10
<C-w>10<     resize window -10 columns :vertical res -10
<C-w>10>     resize window +10 columns :vertical res +10
<LeftDrag>   drag to move window divider
<Leader>wq   confirm write and quit window
<Leader>qq   confirm write and quit window/tab
<Leader>wk   window close all others

*mck-fold*
-------------------------------------------------
<Leader>ff toggle fold
<Leader>fo open fold
<Leader>fc close fold
<Leader>fn move to next fold
<Leader>fp move to previous fold
<Leader>fO open all folds
<Leader>fC close all folds

*mck-split*
-------------------------------------------------
<Leader>sV   vertical split
<Leader>s|   vertical split new
<Leader>sH   horizontal split
<Leader>s_   horizontal split new
<Leader>sT   tab split
<C-w>t       makes topleft window current
<C-w>K       moves curr window to topmost
<C-w>H       moves curr window to leftmost
<C-w>t<C-w>K to change 2 vertical split windows into horiz split
<C-w>t<C-w>H to change 2 horiz split windows into vertical split

*mck-quit*
-------------------------------------------------
<Leader>wq confirm write and quit window
<Leader>qq confirm write and quit window/tab
<Leader>xc quit all windows and exit
<Leader>wk window close all others
<Leader>nf next file/window/buffer or quit

*mck-misc*
-------------------------------------------------
<C-S>Left  move 10 left
<C-S>Right move 10 right
<C-S>Up    move 10 up
<C-S>Down  move 10 down

<C-S-PgUp> scroll 10 up
<C-S-PgDn> scroll 10 down

z<Left>    scroll horizontal 10 left
z<Right>   scroll horizontal 10 right
z<Up>      move selected line(s) up
z<Down>    move selected line(s) down

<Leader>lx trim trailing spaces
<Leader>lj trim trailing spaces then move down 1 line
<Leader>lk trim trailing spaces then move up 1 line

 +         highlight cross-hair at cursor location

<Leader>ct center text on screen
<Leader>cz center line on screen

<Leader>cc close quickfix and location list
<Leader>cx clear command line

<Leader>cC toggle color syntax

<Leader>lw toggle line wrap

<Leader>rg show registers
<Leader>sr swap history registers (2-entry stack)

<Leader>lr explicit load clipboard into * (named) reg

<Leader>uu undo all

