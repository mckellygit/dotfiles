#
# byobu w/tmux config
#
unbind-key -n C-a
unbind-key -n C-A
unbind-key -n C-s
unbind-key -n C-S
set -g prefix C-s
set -g prefix2 C-S
bind s send-prefix

# NOTE: seems like we should send C-b and not C-B to vi in an xterm ...
# NOTE: can use run -C "send -X #{...}" to get #{...} evaluated, instead of:
#       run "tmux send -X #{...}"

#if-shell '[[ $TERM =~ "-16color" ]]'  'set -g default-terminal screen-16color'
#if-shell '[[ $TERM =~ "-256color" ]]' 'set -g default-terminal tmux-256color'
# use tmux-256color instead of screen-256color as has modified func keys
# screen + serial tty alt-screen scrollback buffer works ok with tmux-256color
#set -g default-terminal "xterm-256color"
set -g default-terminal "tmux-256color"
set -g default-command "/usr/bin/zsh"
set-window-option -g mode-keys vi
set -g base-index 1
setw -g pane-base-index 1

# change prefix 0 binding to go to window 1, since we are 1 based now
bind-key -T prefix 0 select-window -t :=1

set -s backspace ^?

# dont wrap search around other end of scrollback buffer
set -g wrap-search off

# kill dead pane ...
bind-key -T prefix K confirm-before -p "kill-pane #P? (y/n)" kill-pane

# add a prompt to save accidentally detaching ...
bind-key -T prefix C-d confirm-before -p "detach-client (session #S)? (y/n)" detach-client
bind-key -T prefix C-D confirm-before -p "detach-client (session #S)? (y/n)" detach-client

# this was backslash, change to S
bind-key -T prefix S confirm-before kill-server
# need space after backslash here or put it in single quotes
unbind-key -T prefix '\'

# approx scroll back limit
set -g history-limit 50000

set -g status-keys vi

# message display time (ms)
set -g display-time 371

set -g mouse on

set -g monitor-bell off

set -g alternate-screen on

set -g allow-passthrough all

# could be off | external | on
# NOTE: must be set to on for tmux to forward osc-52 text to clipboard (and load-buffer)
#       Not sure if Ms terminfo feature needs to also be set ? (Ms=\E]52;%p1%s;%p2%s\007')
#   printf "\e]52;c;%s\a"               "$(echo -n 'osc string ...' | base64 -i)"
# BUT: if allow-passthrough set to all then can have clipboard off and use \ePtmux;\e<escape-code>\e\\
#   printf "\ePtmux;\e\e]52;c;%s\a\e\\" "$(echo -n 'osc string ...' | base64 -i)"
set -g set-clipboard off

# update interval
set -g status-interval 10

# if focus events supported
set -g focus-events on

# default is " -_@"
# (different than vim due to vim c/c++ devel)
set -g word-separators " &='`;:+|[](){},/?\\\""

# Set window title string
#  #H  Hostname of local host
#  #I  Current window index
#  #P  Current pane index
#  #S  Session name
#  #T  Current window title
#  #W  Current window name
#  #   A literal ‘#’
set-window-option -g automatic-rename on
# sets window name to format below ...
#set-option -g automatic-rename-format '#{=-12:pane_current_path}'
# if shell PROMPT/PS1/etc. sets title (can work over ssh) ...
#set-option -g automatic-rename-format '#{pane_title}'
set-option -g automatic-rename-format '#{=-20:pane_title}'
# but we may change title in app to comm with tmux ...
set-option -g allow-rename on

# terminal window title
set-option -g set-titles on
# shell PROMPT/PS1/etc. can change title dynamically ...
#set-option -g set-titles-string '#{pane_title}'
# but we may change title in app to comm with tmux ...
# #I:#W makes title match win/tab names ...
#set-option -g set-titles-string '#I:#W'
set-option -g set-titles-string 'tmux:#{client_termname}'

# auto renumber windows on close
setw -g renumber-windows on

# ============ terminal options ================

# unknown csi ESC[>c
# unknown csi ESC[>q
# unknown private set/reset mode 7727
# at start and end, tmux sends -
# CSI >c and >q terminal version queries
# SM 7727 mintty Escape key extension

# NOTE: unset to remove any previous (byobu) overrides
#       (byobu also maps M-L/R/U/D)
set-option -s terminal-overrides ''

# NOTE: use -ga here to add instead of overwrite ...
# NOTE: smcup/rmcup setting breaks kitty scrollwheel ...
#set-option -ga terminal-overrides 'xterm*:smcup@:rmcup@'

#set-option -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[2 q'
#set-option -ga terminal-overrides '*256col*:RGB:sitm=\E[3m'

# rxvt has cvvis=\E[?12;25h for blinking cursor, set cnorm to this also
set-option -sa terminal-overrides 'rxvt*:cnorm=\E[?12;25h'
#set-option -sa terminal-features  'rxvt*:cstyle'
set-option -sa terminal-overrides 'st*:cvvis=\E[?12l\E[?25h'
set-option -sa terminal-overrides 'st*:Ss=\E[%p1%d q:Se=\E[0 q'
#set-option -sa terminal-overrides 'st*:Ss=\E[%p1%d q:Se=\E[2 q'

#set-option -sa terminal-overrides 'rxvt*:blink=\E[1m'
#set-option -sa terminal-overrides 'st*:blink=\E[1m'
set-option -sa terminal-overrides 'xterm*:blink=\E[1m'
set-option -sa terminal-overrides 'wezterm*:blink=\E[1m'
set-option -sa terminal-overrides 'foot*:blink=\E[1m'

# true color support, but NOTE this breaks rxvt and zutty reverse,bold colors ...
# or
#set-option -sa terminal-overrides 'alacritty*:Tc'
# or
set-option -sa terminal-features 'alacritty*:RGB'
set-option -sa terminal-features 'foot*:RGB'
# dont seem to need this for wezterm or st ...

# do we need these ?
set-option -sa terminal-overrides '*:Ms=\E]52;%p1%s;%p2%s\007'
#set-option -sa terminal-overrides "*:Ms=\E]52;c;%p2%s\007"
set-option -sa terminal-features  '*:clipboard'

# extkeys - off | on | always
set-option -s extended-keys always
# extkeys _may_ cause some terminals to send CSI codes (ie modifyOtherKeys==2)
#set-option -sa terminal-features  '*:extkeys'

# ==============================================

# byobu settings:

# these colors are hard-coded -
# BYOBU_ACCENT=#75507B
# BYOBU_DARK=#333333
# BYOBU_HIGHLIGHT=#DD4814
# BYOBU_LIGHT=#EEEEEE
# these env vars are set before starting tmux -
# BYOBU_RUN_DIR=/dev/shm/<tmp-path>
# BYOBU_CONFIG_DIR=$HOME/.byobu

# make sure to check/unbind F1-F12 in terminator/parent terminal program
# so S-F12 func key toggle does not also unmap C-Right, etc.
#bind-key -T root F1 new-window -k -n config byobu-config
# remove byobu rename to "-"
#bind-key -T root F2 new-window -c "#{pane_current_path}"
# prefix C-c and prefix c also start new window in curr dir
#bind-key -T root F3 previous-window
#bind-key -T root F4 next-window
#bind-key -T root F5 source-file /usr/share/byobu/profiles/tmuxrc
#bind-key -T root F6 detach-client
#bind-key -T root F7 copy-mode
#bind-key -T root F8 command-prompt -p "(rename-window) " "rename-window '%%'"
#bind-key -T root F9 new-window -k -n config byobu-config

bind-key -T prefix F12 run -b "term_win_loc ; tmux refresh-client" \; display-message -d 900 -N "moving and resizing window ..."
unbind-key -T prefix F11
unbind-key -T prefix F10
unbind-key -T prefix F9
unbind-key -T prefix F8
unbind-key -T prefix F7
unbind-key -T prefix F6
unbind-key -T prefix F5
unbind-key -T prefix F4
unbind-key -T prefix F3
unbind-key -T prefix F2
unbind-key -T prefix F1

bind-key -T prefix S-F12 source $BYOBU_CONFIG_DIR/funckeys-disable.tmux \; display-message "Func-keys: DISABLED"
unbind-key -T prefix S-F11
unbind-key -T prefix S-F10
unbind-key -T prefix S-F9
unbind-key -T prefix S-F8
unbind-key -T prefix S-F7
unbind-key -T prefix S-F6
unbind-key -T prefix S-F5
unbind-key -T prefix S-F4
unbind-key -T prefix S-F3
unbind-key -T prefix S-F2
unbind-key -T prefix S-F1

unbind-key -T prefix C-F12
unbind-key -T prefix C-F11
unbind-key -T prefix C-F10
unbind-key -T prefix C-F9
unbind-key -T prefix C-F8
unbind-key -T prefix C-F7
unbind-key -T prefix C-F6
unbind-key -T prefix C-F5
unbind-key -T prefix C-F4
unbind-key -T prefix C-F3
unbind-key -T prefix C-F2
unbind-key -T prefix C-F1

unbind-key -T prefix M-F12
unbind-key -T prefix M-F11
unbind-key -T prefix M-F10
unbind-key -T prefix M-F9
unbind-key -T prefix M-F8
unbind-key -T prefix M-F7
unbind-key -T prefix M-F6
unbind-key -T prefix M-F5
unbind-key -T prefix M-F4
unbind-key -T prefix M-F3
unbind-key -T prefix M-F2
unbind-key -T prefix M-F1

bind-key -T root F12 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F12' \
            ''"
bind-key -T root F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F11' \
            ''"
bind-key -T root F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F10' \
            ''"
bind-key -T root F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F9' \
            ''"
bind-key -T root F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F8' \
            ''"
bind-key -T root F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F7' \
            ''"
bind-key -T root F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F6' \
            ''"
bind-key -T root F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F5' \
            ''"
bind-key -T root F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F4' \
            ''"
bind-key -T root F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F3' \
            ''"
bind-key -T root F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F2' \
            ''"
bind-key -T root F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys F1' \
            ''"

bind-key -T root S-F12 source $BYOBU_CONFIG_DIR/funckeys-disable.tmux \; display-message "Func-keys: DISABLED"
bind-key -T root S-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F11' \
            ''"
bind-key -T root S-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F10' \
            ''"
bind-key -T root S-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F9' \
            ''"
bind-key -T root S-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F8' \
            ''"
bind-key -T root S-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F7' \
            ''"
bind-key -T root S-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F6' \
            ''"
bind-key -T root S-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F5' \
            ''"
bind-key -T root S-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F4' \
            ''"
bind-key -T root S-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F3' \
            ''"
bind-key -T root S-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-F2' \
            ''"
# S-F1 byobu info ...
#bind-key -T root S-F1 \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-F1' \
#            ''"

# C-F12 below ...
bind-key -T root C-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F11' \
            ''"
bind-key -T root C-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F10' \
            ''"
bind-key -T root C-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F9' \
            ''"
bind-key -T root C-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F8' \
            ''"
bind-key -T root C-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F7' \
            ''"
bind-key -T root C-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F6' \
            ''"
bind-key -T root C-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F5' \
            ''"
bind-key -T root C-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F4' \
            ''"
bind-key -T root C-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F3' \
            ''"
bind-key -T root C-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F2' \
            ''"
bind-key -T root C-F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-F1' \
            ''"

bind-key -T root C-S-F12 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F12' \
            ''"
bind-key -T root C-S-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F11' \
            ''"
bind-key -T root C-S-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F10' \
            ''"
bind-key -T root C-S-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F9' \
            ''"
bind-key -T root C-S-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F8' \
            ''"
bind-key -T root C-S-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F7' \
            ''"
bind-key -T root C-S-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F6' \
            ''"
bind-key -T root C-S-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F5' \
            ''"
bind-key -T root C-S-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F4' \
            ''"
bind-key -T root C-S-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F3' \
            ''"
bind-key -T root C-S-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F2' \
            ''"
bind-key -T root C-S-F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-F1' \
            ''"

# WARN: C-M-F3..F12 can cause blank screen or console login
#       try C-M-F2 to return to normal
bind-key -T root C-M-F12 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F12' \
            ''"
bind-key -T root C-M-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F11' \
            ''"
bind-key -T root C-M-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F10' \
            ''"
bind-key -T root C-M-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F9' \
            ''"
bind-key -T root C-M-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F8' \
            ''"
bind-key -T root C-M-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F7' \
            ''"
bind-key -T root C-M-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F6' \
            ''"
bind-key -T root C-M-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F5' \
            ''"
bind-key -T root C-M-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F4' \
            ''"
bind-key -T root C-M-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F3' \
            ''"
bind-key -T root C-M-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F2' \
            ''"
bind-key -T root C-M-F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-F1' \
            ''"

bind-key -T root M-F12 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F12' \
            ''"
bind-key -T root M-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F11' \
            ''"
bind-key -T root M-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F10' \
            ''"
bind-key -T root M-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F9' \
            ''"
bind-key -T root M-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F8' \
            ''"
bind-key -T root M-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F7' \
            ''"
bind-key -T root M-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F6' \
            ''"
bind-key -T root M-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F5' \
            ''"
bind-key -T root M-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F4' \
            ''"
bind-key -T root M-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F3' \
            ''"
bind-key -T root M-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F2' \
            ''"
bind-key -T root M-F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-F1' \
            ''"

bind-key -T root M-S-F12 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F12' \
            ''"
bind-key -T root M-S-F11 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F11' \
            ''"
bind-key -T root M-S-F10 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F10' \
            ''"
bind-key -T root M-S-F9 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F9' \
            ''"
bind-key -T root M-S-F8 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F8' \
            ''"
bind-key -T root M-S-F7 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F7' \
            ''"
bind-key -T root M-S-F6 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F6' \
            ''"
bind-key -T root M-S-F5 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F5' \
            ''"
bind-key -T root M-S-F4 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F4' \
            ''"
bind-key -T root M-S-F3 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F3' \
            ''"
bind-key -T root M-S-F2 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F2' \
            ''"
bind-key -T root M-S-F1 \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-F1' \
            ''"

# add C-s C-q to update IP etc ...
bind-key -T prefix C-q source-file $BYOBU_CONFIG_DIR/tmuxrc \; refresh-client \; display-message "sourcing tmuxrc ..."
bind-key -T prefix C-Q source-file $BYOBU_CONFIG_DIR/tmuxrc \; refresh-client \; display-message "sourcing tmuxrc ..."
bind-key -T prefix q   source-file $BYOBU_CONFIG_DIR/tmuxrc \; refresh-client \; display-message "sourcing tmuxrc ..."

# ==============================================

#set -g status-bg colour239
set -g status-style "bg=colour239"

# non-active windows are slightly lighter ...
# but doing this loses default window transparency ...
#set -g window-style        "fg=default,bg=colour237"
#set -g window-active-style "fg=default,bg=colour236"
# setting fg only seems to work ...
set -g window-style        "fg=colour246"
# this is for window text (not client side decoration title etc.)
set -g window-active-style "fg=#fbdbb2"
#set -g window-active-style "fg=#ffd1b7"
#set -g window-active-style "fg=colour252"

set -g window-status-style "fg=#EEEEEE,bg=#333333"
# current status background
set -g window-status-current-style "fg=#EEEEEE,bg=#804000"
#set -g window-status-current-style "reverse,fg=#EEEEEE,bg=#333333"
set -g window-status-activity-style "bold,fg=#EEEEEE,bg=#333333"

set -g pane-border-style "fg=#75507B,bg=default"
#set-option -g pane-active-border-style "fg=#DD4814,bg=#DD4814"

# off, colour, arrows, both
set -g pane-border-indicators "arrows"

# to make border thin set its bg to default
set -g pane-active-border-style "bg=default"

# previous colour172 == orange, 102 is an ok grey
#set -g mode-style "fg=colour16,bg=colour172"
#set -g mode-style "fg=white,bg=colour131"
# 60, 66, 101, 102, 136, 144, 179, 214 ok as highlight
set -g mode-style "bg=colour16,fg=colour136"
#set -g mode-style "fg=colour16,bg=#BC6350"
#set -g mode-style "fg=#EEEEEE,bg=#75507B"

# previous colour3 == yellow
set -g message-style "fg=colour16,bg=colour131"
set -g message-command-style "fg=colour16,bg=colour131"

# -----------

setenv -g COPY_DRAG 0
setenv -g COPY_START 0
#setenv -g MYCLIP_APPEND 0

# d78700 is colour172
set -gF cursor-color colour172

# initial left status bar colors
set -gF status-left-style "fg=#{?#{==:#{pane_mode},copy-mode},colour136,colour16},bg=#{?#{==:#{pane_mode},copy-mode},colour16,colour239}"
# to change left status bar colors in copy-mode
set-hook -g 'pane-mode-changed'      'set -wF status-left-style "fg=#{?#{==:#{pane_mode},copy-mode},colour136,colour16},bg=#{?#{==:#{pane_mode},copy-mode},colour16,colour239}" ; if -F "#{!=:#{pane_mode},copy-mode}" "setenv -g COPY_DRAG 0 ; setenv -g COPY_START 0" ; set -gF cursor-color "#{?#{==:#{pane_mode},copy-mode},colour72,colour172}'
set-hook -g 'session-window-changed' 'set -wF status-left-style "fg=#{?#{==:#{pane_mode},copy-mode},colour136,colour16},bg=#{?#{==:#{pane_mode},copy-mode},colour16,colour239}" ; if -F "#{!=:#{pane_mode},copy-mode}" "setenv -g COPY_DRAG 0 ; setenv -g COPY_START 0" ; set -gF cursor-color "#{?#{==:#{pane_mode},copy-mode},colour72,colour172}'
set-hook -g 'pane-focus-in'          'set -wF status-left-style "fg=#{?#{==:#{pane_mode},copy-mode},colour136,colour16},bg=#{?#{==:#{pane_mode},copy-mode},colour16,colour239}" ; if -F "#{!=:#{pane_mode},copy-mode}" "setenv -g COPY_DRAG 0 ; setenv -g COPY_START 0" ; set -gF cursor-color "#{?#{==:#{pane_mode},copy-mode},colour72,colour172}'

# try to be deterministic about where to land after closing a shell ...
#set-hook -g 'pane-exited'    "run \"nw=\\\$(tmux list-windows | wc -l) ; nw2=\\\$((nw/2)); nw3=\\\$((nw2+1)) ; tmux select-window -t \\\$nw3\""
setenv -g TMUX_LAST_WIN 1
set-hook -g 'pane-focus-out' "run -C \"setenv -g TMUX_LAST_WIN #{active_window_index}\""
set-hook -g 'pane-exited'    "run \"if [ \\\$TMUX_LAST_WIN -le #{last_window_index} ] ; then tmux select-window -t \\\$TMUX_LAST_WIN ; else tmux select-window -t #{last_window_index} ; tmux setenv -g TMUX_LAST_WIN #{last_window_index} ; fi\""

# -----------

# move window tabs around
bind-key -T prefix < swap-window -t -1 \; prev
bind-key -T prefix > swap-window -t +1 \; next

# -----------

# NOTE: fixed in nvim as of 04/29/22, PR #18310, commit 2ba539f449a95f38463a61b189e203a5fe306fc0
# nvim doesnt allow <C-c> to be mapped and also interrupt, issue #15258
#bind-key -T root C-c \
#    if-shell -F '#{==:#{=3:pane_title},@v:}' \
#        "if-shell -F '#{!=:#{=5:pane_title},@v:t:}}' \
#            \"send C-c ; run \\\"sleep 0.50\\\" ; display-message \\\"<C-c>\\\" ; send C-_ '\\\\' \" \
#            \"send C-c\"" \
#        "send C-c"

# -----------

bind-key -T prefix c    run "merge_history #{pane_pid}" \; new-window -c "#{pane_current_path}"
bind-key -T prefix C-c  run "merge_history #{pane_pid}" \; new-window -c "#{pane_current_path}"
bind-key -T prefix C-C  run "merge_history #{pane_pid}" \; new-window -c "#{pane_current_path}"

# vert split  - meaning a vert  cut ... (opposite of tmux but same as vi)
bind-key -T prefix '_'  run "merge_history #{pane_pid}" \; split-window -v -c "#{pane_current_path}"
# SPECIAL: prefix C-- in some terminals is mapped to prefix <C-^>-
# and C-- and <C-^>- are both mapped below

# horiz split - meaning a horiz cut ... (opposite of tmux but same as vi)
bind-key -T prefix '|'  run "merge_history #{pane_pid}" \; split-window -h -c "#{pane_current_path}"
bind-key -T prefix C-'\' run "merge_history #{pane_pid}" \; split-window -h -c "#{pane_current_path}"

# use M-S- Left, Right, Up, Down to resize panes (A-S-U/D/L/R or Alt-Shift)

# -----------

# synchronize panes
bind-key -T prefix G set -w synchronize-panes \; display-message -N "synchronize-panes: #{?pane_synchronized,ON,OFF}"

# -----------

#   if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}'
#   (true if any application mouse flag is set, or if the pane is in a mode and it is not copy or view mode)
#   if-shell -Ft= '#{||:#{alternate_on},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}'
#   if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}'

# -----------

# quick help popup for some bindings etc ...
# NOTE: could use \$BATNAME instead of less to get color - but \$BATNAME uses smartless and we need real less ...
bind-key -T prefix H display-popup -s bg=colour236 -x C -h 70% -E "stty -ixon quit 0x0 ; \\cat ${BYOBU_CONFIG_DIR}/help.tmux | \$BATNAME --pager=\"less -iR -K -x4 -c -~ -P:\" --style=plain --paging=always"
bind-key -T prefix g run "pcmd=#{pane_current_command} ; pdir=#{pane_current_path} ; if [ \"\${pcmd####*ssh*}\" ] ; then ginfo=\$(gitinfo \${pdir}) ; else ginfo=\"git:<n/a>\" ; fi ; tmux setenv -g TMUX_GINFO \${ginfo} ; tmux display-popup -s bg=colour236 -x C -h 5 -E \"stty -ixon quit 0x0 ; echo \\\${TMUX_GINFO} | \$BATNAME --pager=\\\"less -iR -K -x4 -c -~ -P:\\\" --style=plain --paging=always\" ; exit 0"

# fzf popup for listing windows/panes and selecting ...

# TODO: MCK - choose better keys than y, u for fzf list-windows, list-panes

# windows in this pane ...
bind-key -T prefix y run "tmux list-panes -F '##{window_index}-##{s/%//:pane_index}-##{pane_title} ##{b:pane_start_command} ##{?pane_active,*, }' | sort -k 3 | fzf-tmux +s --tac -p -x C -y C -w 80% -h 35% > /dev/shm/tmpfzf\$\$ ; if [ -s /dev/shm/tmpfzf\$\$ ] ; then pane=\$(cat /dev/shm/tmpfzf\$\$ | awk -F- '{print \$2}') ; tmux select-pane -t\$pane ; fi ; rm -f /dev/shm/tmpfzf\$\$"

# panes in this session ...
bind-key -T prefix u run "tmux list-windows -F '##{window_index}-##{pane_index}-##{pane_title} ##{b:pane_start_command} ##{?window_active,*, }' | sort -k 3 | fzf-tmux +s --tac -p -x C -y C -w 80% -h 35% > /dev/shm/tmpfzf\$\$ ; if [ -s /dev/shm/tmpfzf\$\$ ] ; then win=\$(cat /dev/shm/tmpfzf\$\$ | awk -F- '{print \$1}') ; tmux select-window -t\$win ; fi ; rm -f /dev/shm/tmpfzf\$\$"

# floating popup shell ...
bind-key -T prefix + display-popup -d '#{pane_current_path}' -x C -y C -s bg=colour236 -w 70% -h 65% -E "tmux new -s popup_shell \$SHELL"

# list-windows not used often ...
unbind-key -T prefix w
unbind-key -T prefix C-w
unbind-key -T prefix C-W
# make it choose-tree instead, with zoom ...
bind-key -T prefix w   choose-tree -Z
bind-key -T prefix C-w choose-tree -Z
bind-key -T prefix C-W choose-tree -Z

# this is a default mapping ...
#bind-key -T prefix \"  choose-tree -w

# NOTE: prefix = is choose-buffer where Enter pastes ...
bind-key -T prefix = run "nb=$(tmux list-buffers) ; if [ -z \"\$nb\" ] ; then tmux display-message -N \"No buffers\" ; else tmux choose-buffer -Z ; fi"
# QUES: cannot seem to use 'd' to delete selected buffer from choose-buffer menu/list, why ?

# TODO: MCK - fzf popup for tmux list-buffers -F '#{buffer_sample}'

# -----------

# for repeat Left/Right
set -g repeat-time 1000

# this is a -s option now ...
set -s escape-time 50

# double/triple click period
#set -g click-time 220

# to clear X highlighting ...
bind-key -T prefix C-l   refresh-client \; display-message -N "refresh-client"
#bind-key -T prefix  C-l  send C-l

#bind-key    -T copy-mode-vi r                         send-keys -X refresh-from-pane
unbind-key -T copy-mode-vi r

# same as orig prefix r but also display message
bind-key -T prefix r   refresh-client \; display-message -N "refresh-client"

# -----------

# nvim BUG: seems this is needed for nvim
bind-key -T root Home \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send Escape \"[H\"" \
        "send Home"
bind-key -T root End \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send Escape \"[F\"" \
        "send End"
# and then we need a work-around in .vimrc for vim
#    if !has("nvim") && &term=~"tmux"
#      exec "set <Home>=\e[H"
#      exec "set <End>=\e[F"
#    endif

# -----------

# if not #{alternate_on} dont send M-<arrow> key
# data to prevent extraneous chars in output
#bind-key -T root C-S-Home \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-S-Home'"

#bind-key -T root C-S-End \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-S-End'"

#bind-key -T root S-Home \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-Home'"

#bind-key -T root S-End \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-End'"

# for most terminals, these are usually for scrolling into alt-screen ...
bind-key -T root S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-PPage'"

bind-key -T root S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys S-NPage'"

# TODO: Should C-Insert be handled in zsh bindings ?
#       this is essentially a no-op ...
#bind-key -T root C-Insert \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-Insert'"

# C-Delete handled in zsh bindings
# S-Delete handled in zsh bindings

# -----------

# map M-x ]  and M-x M-] just like vim/nvim terminal to go into normal/copy-mode
bind-key -T root M-x         switch-client -T LEADMX
bind-key -T LEADMX ] \
    if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send-keys M-x \\\"]\\\"\"" \
        "copy-mode ; send -XN 2 cursor-left"
bind-key -T LEADMX M-] \
    if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send-keys M-x \\\"]\\\"\"" \
        "copy-mode ; send -XN 2 cursor-left"

# NOTE: its ok to have:
# bind-key -T root         M-x switch-client -T LEADMX
# bind-key -T LEADMX       ]   copy-mode
# bind-key -T copy-mode-vi M-x switch-client -T LEADCOPYXM
# bind-key -T LEADCOPYMX   ]   send -X cancel
# and NOT have to handle if in copy-mode in LEADMX table, as in -
# bind-key -T LEADMX       ]   if-shell -Ft= "#{pane_in_mode}" "send -X cancel" "copy-mode"
# it seems root table is searched _after_ copy-mode-vi (*and the tables are unique names)

bind-key -T copy-mode-vi M-x switch-client -T LEADXM
bind-key -T LEADXM ]   send-keys -X cancel
bind-key -T LEADXM M-] send-keys -X cancel
bind-key -T LEADXM m   send-keys -X set-mark
bind-key -T LEADXM g   send-keys -X jump-to-mark

unbind-key -T copy-mode-vi X

bind-key -T LEADXM o \
    if -F "#{selection_present}" \
        "send-keys -X other-end"

# add M-q to leave copy-mode ...
# bind-key -T copy-mode-vi M-q send-keys -X cancel

# -----------

# move around panes

# next ------

# existing mappings:
#bind-key -T prefix C-Space next-window
#bind-key -T prefix Space   next-window
#bind-key -T prefix C-n     next-window
#bind-key -T prefix n       next-window
#bind-key -T prefix M-n     next-window -a

unbind-key -T prefix C-Space
unbind-key -T prefix Space
unbind-key -T prefix C-n
unbind-key -T prefix C-N
unbind-key -T prefix n

# prefix-M-p may be used for copyq popup so unbind M-n as well ...
unbind-key -T prefix M-n

bind-key -T prefix Tab next

# C-Right used in vim for next word
# S-Right used in vim for next tab

#bind-key -r -T prefix Right next
#bind-key -r -T prefix C-Right next

# NOTE: Use Alt-Shift-Right,Left,Up,Down to resize panes
bind-key -T prefix l       select-pane -R
bind-key -T prefix Right   select-pane -R
bind-key -T prefix C-Right select-pane -R

# Super-Right (used by unity/terminator ?)
# M-Right used by tmux to traverse panes - changed above
# unbind byobu mappings for these
# (byobu also sets terminal-overrides)
unbind-key -T root M-Right

# NOTE: used by apps now ...
# used now to nav windows ...
#bind-key -T root M-Right next

# C-M-Right does not seem to work in many terminals

# overloading C-Right is too confusing
#bind-key -T root C-Right \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Right' \
#			'next'"

# if we map C-^ to C-\ in vim we can use C-\ here
#bind-key -T root C-\ next
# But also C-\ is often stty quit ...
# if not #{alternate_on} dont send C-\ key
# data to prevent extraneous chars in output
# NOTE: C-\ used by zsh/bash auto-suggest ...
#bind-key -T root C-\\ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{alternate_on}' \
#            'send-keys C-\\' \
#            ''"

# if not #{alternate_on} dont send C-n key
# data to prevent extraneous chars in output
bind-key -T root C-n \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-n' \
            ''"
bind-key -T root C-N \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-n' \
            ''"

bind-key -T root C-M-BSpace next
# SPECIAL: C-M-BSpace in some terminals is mapped to M-@
bind-key -T root M-@ next

# ccsm uses M-Space as Window menu
#bind-key -T root M-Space next

# zig-zag traversal
#bind-key -T root C-Space run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 2 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 1 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 4 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 2 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# prev ------

# existing mappings:
#bind-key -T prefix C-h     previous-window
#bind-key -T prefix BSpace  previous-window
#bind-key -T prefix C-p     previous-window
#bind-key -T prefix p       previous-window
#bind-key -T prefix M-p     previous-window -a

# unbind these - used for other things below -
unbind-key -T prefix C-h
unbind-key -T prefix C-H
unbind-key -T prefix BSpace
unbind-key -T prefix p
unbind-key -T prefix C-p
unbind-key -T prefix C-P

# prefix-M-p may be used for copyq popup below ...
unbind-key -T prefix M-p

bind-key -T prefix BTab prev

# C-Left used in vim for prev word
# S-Left used in vim for prev tab

#bind-key -r -T prefix Left prev
#bind-key -r -T prefix C-Left prev

# NOTE: Use Alt-Shift-Right,Left,Up,Down to resize panes
bind-key -T prefix h      select-pane -L
bind-key -T prefix Left   select-pane -L
bind-key -T prefix C-Left select-pane -L

# Super-Left (used by unity/terminator ?)
# M-Left used by tmux to traverse panes - changed above
# unbind byobu mappings for these
# (byobu also sets terminal-overrides)
unbind-key -T root M-Left

# NOTE: used by apps now ...
# used now to nav windows ...
#bind-key -T root M-Left prev

# C-M-Left does not seem to work in many terminals

# overloading C-Left is too confusing
#bind-key -T root C-Left \
#	if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#		"if-shell -Ft= '#{alternate_on}' \
#			'send-keys C-Left' \
#			'prev'"

# could also be shell backward-kill-word
#bind-key -T root C-p prev
# if not #{alternate_on} dont send C-p key
# data to prevent extraneous chars in output
bind-key -T root C-p \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-p' \
            ''"
bind-key -T root C-P \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-p' \
            ''"

bind-key -T root C-M-= prev
# SPECIAL: C-M-= in some terminals is mapped to M-#
bind-key -T root C-M-Space prev
# SPECIAL: C-M-Space in some terminals is mapped to M-#
bind-key -T root M-# prev

# zig-zag traversal
#bind-key -T root C-p run "tmux select-window -t $(if [ ! -f /dev/shm/tmux_dir ] ; then echo 5 > /dev/shm/tmux_dir ; fi ; wcnt=$(tmux list-windows | wc -l) ; dir=$(cat /dev/shm/tmux_dir) ; d0=$((\$dir&1)) ; d1=$((\$dir&6)) ; if [ \$d0 -eq 0 ] ; then if [ \$d1 -eq 2 ] ; then d1=4 ; else d1=2 ; fi ; fi ; if [ \$d1 -eq 2 ] ; then if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 5 > /dev/shm/tmux_dir ; if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 1 ; fi ; fi ; else if [ #I -lt \$wcnt ] ; then echo $((#I+1)) ; else echo 3 > /dev/shm/tmux_dir ; if [ #I -gt 1 ] ; then echo $((#I-1)) ; else echo 1 ; fi ; fi ; fi)"

# -----------

bind-key -T prefix a    display-panes -d 4500
bind-key -T prefix C-a  display-panes -d 4500
bind-key -T prefix C-A  display-panes -d 4500

# ===========================================================================

# --- EXTENDED KEYS CSI ---

# ---------------------------------------------------------------------------
# NOTE: using these will only work if *:extkeys terminal-features is enabled
#       (above) and will break vim - unless we send CSI for _all_ ctrl mappings ...
# ---------------------------------------------------------------------------

# SPECIAL: For vim to see M-y input as a single key instead of \033y ...
# M-y with altSendsEscape false is: 0x4200b9c3 (\303\271) (ù) (U+f9)
# M-y with modifyOtherKeys=2 is: 0x8100000000079 or CSI:
#   [27;c;xxx~ where c is 2,3,4,5,6,7,8 for S,A,A-S,C,C-S,C-A,C-A-S and xxx is dec key code

# ----------------------------------------------

# these not mapped below, send codes for zshrc/vim/less/etc. ...

# ctrl+bracketright       send_text all \x1d
bind-key -T root C-] send C-]

# ctrl+shift+bracketright send_text all \x1f\x5d
#bind-key -T root C-S-] send C-_ "]"
# C-S-] actually works out to S-C-] which is also S-Escape ...
unbind-key -T root S-Escape
#  C-'}' key seems to not be recognized
#bind-key -T root C-'}' send C-_ "]"

# ctrl+alt+bracketright   no-op
unbind-key -T root C-M-]
#unbind-key -T copy-mode-vi C-M-]
bind-key -T copy-mode-vi C-M-] send V

# ctrl+shift+bracketleft  send_text all \x1f\x5b
bind-key -T root C-S-[ send C-_ "["
#  C-'{' key seems to not be recognized
#bind-key -T root C-'{' send C-_ "["

# ctrl+alt+bracketleft    no-op
unbind-key -T root C-M-[
unbind-key -T copy-mode-vi C-M-[

# ctrl+shift+space        send_text all \x1f\x20
bind-key -T root C-S-Space send C-_ Space

# ctrl+alt+backslash      no-op
#unbind-key -T root C-M-'\'
#unbind-key -T copy-mode-vi C-M-'\'
bind-key -T root         C-M-'\' \
    if-shell -Ft= "#{||:#{alternate_on},#{mouse_any_flag}}" \
        "copy-mode" \
        "copy-mode ; send -XN 2 cursor-left"
bind-key -T copy-mode-vi C-M-'\' \
    send -X cancel

# ctrl+shift+slash        send_text all \x1f\x2f
bind-key -T root C-S-'/' send C-_ "/"
# is this also C-'?' ?  Or is that del/bs ??

# ctrl+equal              no-op
unbind-key -T root C-=
unbind-key -T copy-mode-vi C-=

# ctrl+alt+minus          no-op
unbind-key -T root C-M-'-'
unbind-key -T copy-mode-vi C-M-'-'

# these mapped below ...
# shift+backspace         send_text all \x1e\x08
# ctrl+backspace          send_text all \x1e\x7f
# ctrl+shift+backspace    send_text all \x1f\x7f
# ctrl+alt+backspace      send_text all \x1b\x40
# ctrl+shift+backslash    send_text all \x1f\x5c
# shift+space             send_text all \x1e\x20
# ctrl+alt+space          send_text all \x1b\x23
# ctrl+shift+x            send_text all \x1b\x78
# ctrl+alt+equal          send_text all \x1b\x23
# ctrl+minus              send_text all \x1e\x2d
# ctrl+alt+enter          send_text all \x1e\x0d

# ----------------------------------------------

# vim mapped to not search next ...
#bind-key -T root M-n \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;110~\\\"\" \
#            \"send M-n\""
#
## vim mapped to not paste ...
#bind-key -T root M-p \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;112~\\\"\" \
#            \"send M-p\""
#
## vim mapped for horizontal scrolling ...
#bind-key -T root M-l \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;108~\\\"\" \
#            \"send M-l\""
#
#bind-key -T root M-h \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;104~\\\"\" \
#            \"send M-h\""
#
#bind-key -T root M-. \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;46~\\\"\" \
#            \"send M-.\""
#
#bind-key -T root M-, \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;44~\\\"\" \
#            \"send M-,\""
#
#bind-key -T root M-J \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;74~\\\"\" \
#            \"send M-J\""
#
#bind-key -T root M-S-j \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;74~\\\"\" \
#            \"send M-J\""
#
#bind-key -T root M-K \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;75~\\\"\" \
#            \"send M-K\""
#
#bind-key -T root M-S-k \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;75~\\\"\" \
#            \"send M-K\""
#
#bind-key -T root C-j \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;106~\\\"\" \
#            \"send C-j\""
#
#bind-key -T root C-S-j \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;106~\\\"\" \
#            \"send C-S-j\""
#
#bind-key -T root C-k \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;107~\\\"\" \
#            \"send C-k\""
#
#bind-key -T root C-S-k \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;107~\\\"\" \
#            \"send C-S-k\""

#bind-key -T root C-] \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;93~\\\"\" \
#            \"send C-]\""

# C-S-] mapped by terminal to C-_ "]"
# C-M-] mapped by terminal to no-op

#bind-key -T root C-'\' \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;92~\\\"\" \
#            \"send C-\\\""
#
#bind-key -T root C-w \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;119~\\\"\" \
#            \"send C-w\""
#
#bind-key -T root C-S-w \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;119~\\\"\" \
#            \"send C-S-w\""
#
#bind-key -T root C-^ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;30~\\\"\" \
#            \"send C-^\""
#
#bind-key -T root C-_ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;5;31~\\\"\" \
#            \"send C-_\""

# ----

# these are ok b/c they do not send CSI codes (ESC [ ... or \x9b ...)

bind-key -T root C-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send Enter\" \
            \"send C-Enter\""
#           \"send Escape \\\"[27;5;13~\\\"\" \

bind-key -T root C-S-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send Enter\" \
            \"send C-S-Enter\""
#           \"send Escape \\\"[27;6;13~\\\"\" \

bind-key -T root M-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send M-Enter\" \
            \"send M-Enter\""
#           \"send Escape \\\"[27;3;13~\\\"\" \

bind-key -T root M-S-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send M-Enter\" \
            \"send M-S-Enter\""
#           \"send Escape \\\"[27;4;13~\\\"\" \

bind-key -T root S-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send Enter\" \
            \"send S-Enter\""
#           \"send Escape \\\"[27;2;13~\\\"\" \

# bind-key -T root S-Enter \
#     send-keys Escape "[13;2u"

# (where 2 is 2-7 based on the usual modifiers)

# C-M-Enter mapped below ...
# SPECIAL: C-M-Enter in some terminals is mapped to <C-^><Enter>

# --- EXTENDED KEYS CSI ---

# ===========================================================================

# SPECIAL: VIM: another method - send <C-^> + char ...

# NOTE: need to remap these in vim terminal (tnoremap ...)
#       as even if in normal mode the terminal title is @:t ...

bind-key -T root M-n \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"n\\\"\" \
            \"send M-n\""

bind-key -T root M-N \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"N\\\"\" \
            \"send M-N\""

# vim mapped to not paste ...
bind-key -T root M-p \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"p\\\"\" \
            \"send M-p\""

bind-key -T root M-P \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"P\\\"\" \
            \"send M-P\""

# vim mapped for horizontal scrolling ...
bind-key -T root M-l \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"l\\\"\" \
            \"send M-l\""

# NOTE: \eH and \eL are NOT mapped for vim ...
bind-key -T root M-L \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"L\\\"\" \
            \"send M-L\""

bind-key -T root M-h \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"h\\\"\" \
            \"send M-h\""

# NOTE: \eH and \eL are NOT mapped for vim ...
bind-key -T root M-H \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"H\\\"\" \
            \"send M-H\""

bind-key -T root M-. \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\".\\\"\" \
            \"send M-.\""

bind-key -T root M-< \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\"<\\\"\" \
            \"send M-<\""

bind-key -T root M-, \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\",\\\"\" \
            \"send M-,\""

bind-key -T root M-> \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ \\\">\\\"\" \
            \"send M->\""

# NOTE: M-Tab is application spreader/picker in Windows (and possibly gnome)
# and now C-^ Tab is used for C-i above ...

#bind-key -T root M-Tab \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send C-^ Tab\" \
#            \"send M-Tab\""
#
#bind-key -T root M-S-Tab \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send C-^ BTab\" \
#            \"send M-BTab\""
#
#bind-key -T root M-BTab \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send C-^ BTab\" \
#            \"send M-BTab\""

# -----------

# shifted ...
# M-+ ... (M-0x2b)
# M-_ ... (M-0x5f) -> used below for prefix C-t - zsh bound to fzf files
# M-" ... (M-0x22) -> used below for prefix C-r - zsh bound to fzf history
# not shifted ...
# M-; ... (M-0x3b)
# M-= ... (M-0x3d)
# M-- ... (M-0x2d) -> vim terminal BUG, used to send this for C-@ (C-Space) when in special vim terminal - may be fixed now with tnoremap, see NOTE
# these above all seem benign in vim ...

# NOTE: M-$, M-^ are also available but may affect vim ...

# M-( and M-)
# M-& and M-*

# M-{ ... (M-0x7b) -> zsh send enter if cmdline not empty ...
# M-} ... -> zsh ignore

# NOTE: C-/ is really C-_
#       but C-_ is used as a combo for some other C-S- keys
# NOTE: zsh binds \e" to fzf shell history ...
#       use prefix C-r to be like shell C-r ...
#       should we just zsh bind ^s^r to my-fzf-history-widget() ?
#bind-key -T prefix C-_ send M-\"

bind-key -T prefix C-r \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "send-keys M-\\\""
bind-key -T prefix C-R \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "send-keys M-\\\""

# -----------

#bind-key -T copy-mode-vi C-BSpace send-keys -X cursor-up
bind-key -T copy-mode-vi C-BSpace if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"
# SPECIAL: C-BSpace in some terminals is mapped to <C-^><BSpace>
bind-key -T copy-mode-vi C-^ switch-client -T LEADERA
#bind-key -T LEADERA BSpace send-keys -X cursor-up
bind-key -T LEADERA BSpace        if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"

bind-key -T copy-mode-vi S-BSpace send-keys -X scroll-up
bind-key -T copy-mode-vi S-Space  send-keys -X scroll-down
# SPECIAL: S-BSpace in some terminals is mapped to <C-^><C-h>
# SPECIAL: S-Space in some terminals is mapped to <C-^><Space>
bind-key -T LEADERA C-h    send-keys -X scroll-up
bind-key -T LEADERA C-H    send-keys -X scroll-up
bind-key -T LEADERA Space  send-keys -X scroll-down

bind-key -T copy-mode-vi C-M-Enter send-keys -X cursor-up
# SPECIAL: some terminals map C-M-Enter to <C-^><Enter>
# TODO: Could be the same as M-Enter ...
#bind-key -T LEADERA Enter send-keys C-c
bind-key -T LEADERA Enter send-keys -X cursor-up

# should Return/Enter copy and cancel ?
#orig: bind-key   -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
# same as y(ank) or C-c
#bind-key -T copy-mode-vi Enter send-keys C-c
#unbind-key -T copy-mode-vi Enter
# NOTE: to match vim ...
bind-key -T copy-mode-vi Enter send-keys -X cursor-down
# exit copy-mode if at bottom and no selection ?
#bind-key -T copy-mode-vi Enter \
#    if -F "#{selection_present}" \
#        "send-keys -X cursor-down" \
#        "send-keys -X cursor-down-and-cancel"

#bind-key -T copy-mode-vi Enter send-keys C-c

# TODO: C-Enter does not work in some terminals ...
#       and so acts like Enter ...
#bind-key -T copy-mode-vi C-Enter send-keys C-c
bind-key -T copy-mode-vi C-Enter send-keys -X cursor-down
#bind-key -T copy-mode-vi C-Enter send-keys -X cursor-down-and-cancel

# NOTE: like vim, <A-CR> to yank and quit copy-mode ...
#bind-key -T copy-mode-vi M-Enter send-keys C-c
bind-key -T copy-mode-vi M-Enter send-keys -X cursor-up

bind-key -T copy-mode-vi M-S-Enter send-keys -X cursor-up

bind-key -T copy-mode-vi S-Enter send-keys -X cursor-down

# <C-Space> is usually <C-@>
#bind-key -T copy-mode-vi C-Space send -X cursor-down
bind-key -T copy-mode-vi C-Space if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"

# NOTE: MCK - to be like less ? ...

# default is for Space to begin-selection
#unbind-key -T copy-mode-vi Space
# map Space to clear selection ???
#bind-key   -T copy-mode-vi Space send-keys -X clear-selection
# NOTE: to match vim ...
#bind-key -T copy-mode-vi Space send-keys Right

# bind-key -T copy-mode-vi u      send -X halfpage-up
# bind-key -T copy-mode-vi d      send -X halfpage-down

#bind-key -T copy-mode-vi BSpace send -X halfpage-up
bind-key -T copy-mode-vi BSpace if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"

#bind-key -T copy-mode-vi Space  send -X halfpage-down
bind-key -T copy-mode-vi Space  if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"

# ---------------

#bind-key -T copy-mode-vi M-BSpace send-keys -X scroll-up
#bind-key -T copy-mode-vi M-Space  send-keys -X scroll-down

#bind-key -T root M-BSpace \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send M-X\" \
#            \"send M-BSpace\""

#bind-key -T root M-Space \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send M-Y\" \
#            \"send M-Space\""

# these are sometimes window menu ...
bind-key -T copy-mode-vi M-Space    ''
bind-key -T root         M-Space    ''

# Zutty would send M-BSpace for C-M-BSpace when modifyOtherKeys<2 ...
# and other terminals might be configured to not send anything ...
bind-key -T copy-mode-vi M-BSpace   next
bind-key -T root         M-BSpace   next

# NOTE: M-BSpace in some terminals mapped to none
# NOTE: M-Space  in some terminals mapped to none
# may used by OS for window menu ...

# NOTE: M-S-BSpace in some terminals mapped to none
# NOTE: M-S-Space  in some terminals mapped to none

# map pure keys as well ...
#bind-key -T copy-mode-vi M-S-BSpace send-keys -XN 10 scroll-up
#bind-key -T copy-mode-vi M-S-Space  send-keys -XN 10 scroll-down

# these are sometimes window menu ...
bind-key -T copy-mode-vi M-S-Space    ''
bind-key -T root         M-S-Space    ''
bind-key -T copy-mode-vi M-S-BSpace   ''
bind-key -T root         M-S-BSpace   ''

# -----------

# NOTE: need to send these special sequences for less/tig/vim/etc

bind-key -T root S-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ C-h\" \
            \"send BSpace\""
# SPECIAL: S-BSpace in some terminals is mapped to <C-^><C-h>
bind-key -T root C-^ switch-client -T LEADER8
bind-key -T LEADER8 C-h \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ C-h\" \
            \"send BSpace\""
bind-key -T LEADER8 C-H \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ C-h\" \
            \"send BSpace\""

bind-key -T root S-Space \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ Space\" \
            \"send Space\""
# SPECIAL: S-Space in some terminals is mapped to <C-^><Space>
bind-key -T LEADER8 Space \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ Space\" \
            \"send Space\""

bind-key -T root C-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ BSpace\" \
            \"send BSpace\""

# SPECIAL: C-BSpace in some terminals is mapped to <C-^><BSpace>
bind-key -T LEADER8 BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ BSpace\" \
            \"send BSpace\""

bind-key -T root C-M-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ Enter\" \
            \"send Enter\""
# SPECIAL: C-M-Enter in some terminals is mapped to <C-^><Enter>
bind-key -T LEADER8 Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ Enter\" \
            \"send Enter\""

bind-key -T root C-'-' \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ -\" \
            \"send -\""
# SPECIAL: C-- in some terminals is mapped to <C-^>-
bind-key -T LEADER8 '-' \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-^ -\" \
            \"send -\""

#bind-key -T LEADER8 \\ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
#            \"send Escape \\\"[27;3;76~\\\"\" \
#            \"send C-M-\\\""

# C-^ Tab used to be for vim M-Tab ...
# but now some terminals might send C-^ Tab for C-i ...
# CSI (Control Sequence Introducer) is \x1b[ or \x9b ...
# tmux can send this to vi and Tab to everything else
bind-key -T LEADER8 Tab \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{==:#{=3:pane_title},@v:}' \
            \"send C-^ Tab\" \
            \"send Tab\""

#           \"send Escape \\\"[27;5;105~\\\"\" \
#           or \x1b[105;5u or \x9b105;5u or ?

# -----------

# an example (like with fzf history) where a zsh binding is used instead of
# a tmux binding - to get into copy-mode from shell and not when inside an app ...
# tmuxup(){ tmux copy-mode -u }
# zle -N tmuxup
# bindkey '^[v' tmuxup

# -----------

# NOTE: to select next window ...
# prefix n,p are for next,previous windows ...
# prefix w is for list-windows
# could make this prefix C-w but s->w is not easy to type
# these are silimar to vim C-w mappings ...
#bind-key -T prefix BSpace select-pane -t+
#bind-key -T prefix C-BSpace select-pane -t+
#bind-key -T prefix C-^ switch-client -T LEADERC
#bind-key -T LEADERC BSpace select-pane -t+

#bind-key -T prefix Space select-pane -t-
#bind-key -T prefix C-Space select-pane -t-

bind-key -T prefix C-s select-pane -t+
bind-key -T prefix C-S select-pane -t+
bind-key -T prefix s   select-pane -t-

# NOTE: prefix N/P used for j/k down/up ...
bind-key -T prefix n   select-pane -t+
bind-key -T prefix C-n select-pane -t+
bind-key -T prefix C-N select-pane -t+
bind-key -T prefix p   select-pane -t-
bind-key -T prefix C-p select-pane -t-
bind-key -T prefix C-P select-pane -t-

bind-key -T prefix BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys BSpace' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix C-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"
bind-key -T prefix C-^ switch-client -T LEADERC
# SPECIAL: prefix C-BSpace in some terminals is mapped to prefix <C-^><BSpace>
bind-key -T LEADERC BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix S-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"
# SPECIAL: prefix S-BSpace in some terminals is mapped to prefix <C-^><C-h>
bind-key -T LEADERC C-h \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"
bind-key -T LEADERC C-H \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix C-M-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"
# SPECIAL: prefix C-M-Enter in some terminals is mapped to prefix <C-^><Enter>
bind-key -T LEADERC Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# vert split (2)
# other forms of this such as prefix _ or | or C-\ are mapped above
bind-key -T prefix C-'-' \
    run "merge_history #{pane_pid}" \; split-window -v -c "#{pane_current_path}"
# SPECIAL: prefix C-- in some terminals is mapped to prefix <C-^>-
bind-key -T LEADERC '-' \
    run "merge_history #{pane_pid}" \; split-window -v -c "#{pane_current_path}"

#bind-key -T prefix C-Space \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
#            'send-keys -X cursor-down' \
#            'send-keys Space'"

bind-key -T prefix Space \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys Space' \
            'send-keys Space'"

# so that prefix <Leader>` enters copy-mode, like all the others ...
bind-key -T prefix '\' switch-client -T LEADER7
bind-key -T LEADER7 ` \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X halfpage-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# -----------

# foot: BUG: C-S-BS does not seem to work, it is same as C-BS ...
#       so we force in foot cfg C-S-Space to be C-Space ...
# if we knew we were in foot terminal we could bind C-S-Space to C-Space

# zutty: C-S-BS and C-BS are not mappable with modifyOtherKeys<2, they are both BS ...
#        and same for C-S-Space, it is C-Space ...
#        so there is an inconsistency, we have Space, C-Space, BS, but not C-BS ...

#bind-key -T copy-mode-vi C-S-BSpace send-keys -XN 10 scroll-up
bind-key -T copy-mode-vi C-S-BSpace send-keys -X cursor-up

# NOTE: BUG: C-S-Space binding does not seem to take ?
#bind-key -T copy-mode-vi C-S-Space  send-keys -XN 10 scroll-down
bind-key -T copy-mode-vi C-S-Space  send-keys -X cursor-down
# NOTE: BUG: ---------------------------------------

# SPECIAL: C-S-BSpace in some terminals is mapped to <C-_><BSspace>
# SPECIAL: C-S-Space  in some terminals is mapped to <C-_><Space>
bind-key -T copy-mode-vi C-_ switch-client -T LEADERB
#bind-key -T LEADERB BSpace send-keys -XN 10 scroll-up
#bind-key -T LEADERB Space  send-keys -XN 10 scroll-down
bind-key -T LEADERB BSpace send-keys -X cursor-up
bind-key -T LEADERB Space  send-keys -X cursor-down

# handy if we just typed C-S-k and now type C-S-] ... (there is also C-M-])
bind-key -T LEADERB ]  send-keys V

bind-key -T copy-mode-vi C-M-k  send -XN 5 scroll-up
bind-key -T copy-mode-vi C-M-K  send -XN 5 scroll-up
bind-key -T copy-mode-vi C-M-j  send -XN 5 scroll-down
bind-key -T copy-mode-vi C-M-J  send -XN 5 scroll-down

# SPECIAL: C-M-k,j in some terminals is mapped to <C-_>k,j
#bind-key -T LEADERB k      send-keys -XN 5 scroll-up
#bind-key -T LEADERB j      send-keys -XN 5 scroll-down

# SPECIAL: some terminals might map C-S-j to <C-_>J ...
bind-key -T LEADERB J      send-keys -XN 10 cursor-down
# SPECIAL: some terminals might map C-S-k to <C-_>K ...
bind-key -T LEADERB K      send-keys -XN 10 cursor-up

# NOTE: C-S-x to <C-_>X ?  Also see below comment about M-( and <C-_><C-x>

# unbind-key -T root C-S-'\'
# is this also C-'|' ?

# C-S-\ (C-|) (may be mapped to C-_\ in some terminals) to leave cope-mode
bind-key -T LEADERB '\'          send-keys -X cancel
bind-key -T copy-mode-vi C-S-'\' send-keys -X cancel
#bind-key -T copy-mode-vi C-'|'   send-keys -X cancel

bind-key -T root C-M-k \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-M-k\" \
            \"send C-M-k\""
bind-key -T root C-M-K \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-M-k\" \
            \"send C-M-k\""

# use ^O instead of ^J (or ^M or \n or \r)
bind-key -T root C-M-j \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-M-o\" \
            \"send C-M-j\""
bind-key -T root C-M-J \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-M-o\" \
            \"send C-M-j\""

# TODO: we do not map <C-_>* in root mode to anything
#       *BUT* we do map <C-_><BSpace> and <C-_><K> in prefix mode below ...
#       we expect vim/tig/less/etc to each handle these mappings ...
#       we hope zsh bindings use these all or keep cmdline clean
#       NOTE: we do however map the 5 <C-^>* keys ...

# prefix k was for select-pane -U, but that was changed to prefix P
# so we could use k here ... (and prefix j was select-pane -D but that is now prefix N)
# prefix C-k/C-S-k (<C-_>K) ?

bind-key -T prefix k \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix C-k \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# SPECIAL: C-S-BSpace in some terminals is mapped to <C-_><BSspace>
bind-key -T root C-S-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send C-_ BSpace\" \
            \"send BSpace\""

# MCK - could map C-M-Enter to enter/leave copy-mode ...

# NOTE: C-_/ is zsh bound to send-break if cmdline not empty ...

# prefix C-_-BSpace or M-BSpace to enter copy-mode ...

bind-key -T prefix C-S-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# SPECIAL: C-S-BSpace in some terminals is mapped to <C-_><BSspace>
bind-key -T prefix C-_ switch-client -T LEADERU
bind-key -T LEADERU BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# SPECIAL: C-S-k in some terminals is mapped to <C-_>K
bind-key -T LEADERU K \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; send -XN 5 cursor-up\"'"

bind-key -T prefix M-BSpace \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix M-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix M-k \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix M-K \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 cursor-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T prefix C-M-k \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"
bind-key -T prefix C-M-K \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# -----------

# BUG: vim terminal - cannot get C-Space (C-@) when inside a vim terminal - may be fixed now with tnoremap (see below)
#      title in both is: @v: and for terminal in nvim its: @v:t- and for terminal in vim its: @v:t:
#      any vim (including in terminal):
#        if-shell -F '#{==:#{=3:pane_title},@v:}' \
#      any vim in a terminal:
#        if-shell -F '#{==:#{=4:pane_title},@v:t}}' \
#      any vim, but not in terminal:
#        if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=4:pane_title},@v:t}}' \
#      vim in terminal:
#        if-shell -F '#{==:#{=5:pane_title},@v:t:}}' \
#      nvim in terminal:
#        if-shell -F '#{==:#{=5:pane_title},@v:t-}}' \
#
# custom for vim terminal -
#bind-key -T root C-Space \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{==:#{=5:pane_title},@v:t:}}' \
#            \"send M--\" \
#            \"send C-Space\""
#
# NOTE: this seems to produce the correct key code in vim ...
# if !has("nvim")
#     tnoremap <C-@> <C-Space>
# endif

# -----------

# NOTE: M-Up/Down/Right/Left used in apps now, not in tmux ...

# unbind byobu and tmux mappings for these ...
# tmux default for M-Up was previous session
# (byobu also sets terminal-overrides)

unbind-key -T root M-Up
unbind-key -T root M-Down

# NOTE: M-Left,Right used above for pane nav ...

# if not #{alternate_on} dont send M-<arrow> key
# data to prevent extraneous chars in output
# TODO: do we need to send as an Esc-sequence ?
# these are handled in .zshrc now ...
#bind-key -T root M-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys M-Up'"

#bind-key -T root M-Down \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys M-Down'"

# NOTE: M-Up   available ...
# NOTE: M-Down available ...

# NOTE: M-Up/Down/Right/Left used in apps now, not in tmux ...

# NOTE: MCK - M-Up, Down to switch panes in a window ...
#bind-key -T root M-Up   select-pane -t+
#bind-key -T root M-Down select-pane -t-

#bind-key -T root M-Right \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys M-Right'"

#bind-key -T root M-Left \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys M-Left'"

bind-key -T copy-mode-vi M-Up \
    send-keys -X cursor-up

bind-key -T copy-mode-vi M-Down \
    send-keys -X cursor-down

bind-key -T copy-mode-vi M-Right \
    send-keys -X cursor-right

bind-key -T copy-mode-vi M-Left \
    send-keys -X cursor-left

# -----------

bind-key -r -T root M-S-Up \
    resize-pane -U
bind-key -r -T root M-S-Down \
    resize-pane -D
bind-key -r -T root M-S-Right \
    resize-pane -R
bind-key -r -T root M-S-Left \
    resize-pane -L

bind-key -r -T copy-mode-vi M-S-Up \
    resize-pane -U
bind-key -r -T copy-mode-vi M-S-Down \
    resize-pane -D
bind-key -r -T copy-mode-vi M-S-Right \
    resize-pane -R
bind-key -r -T copy-mode-vi M-S-Left \
    resize-pane -L

# -----------

# NOTE: S-Left, Right used to display-panes, so unbind here

unbind-key -T root S-Up
unbind-key -T root S-Down
unbind-key -T root S-Left
unbind-key -T root S-Right

# NOTE: S-Left, Right now used by vim for tab nav ...

# NOTE: S-Up   may be available ...
# NOTE: S-Down may be available ...

# if not #{alternate_on} dont send S-U,D,L,R key
# data to prevent extraneous chars in output
#bind-key -T root S-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-Up'"

#bind-key -T root S-Down \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-Down'"

#bind-key -T root S-Left \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-Left'"

#bind-key -T root S-Right \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys S-Right'"

bind-key -T copy-mode-vi S-Up \
    send-keys -X cursor-up

bind-key -T copy-mode-vi S-Down \
    send-keys -X cursor-down

bind-key -T copy-mode-vi S-Right \
    send-keys -X cursor-right

bind-key -T copy-mode-vi S-Left \
    send-keys -X cursor-left

# NOTE: Use Alt-Shift-Right,Left,Up,Down to resize panes
# changed from k to P so we could use prefix k getting into copy-mode-vi like C-k, M-k, C-S-k, etc.
bind-key -T prefix P      select-pane -U
#bind-key -T prefix k      select-pane -U

bind-key -T prefix Up     select-pane -U
bind-key -T prefix C-Up   select-pane -U

# changed from j to N to match k pattern above ...
bind-key -T prefix N      select-pane -D
#bind-key -T prefix j      select-pane -D

bind-key -T prefix Down   select-pane -D
bind-key -T prefix C-Down select-pane -D

# prefix Left, Right defined above
# prefix C-Left, C-Right defined above

# NOTE: do we need this ?  prefix M-Enter does the same thing ...
#bind-key -T prefix M-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
#            'send M-Up' \
#            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
#                \"copy-mode\" \
#                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -r -T prefix  M-Up      resize-pane -U 5
bind-key -r -T prefix  M-Down    resize-pane -D 5
bind-key -r -T prefix  M-Left    resize-pane -L 5
bind-key -r -T prefix  M-Right   resize-pane -R 5

bind-key -r -T prefix  S-Up      refresh-client -U 10
bind-key -r -T prefix  S-Down    refresh-client -D 10
bind-key -r -T prefix  S-Left    refresh-client -L 10
bind-key -r -T prefix  S-Right   refresh-client -R 10

# -----------

# NOTE: seems we need to explicitly send this key ...
# NOTE: used above for copyq toggle ...
#bind-key -T root M-Insert send M-Insert

# pop up copyq clipboard ...
# NOTE: used to be M-p ...
# use M-Insert because we can map that in the app to toggle as well ...
# (NOTE: we may not get this if it is mapped at the Qt level via copyq)
#bind-key -T root M-Insert run -b "if [ -z \"$WSL_DISTRO_NAME\" -a -z \"$WSLENV\" ] ; then cq=$(pgrep copyq) ; if [ -z \"\$cq\" -a -z \"$SSH_CLIENT\" ] ; then setsid -f copyq --start-server hide >/dev/null 2>/dev/null ; sleep 0.800 ; fi ; if [ -z \"$SSH_CLIENT\" ] ; then copyq >/dev/null 2>/dev/null toggle ; fi ; fi"
# TODO: if not ssh, now (and periodically) check if copyq is running and if not, start it up ...

# copyq started from .config/autostart now and that has mappings for Alt-Ins, Super-Ins to toggle ...
bind-key -T root         M-Insert run -b "copyq toggle > /dev/null 2>&1"
bind-key -T copy-mode-vi M-Insert run -b "copyq toggle > /dev/null 2>&1"

# M-Delete probably already mapped in shell or copyq app, but will work in copy-mode if copyq is not active ...

# if not #{alternate_on} dont send key
# M-Home, M-End
# data to prevent extraneous chars in output

# ----------------------------------------------------
# TODO: do we want to handle these in .zshrc or here ?
# M-Home
bind-key -T root M-Home \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-Home'"
# M-End
bind-key -T root M-End \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-End'"

# if not #{alternate_on} dont send key
# M-S-Insert, M-S-Delete, M-S-Home, M-S-End, M-S-PPage, M-S-NPage
# data to prevent extraneous chars in output
# M-S-Insert
bind-key -T root M-S-Insert \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-Insert'"
# M-S-Delete
# M-S-Delete may be bound in zsh to kill-all-backwards ...
#bind-key -T root M-S-Delete \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys M-S-Delete'"
# M-S-Home
bind-key -T root M-S-Home \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-Home'"
# M-S-End
bind-key -T root M-S-End \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-End'"

# M-S-PPage
bind-key -T root M-S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-PPage'"
# M-S-NPage
bind-key -T root M-S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-S-NPage'"

# if not #{alternate_on} dont send key
# C-M-Insert, C-M-Delete, C-M-Home, C-M-End, C-M-PPage, C-M-NPage
# data to prevent extraneous chars in output

# C-M-Insert
bind-key -T root C-M-Insert \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-M-Insert'"
# C-M-Delete
# NOTE: this can also be gnome logout (and stop copyq) ...
#bind-key -T root C-M-Delete \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-M-Delete'"
# C-M-Home
#bind-key -T root C-M-Home \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-M-Home'"
# C-M-End
#bind-key -T root C-M-End \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-M-End'"
# TODO: do we want to handle these in .zshrc or here ?
# ----------------------------------------------------

bind-key -T copy-mode-vi C-M-PPage \
    run -C "send -XN #{e|/|:#{pane_height},2} scroll-up"

bind-key -T copy-mode-vi C-M-NPage \
    run -C "send -XN #{e|/|:#{pane_height},2} scroll-down-and-cancel"

bind-key -T root C-M-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-PPage' \
            'copy-mode ; send -XN 2 cursor-left ; run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"'"

bind-key -T root C-M-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-NPage'"

# -----------

# copy-mode

# Enter copy-mode with 'prefix-[' (also prefix-Esc)
# when entering copy-mode, clear primary clipboard
# so mouse paste from window mgr does send any data
#bind-key -T prefix [ \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'copy-mode' \
#            'copy-mode ; send -XN 2 cursor-left'"
# dont add C-[ as that is also Esc

unbind-key -T prefix [

# ']' was originally set to paste-buffer
# but its nice to also go into copy-mode
bind-key -T prefix ] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -X cancel' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# same but shifted ] which is }
bind-key -T prefix '}' \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -X cancel' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# also add C-] as that is easily pressed
bind-key -T prefix C-] \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -X cancel' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# also add prefix Enter ...
bind-key -T prefix Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send C-c' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# and prefix C-Enter ...
bind-key -T prefix C-Enter \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send C-c' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

bind-key -T root C-M-'\' \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -X cancel' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left\"'"

# if not #{alternate_on} dont send C-] key
# data to prevent extraneous chars in output
# NOTE: skip this if want zsh bindkey forward-char/auto-suggestion ...
#bind-key -T root C-] \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-]' \
#            ''"

# if not #{alternate_on} dont send C-o key
# data to prevent extraneous chars in output
bind-key -T root C-o \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-o' \
            ''"
bind-key -T root C-O \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-o' \
            ''"

# z/C-z is for pane zoom
# use shell C-t to get fzf without popup
# NOTE: zsh binds \e_ to fzf files ...
bind-key -T prefix C-t \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "run \"cd #{pane_current_path} ; tmux send-keys M-_\""
bind-key -T prefix C-T \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "run \"cd #{pane_current_path} ; tmux send-keys M-_\""

#           \"popup -d '#{pane_current_path}' -x C -y C -w 80% -h 65% -E \\\"fzf > /dev/shm/tmpfzf\$\$ ; if [ -s /dev/shm/tmpfzf\$\$ ] ; then tmux load-buffer /dev/shm/tmpfzf\$\$ ; tmux paste-buffer -s ' ' -d ; fi ; rm -f /dev/shm/tmpfzf\$\$\\\"\""

# NOTE: fzf for shell history done via zsh as a new bash here wont have zsh history ...

# =================================================

# NOTE: rule for embedded quotes is 2x+1 so: 1, 3, 7, 15, 31 ...

# global add space toggle (look into set-environment, update-environment)
# NOTE: coordinate any changes here with $BYOBU_CONFIG_DIR/bin/5_addspc
# if pane_current_command contains *ssh* then set ginfo to n/a ...
bind-key -T root C-F12 run "pcmd=\"#{pane_current_command}\" ; if [ \"\${pcmd####*ssh*}\" ] ; then ginfo=\$(gitinfo #{pane_current_path}); else ginfo=\"git:<n/a>\" ; fi ; if [ ! -s /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \$add -eq 1 ] ; then echo 0 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\#333333]- \$ginfo#[default]#[fg=\\#EEEEEE]#[bg=\\#333333] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: OFF\" ; else echo 1 > /dev/shm/tmux#{session_name}.spc ; echo \"#[default]#[fg=colour13,bold,bg=\\#333333]+ \$ginfo#[default]#[fg=\\#EEEEEE]#[bg=\\#333333] \" > $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc ; tmux display-message \"Add Space: ON \" ; fi ; tr -d '\n' < $BYOBU_RUN_DIR/cache.tmux/custom.5_addspc > $BYOBU_RUN_DIR/status.tmux/custom" \; refresh-client -S \; refresh-client -S

# NOTE: TMUX_VI_MODE manually tell tmux we are in vi ...
#bind-key -T root C-F11 run "vmd=\$(tmux show-environment -g TMUX_VI_MODE 2>/dev/null | awk -F= '{print \$2}') ; if [ \"\$vmd\" != \"1\" ] ; then tmux set-environment -g TMUX_VI_MODE 1 ; tmux display-message -N \"vi mode: ON\" ; else tmux set-environment -g TMUX_VI_MODE 0 ; tmux display-message -N \"vi mode: OFF\" ; fi"

# =================================================

# do we want to add space (based on config) to clipboard if we cancel copy-mode ?
# (y)ank does not add space, (Y)ank does add space
# dragging mouse for selection does not, Esc to cancel does not
# DoubleClick and Ctrl-Click and Alt-Click add space to clipboard
# \ws, C-s-v, S-Insert, M-Insert add space

# NOTE: if bracketed-paste in shell is not enabled then could use paste-buffer -s ' ' instead of -p ...
# TODO: could have a toggle for this

# put selection into tmux buffer, then paste from that ...
# bind-key C-p run "tmux set-buffer \"$(xclip -o -selection clipboard)\"; tmux paste-buffer")

# in copy-mode, if selection then cancel and paste; else cancel, paste from clipboard
# in root mode, if alternate do nothing (TODO: or perhaps send C-s v); else paste from clipboard
# TODO: in root mode, if alternate - enter copy-mode
# C-s v
bind-key -T prefix v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send v' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; send -X rectangle-off ; send v\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -XN 2 cursor-left ; send v\" ' "

# C-s V (same as C-s v above but send V)
bind-key -T prefix V \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send V' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; send -X rectangle-off ; send V\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -XN 2 cursor-left ; send V\" ' "

# to select cmdline -
# M-U in zsh clears autosuggestion ...
#                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; run \\\"tmux send Escape \\\\\\\"U\\\\\\\" ; tmux send Home\\\" ; run \\\"tmux copy-mode\\\" ; run \\\"tmux send -l v\\\" ; run \\\"tmux send -l \\\\\\\$\\\" ; send -l h \" ' "
#                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; run \\\"tmux send Escape \\\\\\\"U\\\\\\\" \\\" ; run \\\"tmux copy-mode\\\" ; run \\\"tmux send -l V0\\\" \" ' "
# orig line -
#                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode\" ' "

# C-s C-v (same as C-s v above but send ^V)
# TODO: SHOULD we go into rectangle mode ? C-s C-v is a natural move to not lift off the Ctrl key ...
#       if we go into copy-mode, set rectangle off, if we are in copy-mode set rectangle on
bind-key -T prefix C-v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -X rectangle-off ; send C-v' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; send -X rectangle-off ; send C-v\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -X rectangle-off ; send -X cursor-left ; send C-v\" ' "
bind-key -T prefix C-V \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -X rectangle-off ; send C-v' \
            'if-shell -Ft= \"#{pane_in_mode}\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; send -X rectangle-off ; send C-v\" \
                \"setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode ; send -X rectangle-off ; send -X cursor-left ; send C-v\" ' "

# =================================================

# Delete is DC or Delete
# Insert is IC or Insert
# Backspace is BSpace

# trailing space ...

# -------

# make M-C-v / C-M-v same as C-S-v - most terminals may map M-C-v or C-S-v to native paste, but just in case they dont/cant (zutty) do it here ...

bind-key   -T root M-C-v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

# also do M-C-V as some terminals might produce it that way ...
bind-key   -T root M-C-V \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

# -------

# C-S-v - copy - also Shift+Ins
# SPECIAL: some terminal configs (urxvt) map C-S-v => M-! / M-*

# if alternate_on or mouse_any_flag then dont check for trailing space (use --sc 0) when pasting ...

# TODO: could have a TMUX_VI_MODE check ...
bind-key   -T root C-S-v \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

# also do C-S-V as some terminals might produce it that way ...
bind-key   -T root C-S-V \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

# TODO: could have a TMUX_VI_MODE check ...
bind-key   -T root S-Insert \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

bind-key   -T copy-mode-vi C-S-v \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\" " \
        "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

bind-key   -T copy-mode-vi C-S-V \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\" " \
        "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

bind-key   -T copy-mode-vi S-Insert \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\" " \
        "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

# SPECIAL: [some] terminals might special map C-Insert and/or S-Insert to M-! ...
# TODO: could have a TMUX_VI_MODE check ...
unbind-key -T root M-!
bind-key   -T root M-! \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-!\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

unbind-key -T copy-mode-vi M-!
bind-key   -T copy-mode-vi M-! \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\" " \
        "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

# -------

# TODO: add prefix Ins/C-Ins to [cancel +] paste and Del/C-Del to [cancel +] cut (send C-Delete)
bind-key   -T prefix Insert \
     if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "if-shell -Ft= '#{selection_present}' \
            \"send S-Insert\" " \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

bind-key   -T prefix C-Insert \
     if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "if-shell -Ft= '#{selection_present}' \
            \"send S-Insert\" " \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send S-Insert\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

bind-key   -T prefix Delete \
     if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "" \
        "send C-Delete"

bind-key   -T prefix C-Delete \
     if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "" \
        "send C-Delete"

# -------

# leading space ...

# TODO: could have a TMUX_VI_MODE check ...
bind-key   -T root C-S-Insert \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send C-S-Insert\" \
            \"run \\\"if [ ! -s /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \\\\\\\$add -eq 1 ] ; then myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux send Space ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\"; fi ; rm -f /dev/shm/tmpbuf\$\$ ; else myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$ ; fi\\\"\""

bind-key   -T copy-mode-vi C-S-Insert \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"if [ ! -s /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \\\$add -eq 1 ] ; then myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux send Space ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$ ; else myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$ ; fi\"" \
        "send -X cancel ; run \"if [ ! -s /dev/shm/tmux#{session_name}.spc ] ; then add=1 ; else add=\$(cat /dev/shm/tmux#{session_name}.spc) ; fi ; if [ \\\$add -eq 1 ] ; then myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux send Space ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$ ; else myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$ ; fi\""

# SPECIAL: [some] terminals might special map C-Insert and/or S-Insert to M-* ...
# SPECIAL: if vi/vim then send M-* to differentiate key / menu paste (still trailing space, not same as C-S-Ins leading space) ...
# TODO: could have a TMUX_VI_MODE check ...
unbind-key -T root M-*
bind-key   -T root M-* \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-*\" \
            \"if-shell -F '#{==:#{=3:pane_title},@v:}' \
                \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\" \
                \\\"if -F \\\\\\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc 0 > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \
                    \\\\\\\"run \\\\\\\\\\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\\\\\\\\\"\\\\\\\" \\\" \" "

unbind-key -T copy-mode-vi M-*
bind-key   -T copy-mode-vi M-* \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\"" \
        "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

# -----------------

# -----------------
# mck - TODO - M-& is used in vim, but not sure its sent by terminals any more ?
# -----------------
# SPECIAL: some terminal configs (urxvt) map C-S-c => M-&
# C-S-c - copy - also Ctrl+Ins
# SPECIAL: also if vi/vim then menu copy ...
# TODO: could have a TMUX_VI_MODE check ...
bind-key -T root M-& \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-&\" \
            \"send C-Insert\""

bind-key -T copy-mode-vi M-& \
    if -F "#{selection_present}" \
        "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel" \
        "send -X cancel"
# -----------------

bind-key -T root C-S-c \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-&\" \
            \"send C-Insert\""
# also do C-S-C as some terminals might produce it that way ...
bind-key -T root C-S-C \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-&\" \
            \"send C-Insert\""

# C-Insert in root does not make sense since no tmux selection, see other C-Insert mappings/notes below ...

bind-key -T copy-mode-vi C-S-c \
    if -F "#{selection_present}" \
        "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel" \
        "send -X cancel"
# also do C-S-C as some terminals might produce it that way ...
bind-key -T copy-mode-vi C-S-C \
    if -F "#{selection_present}" \
        "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel" \
        "send -X cancel"

# C-Insert is mapped in copy-mode-vi below ...

# OLD: some terminals might map C-S-x => M-( (or to <C-_>X or to <C-_><C-x>, see comment above)
# C-S-x  - cut - NOTE: also used to be Shift+Del ??
# can we really cut from any app other than inside an editor ?
# SPECIAL: also if vi/vim then menu cut ...
# TODO: could have a TMUX_VI_MODE check ...
#bind-key -T root M-( \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
#            \"send M-(\" \
#            \"send C-x\"" # or should this be M-( or <C-_>X or <C-_><C-x> ?

bind-key -T root C-S-x \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-(\" \
            \"send C-S-x\""
# also do C-S-X as some terminals might produce it that way ...
bind-key -T root C-S-X \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
            \"send M-(\" \
            \"send C-S-x\""

# =================================================

bind-key -T copy-mode-vi Home send-keys -X start-of-line
bind-key -T copy-mode-vi End  send-keys -X end-of-line

bind-key -T copy-mode-vi S-Home send-keys -X start-of-line
bind-key -T copy-mode-vi S-End  send-keys -X end-of-line

bind-key -T copy-mode-vi C-Home send-keys -X history-top
bind-key -T copy-mode-vi C-End  send-keys -X history-bottom \; send -l 0$
bind-key -T copy-mode-vi g switch-client -T LEADERG
bind-key -T LEADERG g           send-keys -X history-top
bind-key -T copy-mode-vi G      send-keys -X history-bottom \; send -l 0$

# these were bound to go-to top and go-to bottom ... (use C-Home, End or gg, G)
unbind -T copy-mode-vi '{'
unbind -T copy-mode-vi '}'

# if cursor-down-and-copy command exists ... but leave j alone
bind-key -T copy-mode-vi Down   send -X cursor-down
#bind-key -T copy-mode-vi Down   if -F "#{selection_present}" "send -X cursor-down" "send -X cursor-down-and-cancel"

# at bottom of pane ...
#bind-key -T copy-mode-vi Down   if -F "#{==:#{copy_cursor_y},#{e|-|:#{pane_height},1}}" "send -X cancel" "send -X cursor-down"

# TODO: what we really want is to scroll-down-and-cancel UNLESS a selection is ACTIVE
# vim-like mappings for copy-mode cut/paste ...
bind-key -T copy-mode-vi C-j    send -X scroll-down
bind-key -T copy-mode-vi C-J    send -X scroll-down
bind-key -T copy-mode-vi C-S-j  send -X scroll-down
bind-key -T copy-mode-vi C-S-J  send -X scroll-down
#bind-key -T copy-mode-vi C-j    if -F "#{selection_active}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-Down send -X scroll-down
#bind-key -T copy-mode-vi C-Down if -F "#{selection_active}" "send -X scroll-down" "send -X scroll-down-and-cancel"
bind-key -T copy-mode-vi C-k    send-keys -X scroll-up
bind-key -T copy-mode-vi C-K    send-keys -X scroll-up
bind-key -T copy-mode-vi C-S-k  send-keys -X scroll-up
bind-key -T copy-mode-vi C-S-K  send-keys -X scroll-up
bind-key -T copy-mode-vi C-Up   send-keys -X scroll-up

bind-key -T copy-mode-vi Tab    send -XN 4 cursor-right
bind-key -T copy-mode-vi BTab   send -XN 4 cursor-left
# TODO: could use to go up, down instead ...
#bind-key -T copy-mode-vi Tab    send -XN 5 cursor-down
#bind-key -T copy-mode-vi BTab   send -XN 5 cursor-up

bind-key -T copy-mode-vi M-j    send -XN 1 cursor-down
bind-key -T copy-mode-vi M-k    send -XN 1 cursor-up

unbind-key -T copy-mode-vi J
unbind-key -T copy-mode-vi K

# not mapped in vim either - as J joins lines and *-J use as nav perhaps should be discouraged ...
bind-key -T copy-mode-vi M-J    send -XN 5 scroll-down
bind-key -T copy-mode-vi M-K    send -XN 5 scroll-up
bind-key -T copy-mode-vi M-S-j  send -XN 5 scroll-down
bind-key -T copy-mode-vi M-S-k  send -XN 5 scroll-up

# NOTE: 1x goes to phys line beg/end, 2x goes to virt line beg/end - really ???
#       seems like so for when there are 2 lines but not when there are > 2 lines
#bind-key -T copy-mode-vi C-a send-keys -X start-of-line
#bind-key -T copy-mode-vi C-e send-keys -X end-of-line
# to get close to vim ...
bind-key -T copy-mode-vi C-a send-keys -l 00 \; send-keys -l ^
bind-key -T copy-mode-vi C-A send-keys -l 00 \; send-keys -l ^
bind-key -T copy-mode-vi C-e send-keys -l $$ \; send-keys -l h
bind-key -T copy-mode-vi C-E send-keys -l $$ \; send-keys -l h

# only real difference is C-v starts a new selection here but toggles in vim
# V for line selection
# C-v for rect selection from current col
#bind-key -T copy-mode-vi C-v send-keys -X begin-selection \; send-keys -X rectangle-toggle
# seems a little better ...
#bind-key -T copy-mode-vi v   if -F "#{selection_present}" "" "send-keys -X begin-selection"
#bind-key -T copy-mode-vi V   if -F "#{selection_present}" "" "send-keys -X select-line"
# allow for v/V change ...
# DONE: can we remember selection_start_x,y and toggle v/V keeping the start/end x,y ?
# NOTE: use 0 + begin-selection instead of 0v or 0v$ ...
bind-key -T copy-mode-vi v   \
    setenv -g COPY_DRAG 1 \; setenv -g COPY_START 1 \; \
    if -F "#{selection_present}" \
        "send -X rectangle-off ; send -X other-end ; send -X clear-selection ; send 0 ; run -C \"send -XN \\\${TMUX_SEL_X} cursor-right\" ; send -X begin-selection" \
        "run -C \"setenv -g TMUX_SEL_X #{copy_cursor_x}\" ; send -X rectangle-off ; send -X begin-selection"
# BUG: add extra send -X 0 ; send -X C-e as sometimes really long lines dont highlight correctly and this seems to help ...
bind-key -T copy-mode-vi V   \
    setenv -g COPY_DRAG 1 \; setenv -g COPY_START 1 \; \
    if -F "#{selection_present}" \
        "send -X rectangle-off ; send -X other-end ; send -X clear-selection ; send -X start-of-line ; send -X begin-selection ; send -X end-of-line ; send -X cursor-left" \
        "run -C \"setenv -g TMUX_SEL_X #{copy_cursor_x}\" ; send -X rectangle-off ; send -X start-of-line ; send -X begin-selection ; send -X end-of-line ; send -X cursor-left"
bind-key -T copy-mode-vi C-v \
    setenv -g COPY_DRAG 1 \; setenv -g COPY_START 1 \; \
    if -F "#{selection_present}" \
        "send -X rectangle-toggle" \
        "run -C \"setenv -g TMUX_SEL_X #{copy_cursor_x}\" ; send -X begin-selection ; send -X rectangle-toggle"
bind-key -T copy-mode-vi C-V \
    setenv -g COPY_DRAG 1 \; setenv -g COPY_START 1 \; \
    if -F "#{selection_present}" \
        "send -X rectangle-toggle" \
        "run -C \"setenv -g TMUX_SEL_X #{copy_cursor_x}\" ; send -X begin-selection ; send -X rectangle-toggle"

# enter copy-mode and start selection
#bind-key -T prefix v copy-mode \; send-keys -X begin-selection
# conflicts with vertical split
#bind-key -T prefix V copy-mode \; send-keys -X select-line

# <Leader>ws - match vim word-select
# NOTE: these do NOT yank/copy ...
bind-key -T copy-mode-vi '\' switch-client -T LEADER
bind-key -T LEADER w switch-client -T LEADER1
# vim might use lbvhe/lBvhE but in vim h at col 0 does not go to previous line whereas in tmux it does, so we skip the h here ...
# do we include : here ?
bind-key -T LEADER1 s send -X clear-selection \; set word-separators " &'`|[](){},\\\"" \; send -l lbve \; set word-separators " ='`;:+|[](){},/?\\\""
# <Leader>wS - match vim WORD (lBvE) - do we use lBvE here ?
bind-key -T LEADER1 S send -X clear-selection \; set word-separators " " \; send -l lbve \; set word-separators " ='`;:+|[](){},/?\\\""
# <Leader>wp - select whole file path
bind-key -T LEADER1 p send -X clear-selection \; set word-separators " &'`:|[](){},\\\"" \; send -l lbve \; set word-separators " &='`;:+|[](){},/?\\\""
# for P - remove : to get https:// etc urls - but really about the same as \wS ...
bind-key -T LEADER1 P send -X clear-selection \; set word-separators " &'`|[](){},\\\"" \; send -l lbve \; set word-separators " &='`;:+|[](){},/?\\\""

# if selection active then continue in search mode, otherwise clear it
bind-key -T copy-mode-vi '/' command-prompt -p 'search/:' 'if -F "#{selection_active}" "run -C \"copy-mode ; send -X search-forward %1"\" "run -C \"copy-mode ; send -X clear-selection ; send -X search-forward %1\""'
bind-key -T copy-mode-vi '?' command-prompt -p 'search?:' 'if -F "#{selection_active}" "run -C \"copy-mode ; send -X search-backward %1"\" "run -C \"copy-mode ; send -X clear-selection ; send -X search-backward %1\""'

# change n/N so n is always forward and N is always backward
#bind-key -T copy-mode-vi n send-keys -X search-forward #{pane_search_string}
#bind-key -T copy-mode-vi N send-keys -l h \; send-keys -X search-backward #{pane_search_string}

# NOTE: could use newer send -FX #{copy_cursor_word} to get cursor under word, insead of send -l lbve ...
# <Leader>wf - match vim search for word under cursor
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T LEADER1 f         if -F "#{selection_present}" "send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" "send -X clear-selection ; send -l lbve ; send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" \; delete-buffer -b tmpbuf

# and *
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T copy-mode-vi '*' if -F "#{selection_present}" "send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" "send -X clear-selection ; send -l lbve ; send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-forward \\\${sw}\"" \; delete-buffer -b tmpbuf

# <Leader>wF - match vim search backward for word under cursor
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T LEADER1 F         if -F "#{selection_present}" "send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" "send -X clear-selection ; send -l lbve ; send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" \; delete-buffer -b tmpbuf

# and '#' - put in single quotes
# copy word/selection to clipboard
# dont copy word/selection to clipboard
bind-key -T copy-mode-vi '#' if -F "#{selection_present}" "send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" "send -X clear-selection ; send -l lbve ; send -X stop-selection ; send -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"sw=\$(tmux show-buffer) ; tmux copy-mode ; tmux send -X search-backward \\\${sw}\"" \; delete-buffer -b tmpbuf

# to match vim, \yy to yank without leaving copy-mode (also see C-y)
# <Leader>yy now exits visual mode in vim, so do the same here ...
bind-key -T LEADER y switch-client -T LEADERY
bind-key -T LEADERY y if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; tmux display-message -N \\\"copied to clipboard\\\" ; fi\" ; send -X cancel "

# and same for <Leader>z<Space> ...
bind-key -T LEADER z switch-client -T LEADERZ
bind-key -T LEADERZ Space if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; tmux display-message -N \\\"copied to clipboard\\\" ; fi\" ; send -X cancel "

# <Leader>z/ no-op as we always copy to clipboard ...
bind-key -T LEADER z switch-client -T LEADERZ
bind-key -T LEADERZ / ""

# also <Leader>ct like vim
bind-key -T LEADER c switch-client -T LEADER2
bind-key -T LEADER2 t send -l M

# also zz like vim - TODO: should not move cursor if did not scroll (perhaps compare #{scroll_position} before/after scroll attempt ?)
bind-key -T copy-mode-vi z switch-client -T LEADER3
bind-key -T LEADER3 z send -X scroll-middle
#bind-key -T LEADER3 z if -F "#{e|>=|:#{copy_cursor_y},#{e|/|:#{pane_height},2}}" "run -C \"send -XN #{e|-|:#{copy_cursor_y},#{e|/|:#{pane_height},2}} scroll-down ; send -XN #{e|-|:#{copy_cursor_y},#{e|/|:#{pane_height},2}} cursor-up\"" "run -C \"send -XN #{e|-|:#{e|/|:#{pane_height},2},#{copy_cursor_y}} scroll-up ; send -XN #{e|-|:#{e|/|:#{pane_height},2},#{copy_cursor_y}} cursor-down\""

# also <Leader>qq to cancel copy-mode, like vim
bind-key -T LEADER q switch-client -T LEADER4
bind-key -T LEADER4 q send -X cancel

# replace 1-9 with +1-+9 for repeat cmds because 1,2 may collide with <Leader>1,2 mappings below
unbind-key -T copy-mode-vi 1
unbind-key -T copy-mode-vi 2
unbind-key -T copy-mode-vi 3
unbind-key -T copy-mode-vi 4
unbind-key -T copy-mode-vi 5
unbind-key -T copy-mode-vi 6
unbind-key -T copy-mode-vi 7
unbind-key -T copy-mode-vi 8
unbind-key -T copy-mode-vi 9
bind-key -T copy-mode-vi + switch-client -T LEADERY
bind-key -T LEADERY 1 command-prompt -N -I 1 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 2 command-prompt -N -I 2 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 3 command-prompt -N -I 3 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 4 command-prompt -N -I 4 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 5 command-prompt -N -I 5 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 6 command-prompt -N -I 6 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 7 command-prompt -N -I 7 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 8 command-prompt -N -I 8 -p (repeat) "send -N \"%%%\""
bind-key -T LEADERY 9 command-prompt -N -I 9 -p (repeat) "send -N \"%%%\""

# vim, tig <Leader> mappings for scrolling ...
#bind-key -T LEADER `  send -X halfpage-up
#bind-key -T LEADER 1  send -X halfpage-down
bind-key -T LEADER `  if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"
bind-key -T LEADER 1  if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"

# skip shifts and partial shifts of <Leader>1,2 ...

# shift version of <Leader>1
#bind-key -T copy-mode-vi '|' switch-client -T LEADERX
#bind-key -T LEADERX '!' send -X halfpage-up
# partial shifts ...
#bind-key -T LEADER '!'  send -X halfpage-up
#bind-key -T LEADERX 1   send -X halfpage-up

# to match vim ...
bind-key -T LEADER  l switch-client -T LEADERL
bind-key -T LEADERL 0 send -l 00
# NOTE: use 0 + begin-selection instead of 0v or 0v$ ...
bind-key -T LEADERL v run -C "setenv -g TMUX_SEL_X #{copy_cursor_x}" \; send -X rectangle-off \; send 0 \; send -X begin-selection \; send "C-e"

# if we are at col 0 then the 2nd one can go back to beg of line ...
#bind-key -T LEADERL 1 send-keys -l 0 \; send-keys -l ^
# add this logic to make it behave like vim ...
bind-key -T LEADERL 1 if -F "#{>:#{copy_cursor_x},0}" "send-keys -l 0 ; send-keys -l ^"

# the h causes the 2nd one to not continue to very end
bind-key -T LEADERL 2 send-keys -l $  \; send-keys -l h

bind-key -T LEADERL a send-keys -l 00 \; send-keys -l ^
bind-key -T LEADERL e send-keys -l $$ \; send-keys -l h

# match vim word nav
# TODO: match vim visual nav - depends on cursor pos and start of selection ...
bind-key -T copy-mode-vi C-Right \
    if -F "#{selection_active}" \
        "send-keys E" \
        "send-keys W"
# or perhaps BBhE to go to end of word ?
bind-key -T copy-mode-vi C-Left \
    if -F "#{selection_active}" \
        "send-keys B" \
        "send-keys B"

# disable prefix-d to detach (only use prefix C-d)
unbind-key -T prefix d

# map Esc to quit copy-mode (as in vi)
bind-key   -T copy-mode-vi Escape send-keys -X cancel

# also prefix Esc to enter/cancel copy-mode, just to be consistent ...
bind-key -T prefix Escape \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X cancel'"

# default is for q to quit copy-mode
#unbind-key -T copy-mode-vi q
# map q to clear selection ???  Should we also set rectangle off ???
bind-key   -T copy-mode-vi q   send-keys -X stop-selection \; send -X clear-selection \; send -X rectangle-off
bind-key   -T copy-mode-vi C-q send-keys -X stop-selection \; send -X clear-selection \; send -X rectangle-off
bind-key   -T copy-mode-vi C-Q send-keys -X stop-selection \; send -X clear-selection \; send -X rectangle-off

#bind-key   -T copy-mode-vi x send-keys -X stop-selection
bind-key   -T copy-mode-vi x   send-keys -X stop-selection \; setenv -g COPY_DRAG 0 \; setenv -g COPY_START 0
bind-key   -T copy-mode-vi C-x send-keys -X stop-selection \; setenv -g COPY_DRAG 0 \; setenv -g COPY_START 0
bind-key   -T copy-mode-vi C-X send-keys -X stop-selection \; setenv -g COPY_DRAG 0 \; setenv -g COPY_START 0

bind-key   -T copy-mode-vi Q send-keys -X stop-selection \; setenv -g COPY_DRAG 0 \; setenv -g COPY_START 0 \; send -X cancel

# an alternative to Esc to cancel copy-mode
#bind-key   -T copy-mode-vi C-x send-keys -X cancel
#bind-key   -T copy-mode-vi C-X send-keys -X cancel
# TODO: can we use qq ? (but already mapped single q above ...)

# these will work in copy-mode but shell might take over in normal mode ...

#bind-key   -T copy-mode-vi Delete   send-keys -X cancel
#bind-key   -T copy-mode-vi S-Delete send-keys -X cancel
bind-key   -T copy-mode-vi Delete     send-keys -X stop-selection \; send -X clear-selection \; send -X rectangle-off
bind-key   -T copy-mode-vi S-Delete   send-keys -X stop-selection \; send -X clear-selection \; send -X rectangle-off
bind-key   -T copy-mode-vi C-Delete   send-keys -X cancel
bind-key   -T copy-mode-vi C-S-Delete send-keys -X cancel
bind-key   -T copy-mode-vi M-Delete   send-keys -X cancel
bind-key   -T copy-mode-vi M-S-Delete send-keys -X cancel
#bind-key   -T copy-mode-vi C-M-Delete send-keys -X cancel

# C-M-Delete is often mapped to logout ...

# more meaningful cmd-prompt
bind-key -T prefix : command-prompt -p "tmux:"

# yank to clipboard ...
#
# no longer use tmux-yank plugin
# https://github.com/tmux-plugins/tmux-yank.git
#set -g @copy_mode_yank "C-c"
#set -g @shell_mode "vi"
#run-shell ~/.byobu/tmux-yank/yank.tmux

# NOTE: re: selection and adding trailing space at end ...
# C-c, y (yank) and mouse drag do NOT add trailing space - we assume you are yanking exactly what you want
# Most other selection methods (double-click, \ws, status-left-click, etc.) assume some sort of
# cmd-line paste and add a trailing space if configured to do so (C-F12)

# TODO: check if selection is empty before saving with myclip (and echoing copied ...)
# BUG: should wait for copy-pipe, but wait pipe hangs if selection is outside range ...

# if no selection then cancel copy-mode
bind-key -T copy-mode-vi C-c if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel" \
    "send -X cancel"
bind-key -T copy-mode-vi C-C if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel" \
    "send -X cancel"

# C-Insert is also copy, and the same C-S-c and C-S-C are mapped above ...
bind-key -T copy-mode-vi C-Insert if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel"

# also map 'y' to match vim yank
# if no selection then no-op
bind-key -T copy-mode-vi y if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel"

# Y to add trailing space if enabled
bind-key -T copy-mode-vi Y if -F "#{selection_present}" \
    "send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; fi\" ; send -X cancel"

# NOTE: C-y (or c ?) to copy but without leaving copy-mode
# c is change in vim so perhaps confusing to be different in copy-mode

# vim may remap C-y to paste before cursor ...
# default mapping in copy-mode-vi is scroll-up
#unbind-key -T copy-mode-vi C-y
#unbind-key -T copy-mode-vi C-Y
# NOTE: C-y to copy but without leaving copy-mode (also see \yy)
bind-key -T copy-mode-vi C-y if -F "#{selection_present}" \
    "send -X stop-selection ; send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; tmux display-message -N \\\"copied to clipboard\\\" ; fi\" "
bind-key -T copy-mode-vi C-Y if -F "#{selection_present}" \
    "send -X stop-selection ; send-keys -X pipe-no-clear \"tmux load-buffer -b tmpbuf - ; tmux wait -S pipe\" ; wait pipe ; run \"exst=\\\$(tmux list-buffers | awk '{print \\\$1}' | grep 'tmpbuf:') ; if [ -n \\\"\\\$exst\\\" ] ; then tmux show-buffer -b tmpbuf | myclip - ; tmux delete-buffer -b tmpbuf ; tmux display-message -N \\\"copied to clipboard\\\" ; fi\" "

# if not #{alternate_on} dont send C-y key
# data to prevent extraneous chars in output
# or zsh can use C-y as yank - to paste whats in the kill buffer (after a C-u for example) ...
#bind-key -T root C-y \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-y' \
#            ''"
#bind-key -T root C-Y \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-y' \
#            ''"
# or should C-y paste from root and/or copy-mode ?

# ----------------------------------------------

# NOTE: use SecondClick to avoid delay between DoubleClick and TripleClick
#       if NEED difference between DoubleClick and TripleClick then use DoubleClick instead of SecondClick

# NOTE: if it was single, need to use Down instead of Up on the single-click so the DoubleClick of the same gets run last
# remove : to get https:// etc urls ...
# TODO: if we want C-Click to end copy-mode ...
# TODO: do we want / in word-sep so that DoubleClick only gets us one word ?
bind   -T copy-mode-vi C-TripleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " &='`;+|[](){},/?\\\"" \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\\\"" \; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; send -X cancel
# C-TripleClick1Pane select whole line - NOTE: need to use Down instead of Up if we mapped single; does NOT allow extend
# TODO: do we want [] and , in the word-sep here ?
bind   -T copy-mode-vi C-DoubleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " &'`|[](){},\"" \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\\\"" \; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; send -X cancel
#unbind-key -T copy-mode-vi C-SecondClick1Pane
bind-key -T copy-mode-vi C-SecondClick1Pane ''

# same as above, but cancel copy mode - could also paste to cmdline then optionally send Space
# use DoubleClick so we dont get extras easily
# remove : to get https:// etc urls ...
# TODO: do we want / in word-sep so that DoubleClick only gets us one word ?
bind   -T copy-mode-vi C-M-TripleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " &='`;+|[](){},/?\\\"" \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\\\"" \; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; if -F "#{||:#{alternate_on},#{mouse_any_flag}}" "send -X cancel" "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""
# TODO: not sure we can get triple because we leave copy-mode on second above and we are not using double ...
# TODO: do we want [] and , in the word-sep here ?
bind   -T copy-mode-vi C-M-DoubleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " &'`|[](){},\"" \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\\\"" \; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; if -F "#{||:#{alternate_on},#{mouse_any_flag}}" "send -X cancel" "send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""
#unbind-key -T copy-mode-vi C-M-SecondClick1Pane
bind-key -T copy-mode-vi C-M-SecondClick1Pane ''

# NOTE: if it was single, need to use Down instead of Up on the single-click so the DoubleClick of the same gets run last
# remove : to get https:// etc urls ...
# NOTE: alternate_on check helps even tho it is not directly related to mouse events ...
# TODO: if we want C-Click to end copy-mode ...
# TODO: do we want / in word-sep so that DoubleClick only gets us one word ?
bind   -T root C-TripleClick1Pane \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send-keys M-F" \
        "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
            \"send-keys -M\" \
            \"select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \\\" &='`;+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -l lbve ; send -X stop-selection ; set word-separators \\\" &='`;:+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -X pipe-no-clear \\\"myclip -d - ; tmux wait -S pipe\\\" ; wait pipe ; send -X cancel\""
# C-TripleClick1Pane select whole line - NOTE: need to use Down instead of Up if we mapped single; does NOT allow extend
# NOTE: TMUX_VI_MODE manually tell tmux we are in vi ... - special M-C key for vim to know its a triple-click ...
# TODO: do we want [] and , in the word-sep here ?
bind   -T root C-DoubleClick1Pane \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send-keys M-C" \
        "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
            \"send-keys -M\" \
            \"select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \\\" &'`|[](){},\\\\\\\\\\\\\\\"\\\" ; send -l lbve ; send -X stop-selection ; set word-separators \\\" &='`;:+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -X pipe-no-clear \\\"myclip -d - ; tmux wait -S pipe\\\" ; wait pipe ; send -X cancel\""
#unbind-key -T root C-SecondClick1Pane
bind-key -T root C-SecondClick1Pane ''

# same as above, but cancel copy mode - could also paste to cmdline then optionally send Space
# use DoubleClick so we dont get extras easily
# remove : to get https:// etc urls ...

# -------------------------------------
# used to be M-H
# NOTE: M-H probably NOT a good char to send to vim as there is A-H/J/K/L already for movement ...
# now it is M-)
# -------------------------------------

# TODO: if alt_on or mouse then dont paste, just copy and exit ...
# TODO: do we want / in word-sep so that DoubleClick only gets us one word ?
# NOTE: vim floating tmux window - M-LeftClick moves window and M-RightClick resizes window - so we cannot have those do below -
bind   -T root C-M-TripleClick1Pane \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send-keys M-)" \
        "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
            \"send-keys -M\" \
            \"select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \\\" &='`;+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -l lbve ; send -X stop-selection ; set word-separators \\\" &='`;:+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -X pipe-no-clear \\\"myclip -d - ; tmux wait -S pipe\\\" ; wait pipe ; send -X cancel ; if -F \\\"#{?#{||:#{alternate_on},#{mouse_any_flag}},0,1}\\\" \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\"\""
# TODO: not sure we can get triple because we leave copy-mode on second above and we are not using double ...
# NOTE: TMUX_VI_MODE manually tell tmux we are in vi ... - special M-B key for vim to know its a triple-click ...
# TODO: do we want [] and , in the word-sep here ?
bind   -T root C-M-DoubleClick1Pane \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send-keys M-B" \
        "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
            \"send-keys -M\" \
            \"select-pane ; copy-mode -H ; send -X clear-selection ; set word-separators \\\" &'`|[](){},\\\\\\\\\\\\\\\"\\\" ; send -l lbve ; send -X stop-selection ; set word-separators \\\" &='`;:+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -X pipe-no-clear \\\"myclip -d - ; tmux wait -S pipe\\\" ; wait pipe ; send -X cancel ; if -F \\\"#{?#{||:#{alternate_on},#{mouse_any_flag}},0,1}\\\" \\\"run \\\\\\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\\\\\\\\\"<clipboard empty>\\\\\\\\\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\\\\\"\\\"\""
#unbind-key -T root C-M-SecondClick1Pane
bind-key -T root C-M-SecondClick1Pane ''

# ==============================================

# Status ...

# LEFT - root mode - if cmdline not empty clear it, same for C-/M- ...

#  if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
#      "run \"nf=\\\$(tmux capture-pane -p -J | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys C-c ; fi\""

# NOTE: use C-c because C-u and some other zsh/zle cmds do not reset history to end ...
#       zsh binds C-_/ to send-break if cmdline is not empty, we could use that ...
#       also, terminal *may* map C-S-/ to C-_/ ...
#       BUT - if ssh'ed or different shell then these 'special' sequences will not work, just send C-c for now ...

bind   -T root SecondClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
# triple is the same as second/double ...
bind   -T root TripleClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
unbind-key -T root DoubleClick1StatusLeft

# ----------------

# C- same as w/o modifier
bind   -T root C-SecondClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
# triple is the same as second/double ...
bind   -T root C-TripleClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
unbind-key -T root C-DoubleClick1StatusLeft

# ----------------

# M- same as w/o modifier
bind   -T root C-M-SecondClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
# triple is the same as second/double ...
bind   -T root C-M-TripleClick1StatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys C-c"
unbind-key -T root C-M-DoubleClick1StatusLeft

# ----------------

# LEFT - copy-mode ...

# copy selection and cancel copy-mode, but do not paste to cmdline
bind   -T copy-mode-vi SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
unbind-key -T copy-mode-vi DoubleClick1StatusLeft

# NOTE: 3-button on StatusLeft is a built-in tmux menu ...

# ----------------

# C- same as w/o modifier
bind   -T copy-mode-vi C-SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi C-TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
unbind-key -T copy-mode-vi C-DoubleClick1StatusLeft

# ----------------

# M- same as w/o modifier
bind   -T copy-mode-vi C-M-SecondClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
# triple is the same as second/double ...
bind   -T copy-mode-vi C-M-TripleClick1StatusLeft \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
unbind-key -T copy-mode-vi C-M-DoubleClick1StatusLeft

# ----------------------------------------------

# RIGHT - paste, C-/M- if cmdline not empty send Enter ...

# paste
bind   -T root SecondClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""
# triple is the same as second/double ...
bind   -T root TripleClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\""
unbind-key -T root DoubleClick1StatusRight

# ----------------

#  "run \"nf=$(tmux capture-pane -p -J | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\""
#  zsh binds M-< to send enter if cmdline not empty -
#  BUT - if ssh'ed or different shell then these 'special' sequences will not work, just send Enter for now ...

# C- if cmdlline not empty send Enter
bind   -T root C-SecondClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
# triple is the same as second/double ...
bind   -T root C-TripleClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
unbind-key -T root C-DoubleClick1StatusRight

# ----------------

# M- if cmdlline not empty send Enter
bind   -T root C-M-SecondClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
# triple is the same as second/double ...
bind   -T root C-M-TripleClick1StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
unbind-key -T root C-M-DoubleClick1StatusRight

# ----------------

# if not in copy-mode then 2/3 click with 3-button sends Enter / executes cmdline ...

bind   -T root SecondClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
# triple is the same as second/double ...
bind   -T root TripleClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
unbind-key -T root DoubleClick3StatusRight

# same for C-

bind   -T root C-SecondClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
# triple is the same as second/double ...
bind   -T root C-TripleClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
unbind-key -T root C-DoubleClick3StatusRight

# same for M-

bind   -T root C-M-SecondClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
# triple is the same as second/double ...
bind   -T root C-M-TripleClick3StatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Enter"
unbind-key -T root C-M-DoubleClick3StatusRight

# ----------------

# RIGHT - copy-mode ...

# copy selection and cancel copy-mode, but do not paste to cmdline
bind-key -T copy-mode-vi SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
unbind-key -T   copy-mode-vi DoubleClick1StatusRight

# enable dragging ...

bind   -T copy-mode-vi SecondClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
bind   -T copy-mode-vi TripleClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
unbind-key -T copy-mode-vi DoubleClick3StatusRight

# ----------------

# C- same as above but paste but no Enter
bind-key -T copy-mode-vi C-SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; if -F \"#{||:#{alternate_on},#{mouse_any_flag}}\" \"send -X cancel\" \"send -X cancel ; run \\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\" \" " \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi C-TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; if -F \"#{||:#{alternate_on},#{mouse_any_flag}}\" \"send -X cancel\" \"send -X cancel ; run \\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\" \" " \
        "send -X cancel"
unbind-key -T   copy-mode-vi C-DoubleClick1StatusRight

# enable dragging ...

bind   -T copy-mode-vi C-SecondClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
bind   -T copy-mode-vi C-TripleClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
unbind-key -T copy-mode-vi C-DoubleClick3StatusRight

# ----------------

# M- same as above but paste but no Enter
bind-key -T copy-mode-vi C-M-SecondClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; if -F \"#{||:#{alternate_on},#{mouse_any_flag}}\" \"send -X cancel\" \"send -X cancel ; run \\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\" \" " \
        "send -X cancel"
# triple is the same as second/double ...
bind-key -T copy-mode-vi C-M-TripleClick1StatusRight \
    if-shell -Ft= "#{selection_present}" \
        "send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; if -F \"#{||:#{alternate_on},#{mouse_any_flag}}\" \"send -X cancel\" \"send -X cancel ; run \\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\" \" " \
        "send -X cancel"
unbind-key -T   copy-mode-vi C-M-DoubleClick1StatusRight

# enable dragging ...

bind   -T copy-mode-vi C-M-SecondClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
bind   -T copy-mode-vi C-M-TripleClick3StatusRight \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0"
unbind-key -T copy-mode-vi C-M-DoubleClick3StatusRight

# ----------------------------------------------

# CENTER - copy-mode - too difficult to select when many windows ...

unbind-key -T copy-mode-vi SecondClick1StatusDefault
unbind-key -T copy-mode-vi TripleClick1StatusDefault
unbind-key -T copy-mode-vi DoubleClick1StatusDefault

# ----------------------------------------------

# when have Double/Triple click mapped, can be confusing to also have single click mapped ...
# as both will be executed on Double/Triple click ...
#bind-key -T root         MouseUp1StatusRight next
#bind-key -T copy-mode-vi MouseUp1StatusRight next

# history
bind-key -T root WheelUpStatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Up"
bind-key -T root WheelDownStatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Down"

# ----------------

# C-Wheel used for font size by OS/winmgr ...
bind-key -T root M-WheelUpStatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Up"
bind-key -T root M-WheelDownStatusLeft \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Down"

# ----------------

bind-key -T root WheelUpStatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Up"
bind-key -T root WheelDownStatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Down"

# ----------------

# C-Wheel used for font size by OS/winmgr ...
bind-key -T root M-WheelUpStatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Up"
bind-key -T root M-WheelDownStatusRight \
    if-shell -Ft= '#{?#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}},0,1}' \
        "send-keys Down"

# ==============================================

# seems to mess things up
# unbind-key -T prefix C-z

# C-z to zoom pane, z for fzf ...
bind-key -T prefix C-z resize-pane -Z
bind-key -T prefix C-Z resize-pane -Z
bind-key -T prefix z   resize-pane -Z

# C-s C-a - copy cmd from history
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-a); else up arrow for previous cmd
#bind-key -T prefix C-a \
#    if-shell -Ft= "#{pane_in_mode}" \
#        "" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
#            \"\" \
#            \"send-keys Up\" "

# this was go to last window ...
unbind-key -T prefix C-M-a
unbind-key -T prefix C-M-A

# TODO: prefix C-w to go down through history after prefix C-a ?

# C-s C-M-a - execute cmd (used to be C-s C-x)
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-M-a); else if cmdline not empty then Enter
# zsh binds M-< to send enter if cmdline not empty - so could send that ...
# BUT - if ssh'ed or different shell then 'special' sequences will not work, so just send Enter for now ...
bind-key -T prefix C-M-a \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
            \"\" \
            \"send-keys Enter\""
bind-key -T prefix C-M-A \
    if-shell -Ft= "#{pane_in_mode}" \
        "" \
        "if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
            \"\" \
            \"send-keys Enter\""

#           \"run \\\"nf=$(tmux capture-pane -p -J | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\\\\\$nf -gt 0 ] ; then tmux send-keys Enter ; fi\\\" \" "

# C-s C-e - clear cmd
# in copy-mode, do nothing
# in root mode, if alternate do nothing (TODO: or perhaps send C-s C-e); else if cmdline not empty then clear it
#bind-key -T prefix C-e \
#    if-shell -Ft= "#{pane_in_mode}" \
#        "" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{mouse_any_flag}}' \
#            \"\" \
#            \"run \\\"nf=$(tmux capture-pane -p -J | tac | sed '/^$/d' | head -n 1 | awk '{print NF-1}') ; if [ \\\\\\\$nf -gt 0 ] ; then tmux send-keys C-c; fi\\\"# \" "

# Alt-Mouse3 may be mapped to window resize in gnome
# To change it to <Super>:
# gsettings set org.gnome.desktop.wm.preferences resize-with-right-button true
# gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier '<Super>'

# ==============================================

# copy cmdline to clipboard (if not empty)
# TODO: correctly handle cmdline that wraps beyond a single line in zsh ...
# bash is ok, but zsh adds ' ^M^[[K^[[K2^M' where the 2 is sometimes a 1 or not present or '^[[90m<first char of next line>^[[90m' colour codes at the wrap point
# if auto-suggest is on - which means a line capture will not be the entire command-line but just the last wrapped part and possibly part that was not typed ...
# NOTE: send M-= and maybe zsh has this bound to run a cmd to copy and clip the cmdline ...
bind-key -T prefix . \
    if-shell -Ft= "#{||:#{pane_in_mode},#{||:#{alternate_on},#{mouse_any_flag}}}" \
        "" \
        "run \"ox=#{cursor_x} ; oy=#{cursor_y} ; \${BYOBU_CONFIG_DIR}/bin/tmux_cp_cmdline \\\$ox \\\$oy\""

#       "send-keys M-="
#       "run \"cmdline=\\\$(tmux capture-pane -p -J | tac | sed '/^$/d' | head -n 1 | awk '{for(i=2;i<NF;i++){printf \\\"%s \\\", \\\$i}; if (NF > 1) printf \\\"%s\\\", \\\$NF}') ; if [ -n \\\"\\\$cmdline\\\" ] ; then echo -n \\\$cmdline | myclip - ; echo -n \\\$cmdline | tmux load-buffer - ; tmux display-message -N \\\"copied cmdlne to clipboard\\\" ; fi\" "

# Make sure to also unmap terminal (ie terminator)
# Ctrl-PgUp/Dn keys for these to take effect

# many [x]terminals use/map Shift-PgUp/Dn ...
#bind-key -T copy-mode-vi S-PPage send -X halfpage-up
#bind-key -T copy-mode-vi S-NPage send -X halfpage-down

#bind   -T copy-mode-vi PPage   send-keys -X page-up
bind   -T copy-mode-vi PPage   if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X page-up"
# same for ctrl-b, but half-page scroll
#bind   -T copy-mode-vi C-b     send-keys -X halfpage-up
#bind   -T copy-mode-vi C-B     send-keys -X halfpage-up
bind   -T copy-mode-vi C-b     if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"
bind   -T copy-mode-vi C-B     if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"

#bind   -T copy-mode-vi NPage   send -X page-down
bind   -T copy-mode-vi NPage   if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X page-down"
#bind   -T copy-mode-vi NPage   if -F "#{selection_present}" "send -X page-down" "send -X page-down-and-cancel"
# same for ctrl-f, but half-page scroll
#bind   -T copy-mode-vi C-f     send -X halfpage-down
#bind   -T copy-mode-vi C-F     send -X halfpage-down
bind   -T copy-mode-vi C-f     if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"
bind   -T copy-mode-vi C-F     if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"
#bind   -T copy-mode-vi C-f     if -F "#{selection_present}" "send -X halfpage-down" "send -X halfpage-down-and-cancel"

bind   -T copy-mode-vi C-u     send -X page-up
bind   -T copy-mode-vi C-U     send -X page-up
bind   -T copy-mode-vi C-d     send -X page-down
bind   -T copy-mode-vi C-D     send -X page-down

#bind   -T copy-mode-vi C-PPage send -X halfpage-up
bind   -T copy-mode-vi C-PPage if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -X halfpage-up"
#bind   -T copy-mode-vi C-NPage send -X halfpage-down
bind   -T copy-mode-vi C-NPage if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -X halfpage-down"
#bind   -T copy-mode-vi C-NPage if -F "#{selection_present}" "send -X halfpage-down" "send -X halfpage-down-and-cancel"

bind   -T copy-mode-vi C-S-PPage send -XN 10 scroll-up
bind   -T copy-mode-vi C-S-NPage send -XN 10 scroll-down
#bind   -T copy-mode-vi C-S-NPage if -F "#{selection_present}" "send -XN 10 scroll-down" "send -XN 10 scroll-down-and-cancel"

#bind   -T copy-mode-vi M-PPage send -XN 2 page-up
bind   -T copy-mode-vi M-PPage if -F "#{e|>=|:#{copy_cursor_y},#{e|-|:#{pane_height},6}}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-up\"" "send -XN 2 page-up"
#bind   -T copy-mode-vi M-NPage send -XN 2 page-down
bind   -T copy-mode-vi M-NPage if -F "#{e|<=|:#{copy_cursor_y},5}" "run -C \"send -XN #{e|/|:#{pane_height},2} cursor-down\"" "send -XN 2 page-down"
#bind   -T copy-mode-vi M-NPage if -F "#{selection_present}" "send -XN 2 page-down" "send -XN 2 page-down-and-cancel"

bind   -T copy-mode-vi S-PPage send -XN 5 scroll-up
bind   -T copy-mode-vi S-NPage send -XN 5 scroll-down

bind   -T copy-mode-vi M-S-PPage send -XN 10 scroll-up
bind   -T copy-mode-vi M-S-NPage send -XN 10 scroll-down

# first press scroll half and enter copy-mode
bind-key -T root PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys PPage' \
            ''"
#            'copy-mode ; send -XN 2 cursor-left ; send -X halfpage-up'"

# prefix PPage to enter copy-mode and go to mid-screen
bind-key -T prefix PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X page-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

bind-key -T prefix C-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X halfpage-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 20 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

bind-key -T prefix C-S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

bind-key -T prefix C-M-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

bind-key -T prefix M-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

bind-key -T prefix S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 5 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

bind-key -T prefix M-S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-PPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \
#                   \\\"copy-mode ; send -XN 2 cursor-left ; send -l M\\\"\"'"
##                  \\\"copy-mode ; send -XN 2 cursor-left\\\"\"'"

# same for ctrl-b
# first press scroll 10 and enter copy-mode
bind-key -T root C-b \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-b' \
            ''"
#            'copy-mode ; send -XN 2 cursor-left ; send -XN 10 scroll-up'"
bind-key -T root C-B \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-b' \
            ''"
#            'copy-mode ; send -XN 2 cursor-left ; send -XN 10 scroll-up'"

# prefix C-b to enter copy-mode and go to mid-screen
bind-key -T prefix C-b \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X halfpage-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"
bind-key -T prefix C-B \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X halfpage-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

# same for prefix C-u
bind-key -T prefix C-u \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X page-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"
bind-key -T prefix C-U \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X page-up' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"copy-mode\" \
                \"copy-mode ; send -XN 2 cursor-left ; run -C \\\"send -XN #{e|/|:#{pane_height},2} cursor-up\\\"\"'"

# same for C- but half-page scroll
# first press scroll half that and enter copy-mode
bind-key -T root C-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-PPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys C-PPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 20 Up\\\" \
#                \\\"\\\"\""
##                \\\"copy-mode ; send -XN 2 cursor-left ; send -XN 10 scroll-up\\\"\""

bind-key -T root C-S-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-PPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys C-S-PPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 10 Up\\\" \
#                \\\"\\\"\""
##                \\\"copy-mode ; send -XN 2 cursor-left ; send -XN 5 scroll-up\\\"\""

# same for M- but 2 page scroll
# first press scroll half that and enter copy-mode
bind-key -T root M-PPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-PPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys M-PPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 2 PPage\\\" \
#                \\\"\\\"\""
##                \\\"copy-mode ; send -XN 2 cursor-left ; send -X page-up\\\"\""

# if not #{alternate_on} dont send NPage key
# data to prevent extraneous chars in output
bind-key -T root NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys NPage' \
            ''"

bind-key -T prefix NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X page-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys NPage\"'"

bind-key -T prefix C-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -X halfpage-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys C-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 20 Down\\\" \"'"

bind-key -T prefix C-S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys C-S-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Down\\\" \"'"

bind-key -T prefix C-M-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys C-S-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \"'"

bind-key -T prefix M-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys M-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \"'"

bind-key -T prefix S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 5 scroll-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys C-S-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 5 Up\\\" \"'"

bind-key -T prefix M-S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send-keys -XN 10 scroll-down' \
            'if-shell -Ft= \"#{||:#{alternate_on},#{mouse_any_flag}}\" \
                \"send-keys C-S-NPage\"'"

#           'if-shell -F \"#{==:#{=3:pane_title},@v:}\" \
#               \"send-keys C-S-NPage\" \
#               \"if-shell -Ft= \\\"#{||:#{alternate_on},#{mouse_any_flag}}\\\" \
#                   \\\"send-keys -N 10 Up\\\" \"'"

# same for ctrl-f
bind-key -T root C-f \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-f' \
            ''"
bind-key -T root C-F \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-f' \
            ''"

# same for C- but half-page scroll
bind-key -T root C-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-NPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys C-NPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 20 Down\\\"\""

bind-key -T root C-S-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys C-S-NPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys C-S-NPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 10 Down\\\"\""

# same for M- but 2 page scroll
bind-key -T root M-NPage \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys M-NPage' \
            ''"

#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -F '#{||:#{==:#{=3:pane_title},@v:},#{m/r:- VIFM,#{pane_title}}} ' \
#            \"send-keys M-NPage\" \
#            \"if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#                \\\"send-keys -N 2 NPage\\\"\""

# first press does not scroll but just enter copy-mode
#bind-key -T root C-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-Up' \
#            'copy-mode ; send -XN 2 cursor-left'"

#-- if not #{alternate_on} dont send C-Down key
#-- data to prevent extraneous chars in output
#-- NOTE: skip as it can be used by zsh bindkey for history nav ...
#--  bind-key -T root C-Down \
#--      if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#--          "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#--              'send-keys C-Down'"

# first press does not scroll but just enter copy-mode
#bind-key -T root C-k \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys C-k' \
#            'copy-mode ; send -XN 2 cursor-left'"

# -----------------------------------------------
# NOTE: remapping C-S-Up/Down/Right/Left here ...
# -----------------------------------------------

# C-S-L/R/U/D - move by 5/10 ...
bind-key -T root C-S-Up \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys -N 5 Up' \
            'send-keys Up'"

#bind-key -T root C-S-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys -N 5 Up' \
#            'copy-mode ; send -XN 2 cursor-left ; send -XN 5 cursor-up'"

bind-key -T root C-S-Down \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys -N 5 Down' \
            'send-keys Down'"

# TODO: do we map C-S-L/R ?

bind-key -T root C-S-Left \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys -N 5 Left' \
            'send-keys Left'"

bind-key -T root C-S-Right \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            'send-keys -N 5 Right' \
            'send-keys Right'"

# -----------------------------------------------

bind-key -T copy-mode-vi C-S-Up   \
    send-keys -XN 5 cursor-up

bind-key -T copy-mode-vi C-S-Down \
    send-keys -XN 5 cursor-down

#bind-key -T copy-mode-vi C-S-Down \
#    if -F "#{selection_active}" \
#        "send -XN 5 cursor-down" \
#        "send -XN 5 cursor-down-and-cancel"

bind-key -T copy-mode-vi C-S-Left \
    send-keys -XN 10 cursor-left

bind-key -T copy-mode-vi C-S-Right \
    send-keys -XN 10 cursor-right

# ----------------

# NOTE: C-M-U/D may be used by gnome winmgr, use dconf to remove those mappings ...

bind-key -T copy-mode-vi C-M-Up \
    send-keys -X cursor-up

bind-key -T copy-mode-vi C-M-Down \
    send-keys -X cursor-down

#bind-key -T copy-mode-vi C-M-Right \
#    send-keys -X cursor-right

#bind-key -T copy-mode-vi C-M-Left \
#    send-keys -X cursor-left

# match vim word nav
# TODO: match vim visual nav - depends on cursor pos and start of selection ...
bind-key -T copy-mode-vi C-M-Right \
    if -F "#{selection_active}" \
        "send-keys e" \
        "send-keys w"

# or perhaps bbhe to go to end of word ?
bind-key -T copy-mode-vi C-M-Left \
    if -F "#{selection_active}" \
        "send-keys b" \
        "send-keys b"

# -----------------------------------------------
# NOTE: remapping C-M-Up/Down/Right/Left here ...
# -----------------------------------------------

# Like with C-M-PageUp we could auto enter copy-mode ...
# But its also conflicting with C-M-DEL + Up for history ...
#bind-key -T root C-M-Up \
#    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
#        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#            'send-keys Up' \
#            'copy-mode ; send -XN 2 cursor-left'"
bind-key -T root C-M-Up \
    send-keys Up

bind-key -T root C-M-Down \
    send-keys Down

#bind-key -T root C-M-Right \
#    send-keys Right

#bind-key -T root C-M-Left \
#    send-keys Left

# with vi - go to next word ...

bind-key -T root C-M-Right \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "if-shell -F '#{!=:#{=5:pane_title},@v:t:}}' \
            \"send C-M-Right\" \
            \"send Right\"" \
        "send Right"

bind-key -T root C-M-Left \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "if-shell -F '#{!=:#{=5:pane_title},@v:t:}}' \
            \"send C-M-Left\" \
            \"send Left\"" \
        "send Left"

# ==============================================

# mouse scroll / cut/paste options ...

bind-key   -T copy-mode-vi ` \
    if -Ft= '#{==:#{COPY_DRAG},0}' \
        "setenv -g COPY_DRAG 1" \
        "setenv -g COPY_DRAG 0 ; send -X stop-selection"

# used to be prefix x, but that is used for selection, so make this prefix X now
bind   -T prefix       X   lock-server

#           'if -Ft= \"#{!=:#{COPY_DRAG},0}\" \"setenv -g COPY_DRAG 0 ; send -X stop-selection\" \"setenv -g COPY_DRAG 1\"' \

bind   -T prefix       x \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -l `' \
            \"if -F \\\"#{?#{||:#{alternate_on},#{mouse_any_flag}},1,0}\\\" \
                'setenv -g COPY_DRAG 1 ; copy-mode' \
                'setenv -g COPY_DRAG 1 ; copy-mode ; send -XN 2 cursor-left'\""

bind   -T prefix       C-x \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -l `' \
            \"if -F \\\"#{?#{||:#{alternate_on},#{mouse_any_flag}},1,0}\\\" \
                'setenv -g COPY_DRAG 1 ; copy-mode' \
                'setenv -g COPY_DRAG 1 ; copy-mode ; send -XN 2 cursor-left'\""

# why did we used to switch-client to COPY_CX here ?
#           'setenv -g COPY_DRAG 1 ; copy-mode'" \; \
#       switch-client -T COPY_CX

bind   -T prefix       C-X \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
            'send -l `' \
            \"if -F \\\"#{?#{||:#{alternate_on},#{mouse_any_flag}},1,0}\\\" \
                'setenv -g COPY_DRAG 1 ; copy-mode' \
                'setenv -g COPY_DRAG 1 ; copy-mode ; send -XN 2 cursor-left'\""

# why did we used to switch-client to COPY_CX here ?
#           'setenv -g COPY_DRAG 1 ; copy-mode'" \; \
#       switch-client -T COPY_CX

bind   -T COPY_CX      MouseDown1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; send -X stop-selection" \
        "select-pane ; copy-mode -M"

bind   -T COPY_CX      C-MouseDown1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; setenv -g COPY_START 1 ; send -X stop-selection" \
        "select-pane ; setenv -g COPY_START 1 ; copy-mode -M"

bind   -T COPY_CX      M-S-MouseDown1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; setenv -g COPY_START 1 ; send -X stop-selection" \
        "select-pane ; setenv -g COPY_START 1 ; copy-mode -M ; send -X rectangular-on"

bind   -T COPY_CX      MouseDrag1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; send -X begin-selection" \
        "select-pane ; copy-mode -M ; send -X begin-selection"

bind   -T COPY_CX      C-MouseDrag1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; setenv -g COPY_START 1 ; send -X begin-selection" \
        "select-pane ; setenv -g COPY_START 1 ; copy-mode -M ; send -X begin-selection"

bind   -T COPY_CX      M-S-MouseDrag1Pane \
    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
        "select-pane ; setenv -g COPY_START 1 ; send -X begin-selection" \
        "select-pane ; setenv -g COPY_START 1 ; copy-mode -M ; send -X rectangle-on ; send -X begin-selection"

# ----------------
# old C-M-Mouse/Click mappings when we used M-Mouse/Click ...
# ----------------

# another way to get into drag selection w/o needing prefix C-x first ...
#bind   -T root         C-M-MouseDrag1Pane \
#    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
#        "select-pane ; setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; send -X begin-selection" \
#        "select-pane ; setenv -g COPY_DRAG 1 ; setenv -g COPY_START 1 ; copy-mode -M ; send -X begin-selection"

# TODO: use this for getting url under cursor and launching xdg-open ...
# Use Z now ...
#bind   -T root         C-M-DoubleClick1Pane \
#        select-pane \; copy-mode \; send -X clear-selection \; set word-separators " " \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\"" \; send -X pipe-no-clear "tmux load-buffer -b urlbuf - ; tmux wait -S pipe" \; wait pipe \; run "sleep 0.50" \; send -X cancel \; run "url=\$(tmux show-buffer -b urlbuf) ; echo \"\$url\" | ${BYOBU_CONFIG_DIR}/bin/urlopen ; tmux delete-buffer -b urlbuf"

# C-M-Btn3 root paste (same as A-) ...
#bind   -T root         C-M-MouseDown3Pane   select-pane -t = \; \
#    run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"
#unbind-key -T root         C-M-SecondClick3Pane
#unbind-key -T root         C-M-TripleClick3Pane
#unbind-key -T root         C-M-DoubleClick3Pane

# C-M-Btn3 copy-mode if selection present then copy and cancel ...
#bind   -T copy-mode-vi C-M-MouseDown3Pane   select-pane -t = \; \
#    if-shell -F '#{selection_present}' \
#        "send-keys -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
#        "send -X cancel"
#unbind-key -T copy-mode-vi C-M-SecondClick3Pane
#unbind-key -T copy-mode-vi C-M-TripleClick3Pane
#unbind-key -T copy-mode-vi C-M-DoubleClick3Pane

# ----------------
# old C-M-Mouse/Click mappings when we used M-Mouse/Click ...
# ----------------

# TODO: perhaps one of S- / C-S- / M-S- / M- MouseDown1 used for urlopen ?

# TODO: use S-Mouse for selection w/o leaving copy-mode
#       *IF* terminal support these ...
#       but note S-Mouse* mappings only work in kitty and wezterm and st terminals

# can we disable default shift + drag selection ?
# probably not as these are usually handled by the terminal and not sent to the app (tmux) ...

# with tmux need to press SHIFT to get mouse events to pass thru to terminal/app ...
# for kitty, st, wezterm -
# shift+drag1       - window selection
# ctrl+shift+drag1  - rectangle selection
# with tmux -
# ctrl+drag1           - window selection
# alt+shift+drag1      - rectangle selection
# ctrl+alt+drag1       - window selection and cancel and paste
# ctrl+shift+alt+drag1 - rectangle selection and cancel and paste

#bind   -T root         S-MouseDown1Pane      select-pane \; display-message "S-Down1"
#bind   -T root         S-MouseUp1Pane        select-pane
#bind   -T root         S-MouseDrag1Pane      select-pane \; display-message "S-Drag1"
#bind   -T root         S-MouseDragEnd1Pane   select-pane
bind   -T root         S-WheelDownPane       select-pane
bind   -T root         S-WheelUpPane         select-pane

#bind   -T copy-mode-vi S-MouseDown1Pane      select-pane \; display-message "S-Down1"
#bind   -T copy-mode-vi S-MouseUp1Pane        select-pane
#bind   -T copy-mode-vi S-MouseDrag1Pane      select-pane \; display-message "S-Drag1"
#bind   -T copy-mode-vi S-MouseDragEnd1Pane   select-pane
bind   -T copy-mode-vi S-WheelDownPane       select-pane
bind   -T copy-mode-vi S-WheelUpPane         select-pane

bind   -T root         S-TripleClick1Pane    select-pane
bind   -T root         S-DoubleClick1Pane    select-pane
bind   -T root         S-SecondClick1Pane    select-pane

bind   -T copy-mode-vi S-TripleClick1Pane    select-pane
bind   -T copy-mode-vi S-DoubleClick1Pane    select-pane
bind   -T copy-mode-vi S-SecondClick1Pane    select-pane

# ----------------
# ----------------

# TODO: C-S-Mouse and Click mappings ...
#       *IF* terminal support these ...
#       but note C-S-Mouse* mappings only work in kitty and wezterm and st terminals

#bind   -T root         C-S-MouseDown1Pane    select-pane \; display-message "C-S-Down1"
#bind   -T root         C-S-MouseUp1Pane      select-pane
#bind   -T root         C-S-MouseDrag1Pane    select-pane \; display-message "C-S-Drag1"
#bind   -T root         C-S-MouseDragEnd1Pane select-pane
bind   -T root         C-S-WheelDownPane     select-pane
bind   -T root         C-S-WheelUpPane       select-pane

#bind   -T copy-mode-vi C-S-MouseDown1Pane    select-pane \; display-message "C-S-Down1"
#bind   -T copy-mode-vi C-S-MouseUp1Pane      select-pane
#bind   -T copy-mode-vi C-S-MouseDrag1Pane    select-pane \; display-message "C-S-Drag1"
#bind   -T copy-mode-vi C-S-MouseDragEnd1Pane select-pane
bind   -T copy-mode-vi C-S-WheelDownPane     select-pane
bind   -T copy-mode-vi C-S-WheelUpPane       select-pane

bind   -T root         C-S-TripleClick1Pane  select-pane
bind   -T root         C-S-DoubleClick1Pane  select-pane
bind   -T root         C-S-SecondClick1Pane  select-pane

bind   -T copy-mode-vi C-S-TripleClick1Pane  select-pane
bind   -T copy-mode-vi C-S-DoubleClick1Pane  select-pane
bind   -T copy-mode-vi C-S-SecondClick1Pane  select-pane

# ----------------
# ----------------

# TODO: M-S-Mouse and Click mappings ...
#       *IF* terminal support these ...
#       but note M-S-Mouse* mappings only work in kitty and wezterm and st terminals

#bind   -T root         M-S-MouseDown1Pane    select-pane \; display-message "M-S-Down1"
#bind   -T root         M-S-MouseUp1Pane      select-pane
#bind   -T root         M-S-MouseDrag1Pane    select-pane \; display-message "M-S-Drag1"
#bind   -T root         M-S-MouseDragEnd1Pane select-pane
#bind   -T root         M-S-WheelDownPane     select-pane
#bind   -T root         M-S-WheelUpPane       select-pane

#bind   -T copy-mode-vi M-S-MouseDown1Pane    select-pane \; display-message "M-S-Down1"
#bind   -T copy-mode-vi M-S-MouseUp1Pane      select-pane
#bind   -T copy-mode-vi M-S-MouseDrag1Pane    select-pane \; display-message "M-S-Drag1"
#bind   -T copy-mode-vi M-S-MouseDragEnd1Pane select-pane
bind   -T copy-mode-vi M-S-WheelDownPane     \
    select-pane \; send-keys -XN 10 scroll-down
bind   -T copy-mode-vi M-S-WheelUpPane       \
    select-pane \; send-keys -XN 10 scroll-up

bind   -T root         M-S-TripleClick1Pane  select-pane
bind   -T root         M-S-DoubleClick1Pane  select-pane
bind   -T root         M-S-SecondClick1Pane  select-pane

bind   -T copy-mode-vi M-S-TripleClick1Pane  select-pane
bind   -T copy-mode-vi M-S-DoubleClick1Pane  select-pane
bind   -T copy-mode-vi M-S-SecondClick1Pane  select-pane

# ----------------
# ----------------

# TODO: M-Mouse and Click mappings ...
#       M-Mouse/Click used for tmux popup move/resize, use C-M-Mouse/Click for other things

#bind   -T root         M-MouseDown1Pane    select-pane \; display-message "M-Down1"
#bind   -T root         M-MouseUp1Pane      select-pane
bind   -T root         M-MouseDrag1Pane    select-pane \; display-message "M-Drag1"
bind   -T root         M-MouseDragEnd1Pane select-pane
# M-WheelDownPane mapped below
# M-WheelUpPane   mapped below

#bind   -T copy-mode-vi M-MouseDown1Pane    select-pane \; display-message "M-Down1"
#bind   -T copy-mode-vi M-MouseUp1Pane      select-pane
#bind   -T copy-mode-vi M-MouseDrag1Pane    select-pane \; display-message "M-Drag1"
#bind   -T copy-mode-vi M-MouseDragEnd1Pane select-pane
# M-WheelDownPane mapped below
# M-WheelUpPane   mapped below

bind   -T root         M-TripleClick1Pane  select-pane
#bind   -T root         M-DoubleClick1Pane  select-pane
bind   -T root         M-SecondClick1Pane  select-pane

bind   -T root         M-DoubleClick1Pane  \
    if-shell -F '#{==:#{=3:pane_title},@v:}' \
        "send-keys Escape \"V\"" \
        "select-pane"

bind   -T copy-mode-vi M-TripleClick1Pane  select-pane
bind   -T copy-mode-vi M-DoubleClick1Pane  select-pane
#bind   -T copy-mode-vi M-SecondClick1Pane  select-pane

bind   -T copy-mode-vi M-SecondClick1Pane  \
    select-pane \; send -X clear-selection \; send -X select-line \; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe

# ----------------
# ----------------

# or just unbind these ?
# leave as-is or else we will get copy-mode on LeftDrag ...
bind   -T root         MouseDown1Pane    select-pane \; send-keys -M
bind   -T root         MouseDrag1Pane    select-pane \; send-keys -M

# ----------------

# instead of clear-selection, use stop-selection
# helps from having extra clicks wipe out selection ...
# This is special in that it allows a single-click to move cursor to mouse x,y
# But it means you cannot extend any selection with the mouse ...
bind   -T copy-mode-vi MouseDown1Pane      select-pane \; send -X stop-selection
bind   -T copy-mode-vi C-MouseDown1Pane    select-pane \; send -X stop-selection
bind   -T copy-mode-vi C-M-MouseDown1Pane  select-pane \; send -X stop-selection
bind   -T copy-mode-vi M-S-MouseDown1Pane  select-pane \; send -X stop-selection
bind   -T copy-mode-vi C-S-M-MouseDown1Pane  select-pane \; send -X stop-selection

bind   -T copy-mode-vi MouseDrag1Pane \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "select-pane" \
        "select-pane ; send -X clear-selection ; send -X begin-selection"

# TODO: check if selection is empty before saving with myclip ...
# NOTE: copy to clipboard if its only 1 line, but 'y' or 'q' or 'Esc' are all a single keystroke to exit copy-mode, so whats the difference ?
# BUG: should wait for copy-pipe, but wait pipe hangs if selection is outside range ...

# overwrite default copy-pipe-and-cancel mapping
#bind  -T copy-mode-vi MouseDragEnd1Pane  select-pane \; setenv -g COPY_DRAG 0
bind  -T copy-mode-vi MouseDragEnd1Pane  select-pane

# TODO: if selection is just one line then save it to clipboard ...
#bind  -T copy-mode-vi MouseDragEnd1Pane select-pane \; send-keys -X copy-pipe-no-clear "tmux load-buffer -b tmpbuf - ; tmux wait -S pipe" \; wait pipe \; run "exst=$(tmux list-buffers | awk '{print $1}' | grep 'tmpbuf:') ; if [ -n \"\$exst\" ] ; then nl=$(tmux show-buffer -b tmpbuf | head -c -1 | wc -l) ; if [ \$nl -lt 1 ] ; then tmux show-buffer -b tmpbuf | myclip - ; fi ; tmux delete-buffer -b tmpbuf ; fi"

# TODO: since we do not end copy-mode on scroll down to bottom now, do not copy selection to clipboard here, just stop it - forcing C-c etc. to always cancel copy-mode
# see note below about - scroll-down-and-cancel UNLESS a selection is ACTIVE
# see note below about C- to get back original ability to extend a one-line selection
#bind  -T copy-mode-vi MouseDragEnd1Pane select-pane \; send-keys -X copy-pipe-no-clear "tmux load-buffer -b tmpbuf - ; tmux wait -S pipe" \; wait pipe \; run "nl=$(tmux show-buffer | wc -l) ; if [ \$nl -le 1 ] ; then echo 1 > /dev/shm/tmux#{session_name}.ss ; fi" \; if-shell "test -f \"/dev/shm/tmux#{session_name}.ss\"" "send -X stop-selection ; run \"rm -f /dev/shm/tmux#{session_name}.ss\""

# C- copy dragged selection to clipboard and remain in copy-mode
# NOTE: skip for now as we cannot extend selection via keys etc., so its confusing
# NOTE: make C- work like original so we can extend a one-line drag ...
# TODO: if alt_on or mouse then dont paste, just copy and exit ...
bind-key -T root         C-MouseDrag1Pane    select-pane \; \
    if-shell -F "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
        "send-keys -M" \
        "copy-mode -H -M"

bind-key -T root         M-S-MouseDrag1Pane    select-pane \; \
    if-shell -F "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
        "send-keys -M" \
        "copy-mode -H -M ; send -X rectangle-on"

#   if-shell -F '#{==:#{=3:pane_title},@v:}' \
#       "send-keys -M" \
#       "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
#           \"send-keys -M\" \
#           \"copy-mode -H -M\""

bind-key -T copy-mode-vi C-MouseDrag1Pane    select-pane \; send -X begin-selection

bind-key -T copy-mode-vi M-S-MouseDrag1Pane  select-pane \; send -X rectangle-on \; send -X begin-selection

# TODO: if we want C-Drag to end copy-mode ...
#    sometimes a sloppy C-DoubleClick has a tiny drag in between ...
#    if -F '#{&&:#{==:#{selection_start_x},#{selection_end_x}},#{==:#{selection_start_y},#{selection_end_y}}}'

bind-key -T copy-mode-vi C-MouseDragEnd1Pane \
    if -Ft= "#{==:#{COPY_START},0}" \
        'select-pane ; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" ; display-message "copied to clipboard" ; wait pipe ; send -X cancel' \
        'setenv -g COPY_START 0 ; send -X stop-selection'

bind-key -T copy-mode-vi M-S-MouseDragEnd1Pane \
    if -Ft= "#{==:#{COPY_START},0}" \
        'select-pane ; send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" ; display-message "copied to clipboard" ; wait pipe ; send -X cancel' \
        'setenv -g COPY_START 0 ; send -X rectangle-off ; send -X stop-selection'

# TODO: if alt_on or mouse then dont paste, just copy and exit ...
bind-key -T root         C-M-MouseDrag1Pane    select-pane \; \
    if-shell -F "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
        "send-keys -M" \
        "copy-mode -H -M"

bind-key -T root         C-S-M-MouseDrag1Pane    select-pane \; \
    if-shell -F "#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}" \
        "send-keys -M" \
        "copy-mode -H -M ; send -X rectangle-on"

#   if-shell -F '#{==:#{=3:pane_title},@v:}' \
#       "send-keys -M" \
#       "if-shell -F \"#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}\" \
#           \"send-keys -M\" \
#           \"copy-mode -H -M\""
# never get to root C-M-MouseDragEnd1Pane because we enter copy-mode at start of drag ...

# M- copy dragged selection to clipboard and cancel copy-mode
bind-key -T copy-mode-vi C-M-MouseDrag1Pane    select-pane \; send -X begin-selection

bind-key -T copy-mode-vi C-S-M-MouseDrag1Pane    select-pane \; send -X rectangle-on \; send -X begin-selection

bind-key -T copy-mode-vi C-M-MouseDragEnd1Pane select-pane \; \
    send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; send -X cancel \; \
    if -F "#{?#{||:#{alternate_on},#{mouse_any_flag}},0,1}" \
        "run -d 0.1 \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

bind-key -T copy-mode-vi C-S-M-MouseDragEnd1Pane select-pane \; \
    send -X pipe-no-clear "myclip -d - ; tmux wait -S pipe" \; wait pipe \; send -X cancel \; \
    if -F "#{?#{||:#{alternate_on},#{mouse_any_flag}},0,1}" \
        "run -d 0.1 \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; fi ; rm -f /dev/shm/tmpbuf\$\$\""

# ==============================================

# ---------------------------------------------------------------------
# TODO: for these four below - should we use SecondClick or DoubleClick ?
# ---------------------------------------------------------------------

# enter copy-mode and copy - NOTE: was #{mouse_any_flag}
bind   -T root         SecondClick1Pane \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "select-pane ; send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; set word-separators \" &'`|[](){},\\\"\" ; send -l lbve ; send -X stop-selection ; send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; set word-separators \" &='`;:+|[](){},/?\\\"\" "

# 3-click - instead of select-line or 0v$ we can try to get next larger entity
# NOTE: not sure this can happen since we enter copy-mode on DoubleClick above ...
# NOTE: tmux word-separators are different than vim and this is not much different than lbve

# previous method ---
#bind   -T root         TripleClick1Pane \
#    if-shell -F '#{==:#{=3:pane_title},@v:}' \
#        "send-keys -M" \
#        "if-shell -F \"#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}\" \
#            \"send-keys -M\" \
#            \"select-pane ; copy-mode ; send -X clear-selection ; set word-separators \\\" \\\" ; send -l lbve ; send -X stop-selection ; set word-separators \\\" &='`;:+|[](){},/?\\\\\\\\\\\\\\\"\\\" ; send -X copy-pipe-no-clear \\\"myclip - ; tmux wait -S pipe\\\" ; wait pipe\""
# ---

bind   -T root         TripleClick1Pane \
    if -Ft= "#{==:#{COPY_DRAG},0}" \
        "select-pane ; send-keys -M" \
        "select-pane ; copy-mode ; send -X clear-selection ; set word-separators \" \" ; send -l lbve ; send -X stop-selection ; set word-separators \" &='`;:+|[](){},/?\\\"\" ; send -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe"
#unbind-key -T root         DoubleClick1Pane
bind-key -T root         DoubleClick1Pane ''

# default select-word does not always stop selelction with a scroll
bind   -T copy-mode-vi SecondClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " &'`|[](){},\"" \; send -l lbve \; send -X pipe-no-clear "myclip - ; tmux wait -S pipe" \; wait pipe \; set word-separators " &='`;:+|[](){},/?\" "
# 3-click - instead of select-line or 0v$ we can try to get next larger entity
# NOTE: tmux word-separators are different than vim and this is not much different than lbve
bind   -T copy-mode-vi TripleClick1Pane \
    select-pane \; send -X clear-selection \; set word-separators " " \; send -l lbve \; set word-separators " &='`;:+|[](){},/?\\\"" \; send -X pipe-no-clear "myclip - ; tmux wait -S pipe" \; wait pipe
#unbind-key -T copy-mode-vi DoubleClick1Pane
bind-key -T copy-mode-vi DoubleClick1Pane ''

# ----------------

# TODO: more than just set-buffer here, need to myclip ...

bind   -T root MouseDown2Pane if-shell -F -t = "#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}" " select-pane -t=; send-keys -M " " display-menu -t= -xM -yM -T '#[align=centre]#{pane_index} (#{pane_id})'  '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}' '' {send -X history-top} '#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}' '' {send -X history-bottom} '' '#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}' '' {if -F '#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}' 'copy-mode -t='; send -Xt= search-backward \"#{q:mouse_word}\"} '#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}' '' {copy-mode -q; send-keys -l -- \"#{q:mouse_word}\"} '#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}' '' {copy-mode -q; set-buffer -- \"#{q:mouse_word}\"} '#{?mouse_line,Copy Line,}' '' {copy-mode -q; set-buffer -- \"#{q:mouse_line}\"} '' 'Horizontal Split' '' {split-window -h} 'Vertical Split' '' {split-window -v} '' '#{?#{>:#{window_panes},1},,-}Swap Up' 'u' {swap-pane -U} '#{?#{>:#{window_panes},1},,-}Swap Down' '' {swap-pane -D} '#{?pane_marked_set,,-}Swap Marked' '' {swap-pane} '' 'Kill' '' {kill-pane} 'Respawn' '' {respawn-pane -k} '#{?pane_marked,Unmark,Mark}' '' {select-pane -m} '#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}' '' {resize-pane -Z} "

#unbind-key -T root SecondClick2Pane
#unbind-key -T root TripleClick2Pane
#unbind-key -T root DoubleClick2Pane
bind-key -T root SecondClick2Pane ''
bind-key -T root TripleClick2Pane ''
bind-key -T root DoubleClick2Pane ''

# C-Btn2 used by some terminals (urxvt) ...
#unbind-key -T root C-MouseDown2Pane
#unbind-key -T root C-SecondClick2Pane
#unbind-key -T root C-TripleClick2Pane
#unbind-key -T root C-DoubleClick2Pane
bind-key -T root C-MouseDown2Pane ''
bind-key -T root C-SecondClick2Pane ''
bind-key -T root C-TripleClick2Pane ''
bind-key -T root C-DoubleClick2Pane ''

# NOTE: A-Btn2 available ...
#unbind-key -T root C-M-MouseDown2Pane
#unbind-key -T root C-M-SecondClick2Pane
#unbind-key -T root C-M-TripleClick2Pane
#unbind-key -T root C-M-DoubleClick2Pane
bind-key -T root C-M-MouseDown2Pane ''
bind-key -T root C-M-SecondClick2Pane ''
bind-key -T root C-M-TripleClick2Pane ''
bind-key -T root C-M-DoubleClick2Pane ''

# ----------------

# NOTE: if we can do a mouse menu in vi and can know we are in vi reliably locally and remote then dont put up a menu
#       if not and we can still know we are in vi reliably then put up a Copy/Paste menu for vi and use vi cmds
#       else put up a general-purpose Paste menu
#
#       local cmd check:
#       #{m/r:(vi|vim),#{pane_current_command}}
#
#       manual check:
#       if-shell "vmd=\$(tmux show-environment -g TMUX_VI_MODE 2>/dev/null | awk -F= '{print \$2}') ; if [ \"\$vmd\" != \"1\" ] ; then exit 1 ; else exit 0 ; fi" \
#           "if-shell -Ft= '#{alternate_on}' \
#
#       vi sets title (works remotely also) ...
#       See https://sunaku.github.io/tmux-select-pane.html for documentation.
#       set title titlestring=@v:
#       if &term =~ '^screen' && !has('nvim') | exe "set t_ts=\e]2; t_fs=\7" | endif
#       #{==:#{=3:pane_title},@v:}

# for vi - set Copy/Cut/Paste + other general purpose Paste menu -
bind   -T root         MouseDown3Pane select-pane -t = \; \
    if-shell -F '#{!=:#{==:#{=3:pane_title},@v:},#{==:#{=5:pane_title},@v:t:}}' \
        "display-menu -xM -yM \
            ' Copy '  '' 'send-keys M-&' '' \
            ' Cut '   '' 'send-keys M-(' '' \
            ' Paste ' '' 'send-keys M-*' '' \
            ' Clear ' '' 'send-keys C-[' " \
        "if-shell -F '#{==:#{=5:pane_title},@v:t:}}' \
            \"display-menu -xM -yM \
                ' Copy '  '' 'send-keys M-&' '' \
                ' Paste ' '' 'send-keys M-*' '' \
                ' Clear ' '' 'send-keys C-[' '' \
                ' Ret-T ' '' 'send-keys C-w \\\"0\\\"' \" \
            \"display-menu -xM -yM \
                'Select' '' 'setenv -g COPY_DRAG 1 ; copy-mode' '' 'Paste ' '' 'run \\\"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\\\\\"<clipboard empty>\\\\\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\\\"' '' 'Clear ' '' 'send-keys C-c' '' 'Enter' '' 'display-message -N -d 900 \\\"right btn dbl-click on any status-right\\\"'\""

# general purpose Paste only menu -
#bind   -T root         MouseDown3Pane select-pane -t = \; \
#    display-menu -xM -yM ' Paste ' '' 'run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"'

#unbind-key -T root         SecondClick3Pane
#unbind-key -T root         TripleClick3Pane
#unbind-key -T root         DoubleClick3Pane
bind-key -T root         SecondClick3Pane ''
bind-key -T root         TripleClick3Pane ''
bind-key -T root         DoubleClick3Pane ''

# ----------------

# cool if we could use -x#{selection_end_x{} -y #{slection_end_y} ...
bind   -T copy-mode-vi MouseDown3Pane \
    select-pane -t = \; \
    if-shell -F "#{selection_present}" \
        "display-menu -xM -yM ' Select ' '' 'setenv -g COPY_DRAG 1' '' ' Copy+Q ' '' 'send y' '' 'Copy+Q+P' '' 'send y ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\"' '' ' Copy ' '' 'send C-y' '' ' Clear ' '' 'send q' '' ' ClearA ' '' 'send A' '' ' Append ' '' 'send a' '' ' Quit ' '' 'send -X cancel'" \
        "display-menu -xM -yM 'Select' '' 'setenv -g COPY_DRAG 1' '' 'Quit+P' '' 'send -X cancel ; run \"myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \\\"<clipboard empty>\\\" ; fi ; rm -f /dev/shm/tmpbuf\$\$\"' '' ' Quit ' '' 'send -X cancel'"
#unbind-key -T copy-mode-vi SecondClick3Pane
#unbind-key -T copy-mode-vi TripleClick3Pane
#unbind-key -T copy-mode-vi DoubleClick3Pane
bind-key -T copy-mode-vi SecondClick3Pane ''
bind-key -T copy-mode-vi TripleClick3Pane ''
bind-key -T copy-mode-vi DoubleClick3Pane ''

# ----------------

#bind-key -T root C-F11 \
#    if-shell -Ft= '#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},1,0}}' \
#        "if -F \"#{!=:#{MYCLIP_APPEND},0}\" \"setenv -g MYCLIP_APPEND 0 ; display-message -N \\\"Append Clipboard: OFF\\\"\" \"setenv -g MYCLIP_APPEND 1 ; display-message \\\"Append Clipboard: ON\\\"\""

# TODO: a to set append flag for selection to append to existing clipboard contents ...
#bind-key -T copy-mode-vi a \
#    if -F "#{selection_present}" \
#        "send-keys -X append-selection ; send -X clear-selection"

# TODO: append selection ?
#unbind-key -T copy-mode-vi A
#bind-key   -T copy-mode-vi A send-keys -X append_selection

bind -T copy-mode-vi a \
    if-shell -F "#{selection_present}" \
        "send-keys -X pipe-no-clear \"myclip - ; tmux wait -S pipe\" ; wait pipe ; run \"tmux save-buffer -b append001 /dev/shm/tmux.buf ; myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc | tmux load-buffer -b tmpbuf - && tmux save-buffer -b tmpbuf -a /dev/shm/tmux.buf ; cat /dev/shm/tmux.buf | sed '\\\$s/ \$//' | myclip - ; tmux delete-buffer -b tmpbuf ; cat /dev/shm/tmux.buf | tmux load-buffer -b append001 - ; rm -f /dev/shm/tmux.buf\" ; send -X stop-selection ; display-message \"selection appended\"" \
        "display-message \"no selection to append\""

# do we want to clear selection on clear append or no ?
bind -T copy-mode-vi A \
    delete-buffer -b append001 \; if-shell -F "#{selection_present}" \
        "send -X stop-selection ; display-message \"append buffer cleared\"" \
        "display-message \"append buffer cleared\""

bind -T copy-mode-vi Z \
    select-pane \; copy-mode \; send -X clear-selection \; set word-separators " " \; send -l lbve \; send -X stop-selection \; set word-separators " &='`;:+|[](){},/?\"" \; send -X pipe-no-clear "tmux load-buffer -b urlbuf - ; tmux wait -S pipe" \; wait pipe \; run "sleep 0.50" \; send -X cancel \; run "url=\$(tmux show-buffer -b urlbuf) ; echo \"\$url\" | ${BYOBU_CONFIG_DIR}/bin/urlopen ; tmux delete-buffer -b urlbuf"

# ----------------

# C-Btn3 used by some terminals (urxvt) ...
# try to map it here and if its high-jacked by parent terminal then so be it ...

# used to only paste if not alternate ... but I think it makes sense to ALWAYS paste, like C-S-V etc.
#   if-shell -F "#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}" \
#       'send-keys -M' \
#       'run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"'

# C-Btn3 root paste (same as A-) ...
bind   -T root         C-MouseDown3Pane   select-pane -t = \; \
    run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"
#unbind-key -T root         C-SecondClick3Pane
#unbind-key -T root         C-TripleClick3Pane
#unbind-key -T root         C-DoubleClick3Pane
bind-key -T root         C-SecondClick3Pane ''
bind-key -T root         C-TripleClick3Pane ''
bind-key -T root         C-DoubleClick3Pane ''

# C-Btn3 copy-mode if selection present then copy and cancel ...
bind   -T copy-mode-vi C-MouseDown3Pane   select-pane -t = \; \
    if-shell -F '#{selection_present}' \
        "send-keys -X pipe-and-cancel \"myclip - ; tmux wait -S pipe\" ; wait pipe" \
        "send -X cancel"
#unbind-key -T copy-mode-vi C-SecondClick3Pane
#unbind-key -T copy-mode-vi C-TripleClick3Pane
#unbind-key -T copy-mode-vi C-DoubleClick3Pane
bind-key -T copy-mode-vi C-SecondClick3Pane ''
bind-key -T copy-mode-vi C-TripleClick3Pane ''
bind-key -T copy-mode-vi C-DoubleClick3Pane ''

# ----------------

# used to only paste if not alternate ... but I think it makes sense to ALWAYS paste, like C-S-V etc.
#   if-shell -F "#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}" \
#       'send-keys -M' \
#       'run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"'

# A-Btn3 always paste ...
bind   -T root         C-M-MouseDown3Pane   select-pane -t = \; \
    run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"
#unbind-key -T root         C-M-SecondClick3Pane
#unbind-key -T root         C-M-TripleClick3Pane
#unbind-key -T root         C-M-DoubleClick3Pane
bind-key -T root         C-M-SecondClick3Pane ''
bind-key -T root         C-M-TripleClick3Pane ''
bind-key -T root         C-M-DoubleClick3Pane ''

# copy-mode A-Btn3 cancel copy-mode and paste ...
bind   -T copy-mode-vi C-M-MouseDown3Pane   select-pane -t = \; \
    if-shell -F '#{selection_present}' \
        'send-keys -X pipe-and-cancel "myclip - ; tmux wait -S pipe" ; wait pipe ; run "myclip --o --rmlastnl --sc /dev/shm/tmux#{session_name}.spc > /dev/shm/tmpbuf\$\$ ; if [ -s /dev/shm/tmpbuf\$\$ ] ; then tmux load-buffer /dev/shm/tmpbuf\$\$ ; tmux paste-buffer -dp ; else tmux display-message -N \"<clipboard empty>\" ; fi ; rm -f /dev/shm/tmpbuf\$\$"' \
        'send -X cancel'
#unbind-key -T copy-mode-vi C-M-SecondClick3Pane
#unbind-key -T copy-mode-vi C-M-TripleClick3Pane
#unbind-key -T copy-mode-vi C-M-DoubleClick3Pane
bind-key -T copy-mode-vi C-M-SecondClick3Pane ''
bind-key -T copy-mode-vi C-M-TripleClick3Pane ''
bind-key -T copy-mode-vi C-M-DoubleClick3Pane ''

# ----------------

#   select-pane \; \
#   if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
#       " " \
#       "send-keys -XN 10 scroll-up"

bind-key -T copy-mode-vi WheelUpPane \
    select-pane \; send-keys -XN 10 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 10 scroll-up

bind-key -T copy-mode-vi C-WheelUpPane \
    select-pane \; send-keys -XN 24 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 10 scroll-up

# Alt-Wheel for a faster scroll
bind-key -T copy-mode-vi M-WheelUpPane \
    select-pane \; send-keys -XN 48 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 48 scroll-up

bind-key -T copy-mode-vi C-M-WheelUpPane \
    select-pane \; send-keys -XN 24 scroll-up
#   select-pane \; send -X stop-selection \; send-keys -XN 10 scroll-up

# NOTE: no C-WheelUp - often that is font zoom etc. ...

bind-key -T root         WheelUpPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 10 Up' \
                'copy-mode ; send -XN 2 cursor-left ; send -XN 24 cursor-up ; send -XN 5 scroll-up'\""

bind-key -T root         C-WheelUpPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 24 Up' \
                'copy-mode ; send -XN 2 cursor-left ; send -XN 24 cursor-up ; send -XN 12 scroll-up'\""

bind-key -T root         M-WheelUpPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 48 Up' \
                'copy-mode ; send -XN 2 cursor-left ; send -XN 24 cursor-up ; send -XN 24 scroll-up'\""

bind-key -T root         C-M-WheelUpPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 24 Up' \
                'copy-mode ; send -XN 2 cursor-left ; send -XN 24 cursor-up ; send -XN 12 scroll-up'\""

# ----------------

bind-key -T copy-mode-vi WheelDownPane select-pane \; \
    if -F "#{selection_active}" "send -XN 10 scroll-down" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send -XN 10 scroll-down\" \
            \"if -Ft= \\\"#{!=:#{COPY_DRAG},0}\\\" \
                \\\"send -XN 10 scroll-down\\\" \
                \\\"send -XN 10 scroll-down-and-cancel\\\" \" "

bind-key -T copy-mode-vi C-WheelDownPane select-pane \; \
    if -F "#{selection_active}" "send -XN 24 scroll-down" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send -XN 24 scroll-down\" \
            \"if -Ft= \\\"#{!=:#{COPY_DRAG},0}\\\" \
                \\\"send -XN 24 scroll-down\\\" \
                \\\"send -XN 24 scroll-down-and-cancel\\\" \" "

# Alt-Wheel for a faster scroll
bind-key -T copy-mode-vi M-WheelDownPane select-pane \; \
    if -F "#{selection_active}" "send -XN 48 scroll-down" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send -XN 48 scroll-down\" \
            \"if -Ft= \\\"#{!=:#{COPY_DRAG},0}\\\" \
                \\\"send -XN 48 scroll-down\\\" \
                \\\"send -XN 48 scroll-down-and-cancel\\\" \" "

bind-key -T copy-mode-vi C-M-WheelDownPane select-pane \; \
    if -F "#{selection_active}" "send -XN 24 scroll-down" \
        "if-shell -Ft= '#{||:#{alternate_on},#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}}' \
            \"send -XN 24 scroll-down\" \
            \"if -Ft= \\\"#{!=:#{COPY_DRAG},0}\\\" \
                \\\"send -XN 24 scroll-down\\\" \
                \\\"send -XN 24 scroll-down-and-cancel\\\" \" "

# NOTE: no C-WheelDown - often that is font zoom etc. ...

# if not #{alternate_on} dont send Down key
# data to prevent extraneous chars in output
bind-key -T root         WheelDownPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 10 Down' \
                ''\""

bind-key -T root         C-WheelDownPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 24 Down' \
                ''\""

bind-key -T root         M-WheelDownPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 48 Down' \
                ''\""

bind-key -T root         C-M-WheelDownPane \
    if-shell -Ft= "#{?pane_active,0,1}" "select-pane -t=" \
        "if-shell -Ft= '#{||:#{mouse_any_flag},#{&&:#{pane_in_mode},#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}}}' \
            \"send-keys -M\" \
            \"if-shell -Ft= '#{alternate_on}' \
                'send-keys -N 24 Down' \
                ''\""

# ==============================================

